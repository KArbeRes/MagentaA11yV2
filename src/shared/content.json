{
  "web": [
    {
      "label": "Component",
      "name": "component",
      "children": [
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nGIVEN THAT I am on a page with a button\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a button I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the button I SEE the intended action occurs\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I use the spacebar and/or enter key to activate the button I HEAR the intended action occurs\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I doubletap with the button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the button.\n   * Spacebar: Activates the button.\n   * Enter: Activates the button.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n   * Name: Its purpose is clear\n   * Role: It identifies its role of button\n   * Group: It indicates if it has popup for listbox or menus\n   * State: It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/button/buttonTalkback.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/button/buttonVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/button/buttonNVDA.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/button/buttonJaws.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Buttons vs links\n\n### If it goes somewhere, it’s `<a>` link.\n\n* When the user clicks a link, they are taken to a different location in the site.\n  * Either another page or even another area of the same page\n* A link can look like a big shiny button but it must be coded as `<a>` link\n\n### If it does something, it’s a `<button>`\n\n* Buttons cause an action to occur on the same page\n  * Submit a form (even when submission takes you to a new page)\n  * Open a menu\n  * Launch a modal\n  * Expand details\n* A button can look like a link, but it must be coded as a `<button>`\n\n## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* It uses <u>CSS pseudo attributes</u> to create the arrow indicator, no Javascript.\n\n```html\n<button>\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\">\n   Continue\n   </button>\n</example>\n\n## Focusable disabled button\n\nThe preferred method is to use `aria-disabled=\"true\"` so screen reader users can find the button, click submit and be notified of errors in the form.\n\n```html\n<button aria-disabled=\"true\">\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">\n   Continue\n   </button>\n</example>\n\n## Fully disabled button\n\nA button that uses the disabled attribute will not be focusable, but it is still discoverable by the screen reader while browsing.\n\n```html\n<button disabled>\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" disabled>\n   Continue\n   </button>\n</example>\n\n## When you can’t use semantic HTML\n\nThis custom button requires extra attributes and JS event listeners. Adding `tabindex=\"0\"` makes it focusable.\n\n```html\n<div role=\"button\" tabindex=\"0\" >\n  Continue\n</div>\n```\n\n## When there’s no inner text that text makes sense\n\n* As a last resort, `aria-label` can be used.\n* `aria-label` will (typically) replace the inner text of the button for the screen reader output.\n* DO NOT repeat the inner text in the `aria-label` as some screenreaders will read both.\n\n```html\n<div role=\"button\" tabindex=\"0\" aria-label=\"Continue\">\n  <!-- icon but no text -->\n</div>\n\n<div role=\"button\" tabindex=\"0\" aria-label=\"Buy now, iPhone 17\">\n  Buy now <!-- Ambiguous text doesn't describe the intent -->\n</div>\n```\n\n## When there are repeating buttons\n\nSometimes the design will call for multiple buttons with the same text label. In a case like this, `aria-label` can be used to name each control’s purpose.\n\n```html\n<button aria-label=\"Edit payment date\">\n  Edit\n</div>\n<button aria-label=\"Edit payment amount\">\n  Edit\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Inner text should describe the purpose of the button.\n* `aria-label=\"Button purpose\"` can also be used (as a last resort)\n\n### Role\n\n* Native button identifies as button by default\n* Use `role=\"button\"` for custom elements\n\n### Group\n\n* Use `aria-haspopup=\"true\"` for menu, listbox or modal\n* `aria-controls=\"popupId\"` is not well supported\n\n### State\n\n* Toggle buttons `aria-pressed=\"true/false\"`\n* Menus or expanders use `aria-expanded=\"true/false\"`\n* Use the `disabled` state for completely inactive buttons that shouldn’t be focusable\n* Use `aria-disabled=\"true/false\"` state for inactive custom elements\n\n### Focus\n\n* Focus must be visible\n* Custom elements (like `<div>`) need `tabindex=\"0\"` to be focusable"
        },
        {
          "label": "Search",
          "name": "search",
          "type": "file",
          "generalNotes": "How to test a search input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a search input\n\nGIVEN THAT I am on a page with a search input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a search input I SEE focus is strongly visually indicated\n   * THEN when I use the tab key to move focus to the search submit button I SEE the button is focused\n   * THEN when I use the enter or spacebar key I SEE the search results are presented\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader shortcuts as a search input\n   * THEN when I use the tab key to move focus to the search submit button I HEAR the button is focused\n   * THEN when I use the enter or spacebar key I HEAR the search results are presented\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the search text input and search button\n   * Space: Search button is activated\n   * Enter: Search is activated\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to the search text input and search button\n   * Doubletap: Search button is activated\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a search input\n   * Group: The form itself is discoverable with screenreader shortcuts as a search input\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/search/search-android.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/search/search-ios.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows Jaws Chrome\n\n<video controls>\n  <source src=\"media/video/web/search/search-JAWS.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/search/search-NVDA.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/search/search-desktop-safari.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* Include a search button\n\n### Search with autocomplete suggestions\n\n* For search autocomplete see [Autocomplete input with listbox](/checklist-web/listbox-autocomplete/)\n\n```html\n<form role=\"search\">\n  <label for=\"search\">\n    Search this website:\n  </label>\n  <input list=\"components\" type=\"search\" id=\"search\">\n  <datalist id=\"components\"> \n    <option value=\"Alert\"> \n    <option value=\"Animation\"> \n    <option value=\"Button\"> \n    <option value=\"Checkbox\">\n    <option value=\"Date picker\">\n    <option value=\"Expander accordion\">\n    <option value=\"Footer / contentinfo\">\n    <option value=\"Form\">\n    <option value=\"Header / banner\">\n    <option value=\"Heading: h1, h2, h3\">\n  </datalist>\n\n  <button type=\"submit\">\n    <span class=\"hidden\">Search</span>\n  </button>\n</form>\n```\n\n<!-- Something funky is up with the search button here and I can't figure it out. It is submitting on focus when not using VoiceOver.  -->\n\n<example>\n   <form role=\"search\">\n      <label for=\"search\" class=\"hidden-visually\">\n         Search this website:\n      </label>\n      <input list=\"components\" type=\"search\" id=\"search\">\n      <datalist id=\"components\"> \n         <option value=\"Alert\"> \n         <option value=\"Animation\"> \n         <option value=\"Button\"> \n         <option value=\"Checkbox\">\n         <option value=\"Date picker\">\n         <option value=\"Expander accordion\">\n         <option value=\"Footer / contentinfo\">\n         <option value=\"Form\">\n         <option value=\"Header / banner\">\n         <option value=\"Heading: h1, h2, h3\">\n      </datalist>\n      <button>\n         <span class=\"hidden-visually\">Search</span>\n      </button>\n   </form>\n</example>\n\n## Developer notes\n\n### Name\n\n* Use a `label` with a `for=\"input-id` to describe the input\n* Use `aria-label=\"Search this website\"` if a `label` can't be used\n\n### Role\n\n* Use `role=\"search\"` for the `<form>`\n* Use `type=\"search\"` for the text `<input>`\n\n### Group\n\n* Form identifies itself as `role=\"search\"`\n* Include a search submit button.\n\n### Focus\n\n* Focus must be visible\n\n## Further Reading\n\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html)\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)\n* [WCAG 1.3.5 Identify Input Purpose (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html)\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Table",
          "name": "table",
          "type": "file",
          "generalNotes": "Tables must be used to structure tabular data. Avoid using tables for layout purposes.",
          "gherkin": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\nGIVEN THAT I am on a page with a table\n\n1. Keyboard for mobile & desktop\n\n   — WHEN I use the arrow keys\\\n   — I SEE the table scrolls into view (but is not focusable)\n\n2. Desktop screenreader\n\n   — WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\\\n   — I use the arrow keys\n\n   — I HEAR The table has a caption or a heading to describe its purpose\\\n   — I HEAR It identifies itself as a table\\\n   — I HEAR Column headers and row headers are identified with screenreader shortcuts\n\n3. Mobile screenreader\n\n   — WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\\\n   — I swipe to focusable elements in the footer\n\n   — I HEAR The table has a caption or a heading to describe its purpose\\\n   — I HEAR It identifies itself as a table\\\n   — I HEAR Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/component/table>",
          "condensed": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   — Arrow-keys: The table scrolls into view (and with a screenreader the cells become individually readable)\n\n2. Test mobile screenreader gestures\n\n   — Swipe: The table is browsed from cell to cell\n\n3. Listen to screenreader output on all devices\n\n   — Name: The table has a caption or a heading to describe its purpose\n\n   — Role: It identifies itself as a table\n\n   — Group: Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/component/table>",
          "criteria": null,
          "videos": "#### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/web/table/table_ios.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\\\nOptional: The table is wrapped in a `<figure>` to indicate author and source.\n\n```html\n<table id=\"nato-table\">\n  <caption class=\"h-charlie\">\n    Nato phonetic Alphabet\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Letter</th>\n      <th scope=\"col\">A</th>\n      <th scope=\"col\">B</th>\n      <th scope=\"col\">C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">NATO</th>\n      <td>Alpha</td>\n      <td>Bravo</td>\n      <td>Charlie</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n<table class=\"text-center\">\n  <caption>\n    Nato phonetic Alphabet\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Letter</th>\n      <th scope=\"col\">A</th>\n      <th scope=\"col\">B</th>\n      <th scope=\"col\">C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">NATO</th>\n      <td>Alpha</td>\n      <td>Bravo</td>\n      <td>Charlie</td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"text-center\">\n<caption>\n    Screen reader and browser pairings\n  </caption>\n  <thead>\n    <tr>\n      <th>Platform</th>\n      <th>Screenreader</th>\n      <th>Browser</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-android.svg\" alt=\"Android\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-talkback.svg\" alt=\"Talkback\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\">\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-jaws.svg\" alt=\"JAWS\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-nvda.svg\" alt=\"NVDA\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### When You Can’t Use Semantic HTML\n\nIf tabular data must be displayed without a `<table>` element, additional attributes are required.\n\n```html\n<div role=\"table\" aria-describedby=\"table-desc\">\n  <div id=\"table-desc\">Nato phonetic alphabet</div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\">Letter</span>\n      <span role=\"columnheader\">NATO</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"cell\">A</span>\n      <span role=\"cell\">Alpha</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">B</span>\n      <span role=\"cell\">Bravo</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">C</span>\n      <span role=\"cell\">Charlie</span>\n    </div>\n  </div>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* The table can be named by a heading above or a `<caption>`.\n\n### Role\n\n* Semantic `<table>` structures identify headers appropriately and honor screenreader keyboard shortcuts.\n\n### Group\n\n* Wrapping a table in a `<figure>` element can build a relationship to `<figcaption>` and `<cite>`.\n\n### State\n\n* Sortable tables can use `aria-sort` to indicate state."
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Basic Web Page",
          "name": "basic-web-page",
          "type": "file",
          "generalNotes": "How to test a basic web page",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\nGIVEN THAT I am on a page with a basic web page\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the keyboard to open a new web page I SEE the page has a unique logical title in the browser tab\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the keyboard to open a new web page\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to enter from the web browser tabs\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n   * THEN when I change orientations I HEAR content is accessible in landscape or portrait orientation\n\n4. Device OS settings\n   * WHEN I use zoom/pinch THEN I see text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Enters the page and visibly focuses only interactive elements\n   * Zoom: Content zooms up to 200%\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within page\n   * Pinch/stretch: Content zooms up to 200%\n   * Orientation: Content is accessible in landscape or portrait orientation\n\n3. Listen to screenreader output on all devices\n\n   * Name: The page has a unique logical title in the browser tab\n   * Role: Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n4. Device OS settings\n\n   * Zoom/pinch: text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Validate your code\n\nUse [HTML validation](https://validator.w3.org/nu/) as the foundation for ensuring your page works for everyone.\n\n## Code Examples\n\n### Declare a language\n\nThis aids a screen reader in reading a content in the proper language.\n\n```html\n<html lang=\"en\"></html>\n```\n\n### Give your page a unique title\n\nEach page must have unique `<title>` in the `<head>`:\n\n* This includes single-page dynamic apps *if* the URL changes during the user journey.\n* Do not use the `|` pipe character as a divider (it is read by screen readers).\n\n```html\n<head>\n  <title>Page title - Website title</title>\n</head>\n```\n\n### Ensure users can zoom in\n\nPeople with low vision need the ability to enlarge the page on mobile and desktop.\n\n```html\n<head>\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1\"\n  />\n</head>\n```\n\n### Structure your page with landmarks\n\nLandmarks give structure to the page for the screenreader user to be able to navigate the page by major sections.\n\nEach page must include:\n\n* [Header](https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark)\n* [Nav](https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark)\n* [Main]() TODO\n* [Footer]() TODO\n\n```html\n<header>\n  <!-- Contains the site title -->\n</header>\n<nav>\n  <!-- Primary navigation menu-->\n</nav>\n<main>\n  <!-- Main content -->\n</main>\n<footer>\n  <!-- Site map and legal info -->\n</footer>\n```"
        },
        {
          "label": "Footer",
          "name": "footer",
          "type": "file",
          "generalNotes": "How to test a footer landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\nGIVEN THAT I am on a page with a footer landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a interactive element in the footer I SEE focus is strongly visually indicated\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a interactive element in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the footer\n   * Tab: Links and buttons within the footer are focusable\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within footer.\n   * Doubletap: This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n   * Group: It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#example-footer\">Skip to example footer</a>\n<footer tabindex=\"-1\" id=\"example-footer\">\n  <nav aria-label=\"Site map\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n  </nav>\n  © 2021\n</footer>\n```\n\n<example>\n    <a href=\"#example-footer\">Skip to example footer</a>\n    <footer tabindex=\"-1\" id=\"example-footer\">\n    <nav aria-label=\"Site map\">\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/about/\">About</a></li>\n            <li><a href=\"/contact/\">Contact</a></li>\n        </ul>\n    </nav>\n    © 2025\n    </footer>\n</example>\n\n### When you can't use semantic HTML\n\nThis custom footer requires extra attributes.\n\n```html\n<div role=\"contentinfo\" tabindex=\"-1\" id=\"example-footer\">\n   &copy; 2025 Site Name\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Typically doesn't have a name, unless there are multiple footers.\n\n### Role\n\n* Identifies itself as a footer or contentinfo landmark.\n* If a non-semantic element must be used (like a `<div>`) use `role=\"contentinfo\"`.\n\n### Group\n\n* Typically contains copyright information, navigation links, site map, and privacy statements.\n\n### Focus\n\n* Can be targeted with a skip link, but isn't focusable with the tab key\n* Use `tabindex=\"-1\"` to make the footer targetable with a skip link."
        },
        {
          "label": "Header Landmark",
          "name": "header-landmark",
          "type": "file",
          "generalNotes": "How to test a header landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to enter the web browser window\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the header\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the header or navigation\n   * Tab: Nothing, headers are not focusable unless they are actionable\n   * Arrow-keys: headers are browsed\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves directly to the header or navigation\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as header/banner landmark\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## General\n\n* There must only be a singular header/banner element on the page.\n* Contains the site title and typically the primary navigation.\n\n## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<header id=\"example-header\">\n  <a href=\"#nav-example\">Skip to navigation</a>\n  <a href=\"#\">Not the navigation</a>\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n      <li><button>Sign in</button></li>\n    </ul>\n  </nav>\n</header>\n```\n\n### When You Can’t Use Semantic HTML\n\nThis custom header requires extra attributes.\n\n```html\n<div role=\"banner\" tabindex=\"-1\" id=\"example-header\">\n  <a href=\"/\">Website name</a>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page.\n\n### Role\n\n* Identifies itself as a header or banner landmark.\n* If a non-semantic element must be used (like a `<div>`), use `role=\"banner\"` to make the element discoverable.\n\n### Group\n\n* Contains the site title and typically the primary navigation.\n\n### Focus\n\n* Can be targeted with a skip link, but the skip link will typically be labeled “skip to navigation”\n* Use `tabindex=\"-1\"` to make the header targetable with a skip link.\n* The `<header>` itself isn’t focusable with the tab key."
        },
        {
          "label": "Navigation Landmark",
          "name": "navigation-landmark",
          "type": "file",
          "generalNotes": "How to test a navigation landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\nGIVEN THAT I am on a page with a navigation landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the arrow keys to browse the navigation menu, I SEE the screen scrolls through the page.\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse the navigation menu\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the navigation\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the nav element\n   * Tab: Focus moves to Links and buttons within the nav\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within the nav\n   * Doubletap: This typically activates most elements\n3. Listen to screenreader output on all devices\n   * **Name**: It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n   * **Role**: It is discoverable with screenreader shortcuts as a navigation landmark\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#nav-example\">Skip to example navigation</a>\n<a href=\"#\">Not the navigation</a>\n<nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n    <li><button aria-haspopup=\"true\">Sign in</button></li>\n  </ul>\n</nav>\n```\n\n### Keep custom menus as simple as possible\n\nUse semantic elements where possible.\n\n```html\n<nav id=\"example-expanding-nav\" class=\"menu\">\n  <ul>\n    <li>\n      <a class=\"home\" href=\"/\">\n        Home\n      </a>\n    </li>\n    <li class=\"expander-group\">\n      <button type=\"button\"\n              class=\"menu expander-toggle\"\n              aria-expanded=\"false\"\n              aria-haspopup=\"true\">\n        Menu\n      </button>\n\n      <ul class=\"subnav expander-content\">\n        <li>\n          <a href=\"/about/\">About</a>\n          <button type=\"button\"\n                  class=\"subnav expander-toggle\"\n                  aria-expanded=\"false\"\n                  aria-haspopup=\"true\">\n            <span class=\"hidden\">About</span>\n          </button>\n\n          <ul class=\"expander-content\">\n            <li>\n              <a href=\"/history/\">Our history</a>\n            </li>\n            <li>\n              <a href=\"/values/\">Our values</a>\n            </li>\n          </ul>\n\n        </li>\n        <li>\n          <a href=\"/contact\">Contact</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</nav>\n```\n\n### When you can’t use semantic HTML\n\nThis custom navigation requires extra attributes.\n\n```html\n<div role=\"navigation\" tabindex=\"-1\" id=\"example-navigation\">\n  <ul>\n    <li><a href=\"/\">Website name</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</div>\n```\n\n### Multiple navigation elements\n\nWhen there is more than one navigation element, they must have a name.\n\n```html\n<nav tabindex=\"-1\" id=\"nav\" aria-label=\"Main\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</nav>\n\n<h2 id=\"cat-heading\">Categories</h2>\n<nav id=\"cat-nav\" aria-labelledby=\"#cat-heading\">\n  <ul>\n    <li><a href=\"/alpha/\">Alpha</a></li>\n    <li><a href=\"/bravo/\">Bravo</a></li>\n    <li><a href=\"/charlie/\">Charlie</a></li>\n  </ul>\n</nav>\n\n<footer>\n  <nav aria-label=\"Site map\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n  </nav>\n</footer>\n```\n\n## Developer Notes\n\n### Name\n\n* If there are multiple `<nav>` elements (e.g., site menu, pagination, categories), it may be helpful to name them.\n  * Use `aria-label=\"Menu name\"` when there is no visible navigation title.\n  * Use `aria-describedby=\"menu-name-id\"` when the navigation title is a visible heading.\n\n### Role\n\n* Identifies itself as a navigation landmark.\n* Avoid adding ‘menu’ or ‘option’ roles with arrow key event listeners unless building an actual application like Gmail.\n\n### Focus\n\n* When skip links are used, add `tabindex=\"-1\"` so focus can move to the `nav` element, not just bring it into view.\n\n## Further Reading\n\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        }
      ]
    }
  ],
  "native": [
    {
      "label": "Controls",
      "name": "controls",
      "children": [
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": null,
          "condensed": "How to test a button\n\n1. Test keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the button\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the button in a single swipe\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/native-criteria/controls/button>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/button/buttonAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control\n* Programmatic name matches the visible text label (if any)\n\n#### Android Views\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n\n#### Jetpack Compose\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n***\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n#### Android Views\n\n* Standard button or ImageButton\n\n#### Jetpack Compose\n\n* Standard `Button` composable\n\n***\n\n### Groupings\n\n* Visible label can be grouped with button (if applicable) to provide a programmatic name for the button and not duplicate the name announcement\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n***\n\n### State\n\n#### Android Views\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled:  `Button(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n***\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading), except when changing between navigation tabs\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n#### Android Views\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n***\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n#### Android Views\n\n* step 1: Create an accessibility service\n* step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n* step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n#### Jetpack Compose\n\n* List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n* Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n***\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from \"button\" in the label\n  * **Note:** When the user has hints turned on in settings, \"double tap to activate\" will announce at the end of most interactive controls.  Testing should be done with hints turned on to ensure the user understands a control is interactive by hearing either \"button\" or \"double tap to activate\" or both.  Announcements on Android devices vary slightly due to manufacturer.\n\n* \"Label, button, double tap to activate\"\n\n* \"Label, (other content in cell), button, double tap to activate\" (grouping)\n\n* \"Label, button, selected, double tap to activate\" (selected state)\n\n* \"Label, disabled\" (disabled state)",
          "iosDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control.\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note**: Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n* When naming a button, do not add “button” to the programmatic name (label). Assigning “Button” as the role will handle this announcement.\n  * **Incorrect announcement**: “Submit button, Button”\n  * **Correct announcement**: “Submit, Button”\n\n#### UIKit\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The button’s title will overwrite the button’s `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the button’s `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label’s `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `AccessibilityEnabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`.\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n***\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### UIKit\n\n* Use `UIButton`\n* If necessary, set `accessibilityTraits` to `.button`.\n\n#### SwiftUI\n\n* Use native `Button` view\n* If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as `Button`.\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n***\n\n### Groupings\n\nGroup visible label with button, if applicable, to provide a programmatic name for the button and not duplicate the name announcement\n\n#### UIKit\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to true for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n* If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n  * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n* Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n* Use `shouldGroupAccessibilityChildre`n to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### SwiftUI\n\n* Use view `modifier accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n***\n\n### State\n\n#### UIKit\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is “Dimmed”.\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### SwiftUI\n\n* For selected, use `accessibilityAddTraits(.isSelected)`.\n* For disabled, use view modifier `disabled()`.\n\n***\n\n### Focus\n\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading, except when changing between navigation tabs\n* When a menu, picker, or modal is closed, the focus should return to the triggering element.\n\n#### UIKit\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### SwiftUI\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n***\n\n### Announcement examples\n\nOptions for announcements below depend on implementation. Announcement order can vary.\n\n* \"Label, button\"\n* \"Label, (other content in cell), button\" (grouping)\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)\n\n***",
          "developerNotes": ""
        },
        {
          "label": "Captcha",
          "name": "captcha",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Notifications",
      "name": "notifications",
      "children": [
        {
          "label": "Modal",
          "name": "modal",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Patterns",
      "name": "patterns",
      "children": [
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    }
  ],
  "how-to-test": [
    {
      "label": "Components",
      "name": "components",
      "children": [
        {
          "label": "Images",
          "name": "images",
          "type": "file",
          "generalNotes": "Learn how to test and provide appropriate alternative text for different image types—including informative, decorative, and complex images—to ensure they are accessible to all users. Covers both automated tools and manual inspection techniques.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "1. **Types of images**\n\n   There are many types of images. The type of image can be determined by the context of the page being tested. These different types of images have different testing steps.\n\n   * **Informative Images:** These are visuals like pictures, photos, and illustrations that convey important information or concepts. To make them accessible, we need to include a brief description in text form that captures the key content of the image.\n\n   * **Decorative Images:** Sometimes, images are used purely for aesthetic purposes and don't convey meaningful information. In such cases, it's best to provide an empty text alternative (alt=\"\") to indicate that the image serves a decorative role and doesn't require a description.\n\n   * **Functional Images:** Images that serve as links or buttons should have text alternatives that describe their function rather than just their appearance. For example, if you have an image of a printer icon that initiates a printing action, the alt text should convey this functionality, like \"Print.\"\n\n   * **Images of Text:** Images of text should be avoided whenever possible. In fact, some images of text can violate [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html). However, if you must use images with text, ensure that the alt text contains the exact same words as the text within the image to maintain consistency.\n\n   * **Complex Images such as Graphs and Diagrams:** When using images to present complex data or detailed information, it's crucial to provide a comprehensive text description that conveys all the data and details found in the image. This allows individuals who cannot see the image to still access and understand its content.\n\n2. **How to test**\n\n   ### Automated Testing\n\n   Automated scanning tools, such as [WAVE](https://wave.webaim.org/), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), or [Deque's Axe DevTools](https://www.deque.com/blog/axe-devtools-extension-update-new-color-contrast-analyzer/) are a great starting point for image testing. All of these tools can run page scans that quickly generate reports identifying some image issues. Scans are:\n\n   * <strong>Good</strong> at identifying simple issues like missing <code>alt</code> attributes on images or empty alt attributes on functional images.\n   * <strong>Bad</strong> at identifying issues related to alternative text quality or whether or not an image should be marked as decorative and hidden from screen readers.\n\n   ### Manual testing\n\n   Automated scanning must be complemented with a manual review of the page. Manual image testing can test for alt text quality, ensuring that decorative images are hidden from assistive technology, all text found in images of text are present in alt text, and that functional images have the appropriate alt text.\n\n   #### <strong>Getting started</strong>\n\n   * Open Chrome DevTools in your browser window <span class=\"keyboard-key\">F12</span>\n   * Right-click and select \"Inspect\" on the image in the page you want to test.\n\n3. **Informative Images**\n\n   * Check that the image owns an <code>alt</code> attribute.\n   * Ensure that the <code>alt</code> attribute is present is not empty.\n   * Ensure that the alt attribute is present is not empty, such as <code>alt</code> or <code>alt=\"\"</code>\n   * The <code>alt</code> attribute value / description of the image should be accurate and succinct. The image alternative should not consist of information that duplicates nearby text content.\n\n   <img\n   src=\"media/images/how-to-test/how-to-images-meaningful-1.png\"\n   alt=\"Inspecting an image in DevTools to check alt text, meaningful image\"/>\n\n   ### IMG\n\n   ```html\n   <img alt=\"A rear view of the iPhone 15 Pro in silver, along with a front view of the iPhone 15 Pro Max in silver.\" src=\"../iphone.png\" ... >\n   ```\n\n   ### SVG\n\n   Some images are implemented using inline <code>SVG</code>. Text alernatives for these images can be defined by use of <code>role=\"img\"</code> and <code>aria-label=\"I am the alt text\"</code>. The <code>alt</code> attribute should not be on an element whose <code>role</code> is <code>role=\"img\"</code> this is instead handled by <code>aria-label</code>.\n\n   ```html\n   <svg role=\"img\" aria-label=\"I am the alt text\">...</svg>\n   ```\n\n4. **Decorative Images**\n\n   * Ensure that the <code>alt</code> attribute is present and owns an empty or null value. <code>alt=\"\"</code>.\n   * <strong>Note:</strong> <code>aria-hidden=\"true\"</code> is not needed if an image has an empty or null alt attribute value <code>alt=\"\"</code>.\n\n    <img src=\"media/images/how-to-test/how-to-images-decorative-1.png\" alt=\"Inspecting an image in DevTools to check alt text, decorative image\">\n\n   ```html\n   <img alt=\"\" src=\"../some-image.png\" ...>\n   ```\n\n5. **Functional Images**\n\n   * Ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Functional images are typically links or buttons so the alt text should define the purpose of the link instead of describing the image.\n\n    <img src=\"media/images/how-to-test/how-to-images-functional.png\" alt=\"Inspecting an image in DevTools to check alt text, functional image\">\n\n   * **Note:** Functional images can have empty or null alt attribute values <code>alt=\"\"</code> if the text alternative is conveyed in the parent control's label. For example, <code>aria-label=\"Download on the Apple App Store\"</code>.\n\n   ```html\n   <button aria-label=\"Download on the Apple App Store\">\n       <img src=\"apple.png\" alt=\"\">\n   </button>\n   ```\n\n6. **Images of Text**\n\n   * Sometimes text can't be easily created with HTML and CSS and an image must contain text. In this case, ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Typically, the text is the most important part of the image. There is no need for the image itself to be described unless it adds value to the content of the page.\n   * Consider logging a defect for [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html) if it seems like there might be a viable workaround to add real text to the page vs. an image of text.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-text.png\" alt=\"Inspecting an image in DevTools to check alt text, image of text example\">\n\n   ```html\n   <img src=\"apple-iphone-15-pro.png\" alt=\"Titanium Apple iPhone 15 Pro\">\n   ```\n\n7. **Complex Images**\n\n   * Data visualizations, charts, and graphs can be very difficult to author alternative text for. Some features like charts and graphs may not be accessible themselves but there can be text alternatives nearby that can act as an accessible alternative.\n   * For complex images that are <code>img</code> elements, ensure that the image has an <code>alt</code> attribute and that its value communicates the general purpose of the image. This alt text does not need to contain all of the visual information as that may be too long for an appropriate alt text value. If the alt text does not describe all content in the image ensure there is content nearby, or linked to, that does contain all of the visual information in text form.\n   * For charts and graphs, these features are typically not 100% accessible. Ensure there is content nearby, or linked to, that does contain all of the visual information in text form. For example, an accessible Excel download or HTML Table presenting the key visual information from the content found in the chart.\n   * <strong>Note:</strong> It is important that all text alternatives to complex images must be in an accessible format to qualify as an accessible alternative.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   ```html\n   <img src=\"/assets/images/examples/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   <table>\n       <caption>NASDAQ: TMUS</caption>\n       <tr>\n       <th>Date</th>\n       <th>Price</th>\n       <!-- ... -->\n       </tr>\n       <tr>\n       <td>January 10</td>\n       <td>122.20</td>\n       <!-- ... -->\n       </tr>\n   </table>\n   ```\n\n8. **What to test for**\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure meaningful images have alt text</h3>\n    <p><strong>Note:</strong> The passing example has alt text that matches the text found in the image. The failing example uses the filename for the <code>alt</code> attribute value. Screen readers will announce the filename <code>234@@4-JWKK##KK4442221-11-phone-apple-prod.png</code> which will create a confusing experience.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"Titanium Apple iPhone 15 Pro\"/>\n                </td>   \n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"234@@4-JWKK##KK4442221-11-phone-apple-prod.png\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure decorative images are hidden from assistive technology</h3>\n    <p><strong>Note:</strong> Passing example image has an empty <code>alt</code> attribute value. The failing example has a very long redundant description of the image. Not only is it too verbose, it has the same text as the nearby text content.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>   \n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"Home internet. Picture of a magenta colored gateway device inside of an open box, icon\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure complex images have a text alternative</h3>\n    <p><strong>Note:</strong> The passing chart has a general text alternative describing what the image is but also references nearby text data for reference. <code>alt=\"Fruit chart, data below\"</code>. The failing example owns an empty alt attribute value which hides the image from screen reader users and does not provide an alternative.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"Fruit chart, data below\"/>\n                    <ul>\n                        <li>Watermelons 20%</li>\n                        <li>Grapes 10%</li>\n                        <li>Oranges 24%</li>\n                        <li>Apples 30%</li>\n                        <li>Bananas 16%</li>\n                    </ul>\n                    </td>   \n                    <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n   ## Related WCAG\n\n   * 1.1.1 Non-text Content\n   * 1.4.5 Images of Text\n   * 2.4.4 Link Purpose\n   * 2.5.3 Label in Name\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   * [W3C Images Tutorial](https://www.w3.org/WAI/tutorials/images/)\n   * [WebAIM Alternative Text](https://webaim.org/techniques/alttext/)"
        },
        {
          "label": "Links & Buttons",
          "name": "links-&-buttons",
          "type": "file",
          "generalNotes": "Testing links and buttons is essential to ensuring a site is accessible and functional for all\nusers.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nContains developer-specific information, including expected behaviors, implementation details, and\nbest practices.\n\n1. **How to test**\n\n   **Test with your keyboard first**\n\n   Navigate through the page using only the tab and shift + tab keys on your keyboard to reach all\n   links and buttons.\n\n   **Test with screen readers second**\n\n   Use a screen reader, such as NVDA (for Windows) or VoiceOver (for macOS) and browse the page\n   using your arrow keys to reach all links and buttons.\n\n2. **What to test for**\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure each link and button receives focus and has a visible focus indicator</h3>\n       <table >\n       <thead>\n           <th scope=\"col\">\n           Pass\n           </th>\n           <th scope=\"col\">\n           Fail\n           </th>\n       </thead>\n       <tbody>\n       <tr>\n           <td>\n           <button class=\"Magentaa11y-button Magentaa11y-button--primary\">I get focus!</button>\n           </td>\n           <td>\n           <div class=\"Magentaa11y-button Magentaa11y-button--primary\">I do NOT get focus</div>\n           </td>\n       </tr>\n           <tr>\n           <td>\n           <a href=\"#\">I get focus!</a>\n           </td>\n           <td>\n           <a>I do NOT get focus</a>\n           </td>\n       </tr>\n       </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure buttons and links can be activated with the <code>enter</code> key and that buttons can also be activated with the <code>space</code> key</h3>\n       <table >\n           <thead>\n           <th scope=\"col\">\n               Pass\n           </th>\n           <th scope=\"col\">\n               Fail\n           </th>\n           </thead>\n           <tbody>\n           <tr>\n           <td>\n               <button class=\"Magentaa11y-button Magentaa11y-button--primary\" data-fn=\"showAlert\">Show alert</button>\n           </td>\n           <td>\n               <div class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"button\" tabindex=\"0\" data-fn=\"showMouseAlert\" data-event=\"onMouseDown\">\n               Show alert\n               </div>\n           </td>\n           </tr>\n               <tr>\n           <td>\n               <a href=\"/home\">Magentaa11y home</a>\n           </td>\n           <td>\n               <a tabindex=\"0\" data-fn=\"goToHome\" data-event=\"onMouseUp\" >Magentaa11y home</a>\n           </td>\n           </tr>\n           </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure disabled controls are focusable but not actionable, and have an <code>aria-disabled=\"true\"</code> attribute</h3>\n         <p><strong>Note:</strong> A control that is disabled should not be interactive to any users. Nothing should happen when activated.</p>\n         <table >\n             <thead>\n             <th scope=\"col\">\n                 Preferred\n             </th>\n             <th scope=\"col\">\n                 Visually disabled but actionable\n             </th>\n             </thead>\n             <tbody>\n             <tr>\n             <td>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">Save</button>\n             </td>\n             <td>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary visually-disabled\" tabindex=\"-1\" data-fn=\"showAlertWhenDisabled\">Save</button>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all links and buttons have clear labels and that all graphical controls have accurate <code>aria-label</code> attributes</h3>\n         <table >\n             <thead>\n             <th scope=\"col\">\n                 Pass\n             </th>\n             <th scope=\"col\">\n                 Fail\n             </th>\n             </thead>\n             <tbody>\n                 <tr>\n             <td>\n                 <button data-icon=\"playCircleOutlined\" data-label=\"Play video\" />\n             </td>\n             <td>\n                 <button data-icon=\"playCircleOutlined\">\n                 </button>\n             </td>\n             </tr>\n             <tr>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more about links\n         </a>\n             </td>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more\n         </a>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all CTA buttons or links have appropriate <code>aria-label</code> values.</h3>\n         <p><strong>Note:</strong> If a control has <code>aria-label</code>, the <code>aria-label</code> must contain the text that is presented visually. The text should not be broken up and be the first part of the label.</p>\n         <table>\n         <thead>\n             <th scope=\"col\">\n             Pass\n             </th>\n             <th scope=\"col\">\n             Fail\n             </th>\n         </thead>\n         <tbody>\n             <tr>\n             <td>\n             <h2>iPhone 14</h2>\n             <p>I am the product information.</p>\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Buy now, iPhone 14\">Buy Now</button>\n             </td>\n             <td>\n             <h2>iPhone 14</h2>\n             <p>I am the product information.</p>\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Learn more about our specials\">Buy Now</button>\n             </td>\n         </tr>\n         <tr>\n             <td>\n             <code>aria-label=\"Buy now, iPhone 14\"</code>\n             </td>\n             <td>\n             <code>aria-label=\"Learn more about our specials\"</code>\n             </td>\n         </tr>\n         </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure screen readers accurately announce any button or link state that is conveyed visually</h3>\n       <p><strong>Note:</strong> States such as expanded,collapsed, or current can be communicated to screen reader users.</p>\n       <table>\n         <thead>\n           <th scope=\"col\">Pass</th>\n           <th scope=\"col\">Fail</th>\n         </thead>\n         <tbody>\n           <tr>\n             <td>\n               <div class=\"MagentaA11y-accordion\">\n                 <h2 class=\"MagentaA11y-accordion__heading\">\n                   <button\n                     class=\"MagentaA11y-accordion__headline\"\n                     aria-expanded=\"false\"\n                     data-fn=\"toggleAccordionState\"\n                     aria-controls=\"list\">\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                   </button>\n                 </h2>\n                 <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n                   This button expressed its state as expanded or collapsed\n                 </div>\n               </div>\n             </td>\n             <td>\n               <!--  -->\n               <div class=\"MagentaA11y-accordion\">\n                 <h2 class=\"MagentaA11y-accordion__heading\">\n                   <button class=\"MagentaA11y-accordion__headline\" aria-controls=\"listB\">\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                   </button>\n                 </h2>\n                 <div class=\"MagentaA11y-accordion__body\" id=\"listB\">\n                   This button is not conveying it's state.\n                 </div>\n               </div>\n             </td>\n           </tr>\n         </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure skip to &amp; same-page links move focus for screen reader and keyboard users</h3>\n       <table class=\"column-2\">\n         <thead>\n           <tr><th scope=\"col\">\n             Pass\n           </th>\n           <th scope=\"col\">\n             Fail\n           </th>\n         </tr></thead>\n         <tbody>\n         <tr>\n           <td>\n           <a id=\"return-to-top-link\" data-fn=\"scrollAndFocusMain\" href=\"#\">Return to top</a>\n           </td>\n           <td>\n           <a href=\"#\" data-fn=\"scrollToTopOnly\">\n           Return to top</a>\n           </td>\n         </tr> \n         </tbody>\n       </table>\n     </div>\n\n3. **What's the difference between a link and a button**\n\n   ### If it goes somewhere, it's `<a>` link.\n\n   * When the user clicks a link, they are taken to a different location in the site.\n     * Either another page or even another area of the same page\n   * A link can look like a big shiny button but it must be coded as `<a>` link\n   * An interactive link should have a valid href value so it can receive keyboard focus.<br>For\n     example `<a href=\"/some-page\">...</a>`.\n\n   ### If it does something, it's a `<button>`\n\n   * Buttons cause an action to occur on the same page\n     * Submit a form (even when submission takes you to a new page)\n     * Open a menu\n     * Launch a modal\n     * Expand details\n   * A button can look like a link, but it must be coded as a `<button>`\n\n   ## Related WCAG\n\n   * 2.4.4 Link Purpose (In Context)\n   * 2.5.3 Label in Name\n   * 3.2.4 Consistent Identification\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   [WebAIM: Links and Hypertext](https://webaim.org/techniques/hypertext/)\n\n   [WebAIM: Buttons](https://webaim.org/techniques/forms/controls#button)"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Keyboard & Focus",
          "name": "keyboard-&-focus",
          "type": "file",
          "generalNotes": "Manual testing is not difficult or time consuming once a team understands keyboard interactions.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **Test with the keyboard only**\n\n   It is crucial to **test with only the keyboard first**, without the screen reader activated.\n\n   **Why keyboard testing is so important**\n\n   * Keyboard accessibility is **prerequisite** to screen reader accessibility.\n\n     * If it doesn't work with only the keyboard, it won't work with a screen reader.\n\n   * screen reader applications will sometimes cover missing functionality that the sighted keyboard user won't be able to use.\n\n   **Devices**\n\n   * Test with a mobile device and a bluetooth keyboard\n   * Test with a desktop device and a keyboard\n\n   **Browsers**\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for keyboard testing.\n\n   * Note: In Safari, you'll have to activate tab in Preferences » Advanced » Press Tab\n\n2. **How to test**\n\n   Keyboard testing consists of a few keyboard commands to interact with web experiences.\n\n   <table >\n     <caption class=\"text-left\">\n       Keyboard basics\n     </caption>\n     <thead>\n       <tr>\n         <th scope=\"col\">\n           Key\n         </th>\n         <th scope=\"col\">\n           Action\n         </th>\n       </tr>\n     </thead>\n     <tbody>\n       <tr>\n         <th scope=\"row\">\n           <span >Arrows</span>\n         </th>\n         <td>\n           Should scroll the screen or interact with form fields\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Tab</span>\n         </th>\n         <td>\n           Moves through the interface focusing on elements that are focusable. For example, buttons and links.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Shift + Tab</span>\n         </th>\n         <td>\n           Moves in reverse through the interface focusing on elements that are focusable.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Enter</span>\n         </th>\n         <td>\n           Activates links and buttons\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Spacebar</span>\n         </th>\n         <td>\n           Activates buttons and interacts with form elements\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Escape</span>\n         </th>\n         <td>\n           Should close or dismiss widgets like dialogs\n         </td>\n       </tr>  \n     </tbody>\n   </table>\n\n3. **What to test for**\n\n   * <div >\n       <h3>✓ Ensure all mouse functionality is present for keyboard</h3>\n       <p>Identify functionality within the experience that can be operated with a mouse or pointing device. Ensure this content can be accessed with they keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Ensure there is a highly visible visual indication of keyboard focus</h3>\n       <p>Keyboard users need to understand where they are in the interface at all times. The visual indication of keyboard focus (focus ring) should be highly visible and have a color contrast ratio of 3:1 against the background. Verify that overlap items (e.g. cookie banners, sticky footers, sticky headers, and non-modal dialogs) do not obscure the visual indicator. </p>\n     </div>\n   * <div >\n       <h3>✓ Ensure that there are no keyboard traps</h3>\n       <p>Ensure that while navigating the experience, you do not encounter situations where you are not able to move forward or backward with the keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Verify that the focus order is logical</h3>\n       <p>In an English-based experience, keyboard focus should move top-to-bottom and left-to-right in a logical order. Ensure focus is not jumping around the experience in a way that makes it hard to understand the content.</p>\n     </div>\n   * <div >\n       <h3>✓ On focus does not create a change of context</h3>\n       <p>Ensure that when an interactive element receives keyboard focus that a change of context is not initiated without warning of such behavoir. An example of change of context is a page load or web form submission.</p>\n     </div>\n   * <div >\n       <h3>✓ Test for skip links</h3>\n       <p>Where there are large chunks of repeated content, ensure that there are skip links present for keboard users. For example, on a site with a large site navigation system, the first focusable element in the page should be a link that allows users to jump to the main content of the site.</p>\n     </div>\n\n### Video Example\n\n<video controls>\n  <source src=\"media/video/how-to-test/how-to-keyboard.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n\n<hr>\n\n### Related WCAG\n\n* 1.4.11: Non-text Contrast\n* 2.1.1 Keyboard\n* 2.1.2 No Keyboard Trap\n* 2.4.3 Focus Order\n* 2.4.7 Focus Visible\n* 3.2.1 On Focus\n\n### Resources\n\n[WebAIM Keyboard Accessibility](https://webaim.org/techniques/keyboard/)"
        }
      ]
    }
  ]
}