{
  "web": [
    {
      "label": "Component",
      "name": "component",
      "children": [
        {
          "label": "Alert Notification",
          "name": "alert-notification",
          "type": "file",
          "generalNotes": "How to test an alert notification",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a alert notification\n\nGIVEN THAT I am on a page with a alert notification\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use use features that trigger the alert I SEE the alert (BUT focus DOES NOT transfer automatically when the alert appears)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use use features that trigger the alert\n     * I HEAR the alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n     * I HEAR it identifies itself as an alert\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I use features that trigger the alert\n     * I HEAR the alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n     * I HEAR it identifies itself as an alert\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/alert-notification>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a alert notification\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus does not automatically move to the alert, but can move to interactive elements within the alert (example: Dismiss button)\n   * Arrow: Browses to the alert like any other content\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus does not move to the alert when it appears, but it can be browsed by the screenreader\n\n3. Listen to screenreader output on all devices\n\n   * Name: The alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n   * Role: It identifies itself as an alert\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/alert-notification>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Notes\n\nAn alert is dynamic content that is injected into the page when it changes and a person using a screenreader needs to know that some state of the page or application has changed.\n\n* Use alerts sparingly.\n* If an alert is present on page load, it won't be read automatically.\n  * If an element is present on page load, it is not technically an alert.\n* The alert will be read by the screen reader when it becomes visible and or appears new in the DOM.\n\n### Browser + screenreader quirks\n\n* Screenreaders do not implement alerts uniformly and must be tested.\n  * Just because an alert pattern works in one screenreader doesn't mean it will work in all three screenreaders (JAWS, NVDA, and MacOS VoiceOver).\n* The element referenced by the `aria-describedby` attribute cannot use the `role=\"alert\"` attribute (see example below for workaround).\n  * [VoiceOver fails to read a referenced `role=\"alert\"` element when the input is in focus (AccessibilitySupport)](https://a11ysupport.io/tests/tech__aria__aria-describedby-with-role-alert).\n* NVDA will read the alert twice if it appears while the input is in focus: once from the `role=\"alert\"` being injected and a second time from the `aria-describedby` association.\n* NVDA needs a fraction of a second to catch up with changes in the DOM; we suggest using a `setTimeout` to delay displaying the alert.\n\n### Name\n\n* Inner text describes alert when it appears on screen.\n\n### Role\n\n* Use `role=\"alert\"` for elements injected into the page.\n\n### Focus\n\n* Focus does not move to the element when the alert appears.\n\n## Code examples\n\n### Basic notification\n\n<!-- TODO: Needs JS to update error message stylings -->\n\n```html\n<div role=\"alert\" \r\n     id=\"alert-notification\" \r\n     class=\"alert notification inert\">\r\n    <!--- Use JS to inject the alert here -->\r\n</div>\r\n\r\n<button id=\"show-alert-notification\">\r\n  Save my settings\r\n</button>\n```\n\n<example>\r\n<div id=\"alertSuccessExample\"\r\n     role=\"alert\" \r\n     id=\"alert-notification\" \r\n     class=\"alert notification inert\">\r\n    <!--- Use JS to inject the alert here -->\r\n</div>\n\n<button data-fn=\"alertSuccess\" id=\"show-alert-notification\">\r\n  Save my settings\r\n</button>\r\n</example>\n\n### Error alert from an input field\n\n<!-- TODO: Needs to update warning stylings -->\n\n```html\n<label for=\"favorite-sesame-street-character\">\r\n  What is your favorite Sesame Street character?\r\n  <span>Required</span>\r\n</label>\r\n\r\n<input type=\"text\"\r\n       id=\"favorite-sesame-street-character\"\r\n       aria-describedby=\"favorite-character-error-example favorite-character-hint\"\r\n       required>\r\n\r\n<div role=\"alert\" \r\n     id=\"favorite-character-alert\" \r\n     class=\"alert inert\">\r\n  <!--- Do not reference this alert element\r\n        directly with aria-describedby -->\r\n  <div id=\"favorite-character-error-example\">\r\n    <!--- Use JS to inject the alert here -->\r\n  </div>     \r\n</div>\r\n\r\n<div class=\"hint\" id=\"favorite-character-hint\">\r\n  Example: Elmo, Big Bird, Cookie Monster\r\n</div>\r\n\r\n<button id=\"show-error\">\r\n  Toggle error\r\n</button>\n```\n\n<example>\r\n<label for=\"favorite-sesame-street-character\">\r\n  What is your favorite Sesame Street character?\r\n  <span>Required</span>\r\n</label>\n\n<input type=\"text\"\r\n    id=\"favorite-sesame-street-character\"\r\n    aria-describedby=\"favorite-character-error favorite-character-hint\"\r\n    required>\n\n<div role=\"alert\" \r\n     id=\"favorite-character-alert\" \r\n     class=\"alert inert\">\r\n  <!--- Do not reference this alert element\r\n        directly with aria-describedby -->\r\n  <div id=\"favorite-character-error\">\r\n    <!--- Use JS to inject the alert here -->\r\n  </div>     \r\n</div>\n\n<div class=\"hint\" id=\"favorite-character-hint\">\r\n  Example: Elmo, Big Bird, Cookie Monster\r\n</div>\n\n<button data-fn=\"alertWarning\" id=\"show-error\">\r\n  Toggle error\r\n</button>\r\n</example>\n\n## Further reading\n\n[WCAG 4.1.3 Status Messages (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html)"
        },
        {
          "label": "Animation",
          "name": "animation",
          "type": "file",
          "generalNotes": "How to test an animation",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an animation\n\nGIVEN THAT I am on a page with an animation\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use tab key to move focus to the pause/play/hide controls I SEE the control is strongly visibly focused\n   * THEN when I use the spacebar or enter key to activate the control I SEE the intended action occurs\n   * THEN when I use the device's reduced motion settings I SEE the animation is disabled or reduced\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use tab key to move focus to the pause/play/hide controls\n     * I HEAR the control's purpose (pause/play/hide) is clear\n     * I HEAR it identifies its role of button\n     * I HEAR the control expresses its state if applicable (pressed, expanded)\n   * THEN when I use the spacebar or enter key to activate the control I HEAR the intended action occurs\n   * THEN when I use the device's reduced motion settings I HEAR the animation is disabled or reduced\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to move focus to the pause/play/hide controls\n     * I HEAR the control's purpose (pause/play/hide) is clear\n     * I HEAR it identifies its role of button\n     * I HEAR the control expresses its state if applicable (pressed, expanded)\n   * THEN when I doubletap to activate control I HEAR the intended action occurs\n   * THEN when an animation is focused I HEAR an alternative method of consumption or interaction is available\n\n4. Device OS Settings\n\n   * WHEN I use reduced motion THEN I see large motion, animations or effects are reduced or eliminated\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/animation>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an animation\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Where applicable, focus moves directly to pause/play/hide controls\n   * Spacebar: Activates the control\n   * Enter: Activates the control\n   * Reduced motion settings: Animation is disabled or reduced\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the control\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: The control's purpose (pause/play/hide) is clear\n   * Role: It identifies its role of button\n   * State: The control expresses its state if applicable (pressed, expanded)\n\n4. Device OS Settings\n   * Reduced motion: Large motion, animations or effects are reduced or eliminated\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/animation>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Animations (like animated gifs or animated SVG) can be accessible if:\n\n* it automatically stops after 5 seconds or\n* if users are presented with an intuitive way to pause it\n* it has `alt` text or an alternative method of consumption is available\n\n## Code examples\n\n### Allow animations to be disabled with CSS\n\nPeople with vestibular disorders can be made ill by sweeping animations on screen.\n\nIt is important to change or disable animations when device reduce motion settings are activated.\n\nThis can be accomplished via CSS media query.\n\n<!-- TODO: the colors displaying CSS code snippet needs updated styles to pass color contrast\r\n\r\n```CSS\r\n@keyframes bounce {\r\n  0% { transform: scale(1); }\r\n  25% { transform: scale(.9); }\r\n  50% { transform: scale(1); }\r\n  75% { transform: scale(1.1); }\r\n  100% { transform: scale(1); }\r\n}\r\n\r\n@keyframes dissolve {\r\n  0% { background-color: green; }\r\n  50% { background-color: darkgreen; }\r\n  100% { background-color: green; }\r\n}\r\n\r\n.animation {\r\n  background-color: green;\r\n  animation: bounce 2s linear infinite both;\r\n}\r\n\r\n@media (prefers-reduced-motion) {\r\n  .animation {\r\n    animation-name: dissolve;\r\n  }\r\n}\r\n``` \r\n\r\n```html\r\n<div class=\"animation\">Animated element</div>\r\n```\r\n\r\nTODO: the below bouncy box should do what our example demo suggests\r\n\r\n### Bouncy box\r\nIf your device is set to reduce motion, the animation will softly fade from one color to the next instead of bounce; otherwise it will bounce.\r\n\r\n<example>\r\n<div class=\"animation\">Animated element</div>\r\n</example> -->\n\n<!-- TODO: Javascript for code snippet needs supporting\r\n\r\n ### Detecting with JavaScript\r\n```____\r\nconst pref = \r\n  window.matchMedia(\r\n    '(prefers-reduced-motion: reduce)'\r\n  );``` -->\n\n## Further Reading\n\n* [WCAG 2.2.1 Timing Adjustable (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable)\n* [WCAG 2.2.2 Pause, Stop, Hide (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html)\n* [WCAG 2.3.1 Three Flashes or Below Threshold (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/three-flashes-or-below-threshold)\n* [WCAG 2.3.3 Animation from Interactions (Level AAA)](https://www.w3.org/WAI/WCAG22/Understanding/animation-from-interactions.html)"
        },
        {
          "label": "Breadcrumbs",
          "name": "breadcrumbs",
          "type": "file",
          "generalNotes": "How to test breadcrumbs",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test breadcrumbs\n\nGIVEN THAT I am on a page with breadcrumbs\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a link\n   * I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link\n   * I SEE my browser goes somewhere\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a link\n     * I HEAR The link names correspond to their destination page titles\n     * I HEAR Links identify as a links in a breadcrumb navigation landmark\n     * I HEAR The current page link is indicated when focused\n     * I HEAR Is discoverable with screenreader shortcuts as a navigation landmark\n   * THEN when I use the enter key to activate the link\n   * I HEAR my browser goes somewhere\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a link\n     * I HEAR The link names correspond to their destination page titles\n     * I HEAR Links identify as a links in a breadcrumb navigation landmark\n     * I HEAR The current page link is indicated when focused\n     * I HEAR Is discoverable with screenreader shortcuts as a navigation landmark\n   * THEN when I doubletap with the link in focus\n   * I HEAR my browser goes somewhere\n\nFull information: <https://www.magentaa11y.com/checklist-web/breadcrumbs/>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Keyboard & screen reader actions\n   * Tab: Focus visibly moves to the link\n   * Enter: Activates the link\n\n2. Mobile screenreader gestures\n   * Swipe: Focus moves to the link\n   * Doubletap: Activates the link\n\n3. Screenreader output for all devices\n   * Name: The link names correspond to their destination page titles\n   * Role: Links identify as a links in a breadcrumb navigation landmark\n   * State: The current page link is indicated when focused\n   * Group: Is discoverable with screenreader shortcuts as a navigation landmark\n\nFull information: <https://www.magentaa11y.com/checklist-web/breadcrumbs/>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n<nav class=\"breadcrumbs\" aria-label=\"Breadcrumb\">\r\n  <ol>\r\n    <li>\r\n      <a href=\"/\">\r\n        Home\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/web/\">\r\n        Web\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/checklist-web/breadcrumbs/\" \r\n         aria-current=\"page\">\r\n        Breadcrumbs\r\n      </a>\r\n    </li>\r\n  </ol>\r\n</nav>\n\n```html\n<nav class=\"breadcrumbs\" aria-label=\"Breadcrumb\">\r\n  <ol>\r\n    <li>\r\n      <a href=\"/\">Home</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/web/\">Web</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/checklist-web/breadcrumbs/\" aria-current=\"page\">Breadcrumbs</a>\r\n    </li>\r\n  </ol>\r\n</nav>\n```\n\n## Developer notes\n\n* Breadcrumb link names must correspond to their destination page titles.\n  * In the example here, the “Web” link uses an `aria-label` that corresponds to the full title of the destination page.\n* Use a `<nav>` with a unique name like `aria-label=\"breadcrumbs\"`.\n* Placing the links inside `<ol>` and `<li>` provides context to users about a given breadcrumb’s position in a list and the total number of breadcrumbs.\n* Add `aria-current=\"page\"` to the last link in the breadcrumb. This represents the current item within a container or set of related elements.\n* <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/examples/breadcrumb/\">ARIA Authoring Practices Guide (APG) Breadcrumb Example</a>"
        },
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nGIVEN THAT I am on a page with a button\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a button I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the button I SEE the intended action occurs\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I use the spacebar and/or enter key to activate the button I HEAR the intended action occurs\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I doubletap with the button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the button.\n   * Spacebar: Activates the button.\n   * Enter: Activates the button.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n   * Name: Its purpose is clear\n   * Role: It identifies its role of button\n   * Group: It indicates if it has popup for listbox or menus\n   * State: It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/web/button/buttonTalkback.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### iOS VoiceOver\n\n<video controls>\r\n  <source src=\"media/video/web/button/buttonVoiceover.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/button/buttonNVDA.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/button/buttonJaws.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Buttons vs links\n\n### If it goes somewhere, it’s `<a>` link.\n\n* When the user clicks a link, they are taken to a different location in the site.\n  * Either another page or even another area of the same page\n* A link can look like a big shiny button but it must be coded as `<a>` link\n\n### If it does something, it’s a `<button>`\n\n* Buttons cause an action to occur on the same page\n  * Submit a form (even when submission takes you to a new page)\n  * Open a menu\n  * Launch a modal\n  * Expand details\n* A button can look like a link, but it must be coded as a `<button>`\n\n## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* It uses <u>CSS pseudo attributes</u> to create the arrow indicator, no Javascript.\n\n```html\n<button>\r\n  Continue\r\n</button>\n```\n\n<example>\r\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\">\r\n   Continue\r\n   </button>\r\n</example>\n\n## Focusable disabled button\n\nThe preferred method is to use `aria-disabled=\"true\"` so screen reader users can find the button, click submit and be notified of errors in the form.\n\n```html\n<button aria-disabled=\"true\">\r\n  Continue\r\n</button>\n```\n\n<example>\r\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">\r\n   Continue\r\n   </button>\r\n</example>\n\n## Fully disabled button\n\nA button that uses the disabled attribute will not be focusable, but it is still discoverable by the screen reader while browsing.\n\n```html\n<button disabled>\r\n  Continue\r\n</button>\n```\n\n<example>\r\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" disabled>\r\n   Continue\r\n   </button>\r\n</example>\n\n## When you can’t use semantic HTML\n\nThis custom button requires extra attributes and JS event listeners. Adding `tabindex=\"0\"` makes it focusable.\n\n```html\n<div role=\"button\" tabindex=\"0\" >\r\n  Continue\r\n</div>\n```\n\n## When there’s no inner text that text makes sense\n\n* As a last resort, `aria-label` can be used.\n* `aria-label` will (typically) replace the inner text of the button for the screen reader output.\n* DO NOT repeat the inner text in the `aria-label` as some screenreaders will read both.\n\n```html\n<div role=\"button\" tabindex=\"0\" aria-label=\"Continue\">\r\n  <!-- icon but no text -->\r\n</div>\r\n\r\n<div role=\"button\" tabindex=\"0\" aria-label=\"Buy now, iPhone 17\">\r\n  Buy now <!-- Ambiguous text doesn't describe the intent -->\r\n</div>\n```\n\n## When there are repeating buttons\n\nSometimes the design will call for multiple buttons with the same text label. In a case like this, `aria-label` can be used to name each control’s purpose.\n\n```html\n<button aria-label=\"Edit payment date\">\r\n  Edit\r\n</div>\r\n<button aria-label=\"Edit payment amount\">\r\n  Edit\r\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Inner text should describe the purpose of the button.\n* `aria-label=\"Button purpose\"` can also be used (as a last resort)\n\n### Role\n\n* Native button identifies as button by default\n* Use `role=\"button\"` for custom elements\n\n### Group\n\n* Use `aria-haspopup=\"true\"` for menu, listbox or modal\n* `aria-controls=\"popupId\"` is not well supported\n\n### State\n\n* Toggle buttons `aria-pressed=\"true/false\"`\n* Menus or expanders use `aria-expanded=\"true/false\"`\n* Use the `disabled` state for completely inactive buttons that shouldn’t be focusable\n* Use `aria-disabled=\"true/false\"` state for inactive custom elements\n\n### Focus\n\n* Focus must be visible\n* Custom elements (like `<div>`) need `tabindex=\"0\"` to be focusable"
        },
        {
          "label": "Carousel Slideshow",
          "name": "carousel-slideshow",
          "type": "file",
          "generalNotes": "How to test a carousel/slideshow",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/carousel-slideshow>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/carousel-slideshow>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Complex Graphics",
          "name": "complex-graphics",
          "type": "file",
          "generalNotes": "How to test a figure, map, chart, and other complex graphics",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/complex-graphics>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/complex-graphics>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Decorative Image",
          "name": "decorative-image",
          "type": "file",
          "generalNotes": "How to test a decorative image",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a decorative image\n\nGIVEN THAT I am on a page with a decorative image\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to an image I SEE the image is skipped and ignored\n\n2. Desktop screenreader\n\n   * I use the arrow keys to browse to an image\n     * I HEAR The image is ignored\n\n3. Mobile screenreader\n\n   * I swipe to browse to an image\n     * I HEAR The image is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/decorative-image>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a decorative image\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Arrow-keys: Screenreader ignores the image completely\n\n2. Test mobile screenreader gestures\n   * Swipe: The screenreader ignores the image completely\n\n3. Listen to screenreader output on all devices\n   * Role: The image is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/decorative-image>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Decorative images\n\nThere are times that images shouldn't be read because it would be repetitive or not add any value in addition to the existing page content. These types of images are generally included for purely stylistic purposes and don't impart any meaning to the rest of the content on the page.\n\n## Is this image decorative or informative?\n\nIf the image conveys important meaning, and there's no other text on the page which explains the concept within it, then the image is likely informative. In this case, check out the [informative image checklist](/checklist-web/image) item instead.\n\n## Decorative images still require an alt attribute\n\n* To have valid HTML, the `alt` attribute must still be present, even when set to the empty empty value of `alt`. Note that `alt` and `alt=\"\"` (no space) are equivalent in HTML.\n  * When the `alt` attribute is empty, the screen reader ignores it (and will not read anything).\n  * When the `alt` attribute is missing, the screen reader will read the `src` name or filename of the image which is a very poor user experience.\n\n<example class=\"example example--contains-icon\">\r\n  <h3 class=\"h-charlie decorated\">\r\n    <img src=\"media/images/icons/icon-info.svg\" alt=\"\"> \r\n    Note: Your plan might be changing soon.\r\n  </h3>\r\n  <a href=\"tel:8888888888\" className=\"decorated\">\r\n    <img src=\"media/images/icons/icon-phone.svg\" class=\"icon\" alt=\"\">\r\n      Call us: 888-888-8888\r\n  </a>\r\n</example>\n\n```html\n<h3 class=\"h-charlie decorated\">\r\n  <img\r\n    src=\"media/images/icons/icon-info.svg\"\r\n    class=\"icon\"\r\n    alt=\"\" />\r\n  Note: Your plan might be changing soon.\r\n</h3>\r\n<a \r\n  href=\"tel:8888888888\"\r\n  class=\"decorated\">\r\n  <img \r\n    src=\"media/images/icons/icon-phone.svg\"\r\n    class=\"icon\"\r\n    alt=\"\" />\r\n    Call us: 888-888-8888\r\n</a>\n```\n\n## Using inline SVG\n\n### Inline SVG that is decorative\n\nInline SVGs require some special code to be hidden properly from screen readers:\n\n* `aria-hidden=\"true\"`\n\nIf you are using a `<use />` element, add `aria-hidden=\"true\"`.\n\n```html\n<svg aria-hidden=\"true\" focusable=\"false\">\r\n  <use href=\"#svg-id\" aria-hidden=\"true\" />\r\n  <!-- if not using <use> then the child elements \r\n       of the inline SVG would go here -->\r\n</svg>\n```\n\n## Further reading\n\n* This page owes a lot to this exhaustive blog post: [Contextually Marking up accessible images and SVGs by Scott O'Hara](https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html)\n* [W3C Image decision tree](https://www.w3.org/WAI/tutorials/images/decision-tree/)"
        },
        {
          "label": "Expander Accordion",
          "name": "expander-accordion",
          "type": "file",
          "generalNotes": "How to test an expander accordion",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an expander accordion\n\nGIVEN THAT I am on a page with an expander accordion\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to an expander I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the expander I SEE the hidden content is revealed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to an expander\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role of a button or details\n     * I HEAR it expresses its state (expanded/collapsed)\n   * THEN when I use the spacebar and/or enter key to activate the expander I HEAR the hidden content is revealed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a button\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role of a button or details\n     * I HEAR it expresses its state (expanded/collapsed)\n   * THEN when I doubletap with the button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/expander-accordion>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an expander accordion\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the expander\n   * Spacebar: Toggles the expander\n   * Enter: Toggles the expander\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state (expanded/collapsed)\n   * Doubletap: Toggles the expander\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies its role of a button or details\n   * State: It expresses its state (expanded/collapsed)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/expander-accordion>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Custom expander accordion (ARIA Disclosure Widget)\n\nThis custom expander uses a semantic button with `aria-expanded` with additional scripting to toggle content and states.\n\n```html\n<div class=\"expander-group\">\r\n  <button class=\"expander-toggle\" aria-expanded=\"false\">\r\n    About Sesame Street\r\n  </button>\r\n  <div class=\"expander-content\">\r\n    Sesame Street is an American educational \r\n    children's television series that combines \r\n    live-action, sketch comedy, animation, and puppetry.\r\n  </div>\r\n</div>\n```\n\n<!-- TODO: This example needs more styles support\r\n\r\n<example>\r\n<div class=\"expander-group\">\r\n  <button class=\"expander-toggle\" aria-expanded=\"false\">\r\n    About Sesame Street\r\n  </button>\r\n  <div class=\"expander-content\">\r\n    Sesame Street is an American educational \r\n    children's television series that combines \r\n    live-action, sketch comedy, animation, and puppetry.\r\n  </div>\r\n</div>\r\n</example> -->\n\n## Native HTML expander accordion (details/summary)\n\n* This semantic HTML contains all accessibility features by default with no scripting required.\n* It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_details-summary.scss) to create the expanded/collapsed indicator, no Javascript.\n\n**Note:** Due to known accessibility support issues in recent versions of iOS, `<details>` is not recommended for expander accordions. We recommend the use of an ARIA Disclosure Widget which has very robust support.\n\n```html\n<details>\r\n  <summary>\r\n    About Sesame Street\r\n  </summary>\r\n    Sesame Street is an American educational \r\n    children's television series that combines \r\n    live-action, sketch comedy, animation, and puppetry.\r\n</details>\n```\n\n<example>\r\n<details>\r\n  <summary>\r\n    About Sesame Street\r\n  </summary>\r\n    Sesame Street is an American educational \r\n    children's television series that combines \r\n    live-action, sketch comedy, animation, and puppetry.\r\n</details>\r\n</example>\n\n## Developer notes\n\n### Name\n\n* Inner text must describe the purpose.\n\n### Role\n\n* Native button identifies as button by default.\n* If using custom elements, use `role=\"button\"` and `tabindex=\"0\"`.\n\n### Group\n\n* You *can* use `aria-controls=\"popupId\"`, but it is not well supported.\n\n### State\n\n* Expander accordions use `aria-expanded` which toggles between \"true\" and \"false\" when the content is expanded or collapsed.\n\n### Focus\n\n* Focus must be visible.\n\n## Design notes\n\n* [Nielsen Norman Group study](https://www.nngroup.com/articles/accordion-icons/): The caret icon most clearly indicated to users that it would open an accordion in place, rather than linking directly to a new page.\n* Not all users will notice there is hidden content or understand how these work. For this reason, you should only use them in specific situations and if user research supports it.\n* [ARIA Disclosure Widget](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/)\n\n## Further Reading\n\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Footnote",
          "name": "footnote",
          "type": "file",
          "generalNotes": "How to test a footnote",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footnote\n\nGIVEN THAT I am on a page with a footnote\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a footnote link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my focus moves directly to the targeted footnote\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a footnote link\n     * I HEAR it describes its purpose\n     * I HEAR it identifies itself as a link\n   * THEN when I use the enter key to activate the link I HEAR my focus moves directly to the targeted footnote\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a footnote link\n     * I HEAR it describes its purpose\n     * I HEAR it identifies itself as a link\n   * THEN when I doubletap with the link in focus I HEAR my focus moves directly to the targeted footnote\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/footnote>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footnote\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to the footnote link\n   * Enter: Activates the link, focus/tabindex moves directly to the targeted element\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the footnote link\n   * Doubletap: Activates the link, focus/tabindex moves directly to the targeted footnote\n\n3. Listen to screenreader output on all devices\n\n   * Name: It describes its purpose\n   * Role: It identifies itself as a link\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/footnote>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Code examples\n\n```html\n<p>\r\n   People read footnotes and find them helpful.\r\n   <a class=\"footnote-link\" id=\"ref-alpha-link\" href=\"#ref-alpha\">\r\n      <sup>\r\n         1\r\n         <span class=\"hidden\">Footnote details</span>\r\n      </sup>\r\n   </a>\r\n </p>\r\n<div class=\"vertical-spacer\">\r\n</div>\r\n<p class=\"footnote\" id=\"ref-alpha\" tabindex=\"-1\">\r\n   1. This is where your footnotes will go.\r\n   <a href=\"#ref-alpha-link\">Back to content</a>\r\n</p>\n```\n\n<!-- TODO: class=\"vertical-spacer\" isn't showcasing the vast difference between the footnote link and the footnote note; also the href intentions aren't set up correctly - will need fixing -->\n\n<example>\r\n<p>\r\n   People read footnotes and find them helpful.\r\n   <a class=\"footnote-link\" id=\"ref-alpha-link\" href=\"#ref-alpha\">\r\n      <sup>\r\n         1\r\n         <span class=\"hidden\">Footnote details</span>\r\n      </sup>\r\n   </a>\r\n </p>\r\n<div class=\"vertical-spacer\">\r\n</div>\r\n<p class=\"footnote\" id=\"ref-alpha\" tabindex=\"-1\">\r\n   1. This is where your footnotes will go.\r\n   <a href=\"#ref-alpha-link\">Back to content</a>\r\n</p>\r\n</example>\n\n### Alternate approach\n\n* [Foonotes using a dedicated footnotes section (SitePoint)](https://www.sitepoint.com/accessible-footnotes-css/)"
        },
        {
          "label": "Heading",
          "name": "heading",
          "type": "file",
          "generalNotes": "How to test a heading: h1, h2, h3, h4, h5, h6",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a heading\n\nGIVEN THAT I am on a page with a heading\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a heading I SEE the heading comes into view\n   * WHEN I use the tab key I SEE nothing happens to the heading because headings must NOT be focusable\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a heading\n     * I HEAR the heading's purpose and level must be clear\n     * I HEAR it identifies itself as a heading and its level\n     * I HEAR it is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n   * WHEN when I use the tab key I HEAR nothing happens to the heading because headings must NOT be focusable\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse to a heading\n     * I HEAR the heading's purpose and level must be clear\n     * I HEAR it identifies itself as a heading and its level\n     * I HEAR it is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/heading>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a heading\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Nothing, headings must not be focusable\n   * Arrow-keys: Browses headings (when using screen reader)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the heading and its level\n\n3. Listen to screenreader output on all devices\n\n   * Name: The heading's purpose and level must be clear\n   * Role: It identifies itself as a heading and its level\n   * Group: It is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/heading>",
          "criteria": null,
          "videos": "### Windows NVDA Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/heading/headingNVDA.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/heading/headingJAWS.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\r\n  <source src=\"media/video/web/heading/headingMacOS.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/web/heading/headingAndroid.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### iOS VoiceOver\n\n<video controls>\r\n  <source src=\"media/video/web/heading/headingiOS.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Headings are not focusable with the tab key\n\n* When people use a screen reader, the arrow keys are used to browse non-focusable content\n* The tab key only focuses interactive elements (ex: buttons, links or inputs)\n\n## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<h1>My favorite taco recipe</h1>\r\n  <!-- Author's entire life story \r\n   as it relates to tacos -->\r\n\r\n  <h2>Ingredients</h2>\r\n  <!-- List of ingredients -->\r\n\r\n  <h2>Steps</h2>\r\n\r\n    <h3>Preparing the protein</h3>\r\n    <!-- List of instructions -->\r\n\r\n    <h3>Preparing the vegetables</h3>\r\n    <!-- List of instructions -->\r\n    \r\n    <h3>Assembly and plating</h3>\r\n    <!-- List of instructions -->\r\n  \r\n  <h2>Nutrition information</h2>\r\n  <!-- List of nutrition info -->\r\n  \r\n  <h2>Related receipes</h2>\r\n  <!-- List of related recipes -->\n```\n\n### Complex headings\n\n* When multiple styles exist inside a heading use spans and css to achieve the desired result.\n* Do not use multiple headings.\n\n```html\n<h1>\r\n  <span class=\"brand\">Apple</span> \r\n  <span class=\"model\">iPhone XVI</span> \r\n</h1>\n```\n\n### When you can't use semantic HTML\n\nThis custom heading requires extra attributes.\n\n```html\n<div role=\"heading\" aria-level=\"1\">\r\n  About our company\r\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Inner text describes the heading\n\n### Role\n\n* Semantic headings `<h1>` `<h2>` `<h3>` identify themselves as headings and express the level\n* Use `role=\"heading\" aria-level=\"1\"` to for custom elements\n\n### Group\n\n* Headings must be logically ordered.\n* Start with a single `<h1>` per page.\n  * Title major sections with `<h2>`\n    * Subsections with `<h3>`\n      * It should be rare that `<h4>` and beyond is required.\n      * Repeating patterns of headings are allowed so long as they follow a logical sequence  (example: `<h2>`,`<h3>`,`<h2>`,`<h3>`)\n      * Avoid increasing heading levels by more than one level at a time (e.g., do not skip from `<h2>` to `<h4>`)\n\n### Focus\n\n* Headings must not receive focus\n* Arrow keys will browse headings (not the tab key)\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 2.4.6 Headings and Labels (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels)"
        },
        {
          "label": "Iframe",
          "name": "iframe",
          "type": "file",
          "generalNotes": "How to test an iframe",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an iframe\n\nGIVEN THAT I am on a page with an iframe\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys or tab key I SEE the content of the iframe is browsed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the arrow keys or tab key\n     * I HEAR the title of the iframe is read if the iframe contains content\n     * I HEAR if the iframe does not contain content, the iframe is ignored\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to content in the iframe\n     * I HEAR the title of the iframe is read if the iframe contains content\n     * I HEAR if the iframe does not contain content, the iframe is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/iframe>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an iframe\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow keys: Content within the iframe is browsed\n   * Tab: Interactive content in the iframe comes into view\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content within the iframe is browsed\n\n3. Listen to screenreader output on all devices\n\n   * Name: The title of the iframe is read if the iframe contains content\n   * Group: If the iframe does not contain content, the iframe is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/iframe>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### When an iframe contains content\n\n```html\n<iframe title=\"Coffee maker demonstration\" \n        src=\"coffee-maker-demo.html\">\n</iframe>\n```\n\n### When an iframe does not contain content\n\n```html\n<iframe title=\"Hidden intentionally\"\n        aria-hidden=\"true\" \n        src=\"script-injection.net\">\n</iframe>\n```"
        },
        {
          "label": "Informative Image",
          "name": "informative-image",
          "type": "file",
          "generalNotes": "How to test an informative image",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an informative image\n\nGIVEN THAT I am on a page with an informative image\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to an image I SEE the image comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the arrow keys to browse to an image\n     * I HEAR the content of the image alt text is clear\n     * I HEAR it identifies its role as an image or graphic\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to browse to an image\n     * I HEAR the content of the image alt text is clear\n     * I HEAR it identifies its role as an image or graphic\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/informative-image>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an informative image\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: Screen reader reads the alt text\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the alt text\n\n3. Listen to screenreader output on all devices\n\n   * Name: The content of the image alt text is clear\n   * Role: It identifies its role as an image or graphic\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/informative-image>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Android-Talkback.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/informative-image/iOS-VoiceOver.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Windows-JAWS-Chrome.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Windows-NVDA-Chrome.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/informative-image/MacOS-VoiceOver-Safari.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Is this image decorative or informative?\n\nIf the image conveys important meaning, and there's no other text on the page which explains the concept within it, then the image is likely informative. If the image is included for purely stylistic purposes and doesn't impart any meaning to the rest of the content on the page, then the image is likely decorative. In this case, check out the [decorative image checklist](/web-criteria/component/decorative-image) item instead.\n\nIf your image contains text inside it, it should not! This is a violation of [WCAG AA 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG21/Understanding/images-of-text.html). Exceptions exist for logos.\n\n## Describe the content of the image\n\nIf you were describing the image to someone via phone conversation and they couldn't see what you were looking at, what would you say?\n\n```html\n<img src=\"/farm.jpg\" \n     alt=\"Rustic barn surrounded by rolling hills\" />\n```\n\n## Using inline SVG\n\n### Inline SVG that conveys meaning\n\nInline SVGs require some special code to be read consistently in all screenreaders:\n\n* Name: either `aria-label` or `<title />`\n* Role: `role=\"img\"`\n\nIf you are using a `<use />` element, add `aria-hidden=\"true\"` to it.\n\n#### Using title\n\n```html\n<svg role=\"img\" focusable=\"false\">\n  <title>Accessible Name</title>\n  <use xlink:href=\"#svg-id\" aria-hidden=\"true\" />\n  <!-- if not using <use> then the child elements of the inline SVG would go here -->\n</svg>\n```\n\n#### Using aria-label\n\n```html\n<svg role=\"img\" aria-label=\"Accessible name\" focusable=\"false\">\n  <use href=\"#svg-id\" aria-hidden=\"true\" />\n  <!-- if not using <use> then the child elements of the inline SVG would go here -->\n</svg>\n```\n\n## Animated gifs\n\n### Animations (like gifs) can be accessible if:\n\n* they are set to stop after 5 seconds or\n* if users are presented with a way to pause it\n\n## Further reading\n\n* This page owes a lot to this exhaustive blog post: [Contextually Marking up accessible images and SVGs by Scott O'Hara](https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html)\n* [W3C Image decision tree](https://www.w3.org/WAI/tutorials/images/decision-tree/)\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content)\n* [WCAG SC 1.4.5 Images of Text (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text)\n* [WCAG SC 2.2.2 Pause, Stop, Hide (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html)"
        },
        {
          "label": "Link",
          "name": "link",
          "type": "file",
          "generalNotes": "How to test a link",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a link\n\nGIVEN THAT I am on a page with a link\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my browser goes somewhere\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a link\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a link\n   * THEN when I use the enter key to activate the link I HEAR my browser goes somewhere\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a link\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a link\n   * THEN when I doubletap with the link in focus I HEAR my browser goes somewhere\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/link>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the link\n   * Enter: Activates the link\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the link\n   * Doubletap: Activates the link\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a link\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/link>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Links vs buttons\n\n### If it goes somewhere, it's `<a>` link\n\n* When the user clicks a link, they are taken to a different location in the site\n  * Either another page or even another area of the same page\n* A link can look like a big shiny button but it must be coded as `<a>` link\n\n### If it does something, it's a `<button>`\n\n* Buttons cause an action to occur on the same page\n  * Submit a form (even when submission takes you to a new page)\n  * Open a menu\n  * Launch a modal\n  * Expand details\n* A button can look like a link, but it must be coded as a `<button>`\n\n## Code examples\n\n### Use semantic HTML with common sense names\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"/about/\">\r\n  About\r\n</a>\n```\n\n<example>\r\n<a href=\"/about/\">\r\n  About\r\n</a>\r\n</example>\n\n### Name links logically\n\n* **Do not** use a heading with a generic link below.\n* Instead, make the heading a link or programmatically associate the link with the heading using <code>aria-describedby</code>.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<h3>About our coffee subscriptions</h3>\r\n<p>Get the best coffee delivered to your door</p>\r\n<a href=\"/about/\">\r\n   Learn more\n```\n\n#### Good examples\n\n```html\n<h3><a href=\"/about/\">About our coffee subscriptions</a></h3>\r\n<p>Get the best coffee delivered to your door</p>\n```\n\n```html\n<h3 id=\"unique-id\">About our coffee subscriptions</h3>\r\n<p>Get the best coffee delivered to your door</p>\r\n<a href=\"/about/\" aria-describedby=\"unique-id\">\r\n   Learn more\r\n</div>\n```\n\n### Making a link with no `href` focusable\n\n* **Do not** put anything but a URL in the `href`\n* A link with no `href` will not be focusable with the keyboard without `tabindex=\"0\"`.\n* Add `role=\"link\"` to ensure screen reader reads the role\n\n```html\n<a tabindex=\"0\" role=\"link\">\r\n  About\r\n</a>\n```\n\n<example>\r\n<a tabindex=\"0\" role=\"link\">\r\n  About\r\n</a>\r\n</example>\n\n### Avoid custom elements\n\nThis custom button requires extra attributes and keyboard event listeners.\n\n```html\n<custom-element role=\"link\" tabindex=\"0\">\r\n  About\r\n</custom-element>\n```\n\n### Repeating text links\n\nSometimes the design will call for multiple links with the same text label. In a case like this, `aria-label` can be used to name each link's purpose.\n\n```html\n<button>Get free coffee</button>\r\n<a href=\"/free-coffee-tc/\" aria-label=\"Free coffee terms and conditions\">\r\n  Terms & Conditions\r\n</a>\r\n<button>Get free donuts</button>\r\n<a href=\"/free-donuts-tc/\" aria-label=\"Free donuts terms and conditions\">\r\n  Terms & Conditions\r\n</a>\n```\n\n### Don't duplicate the visible text name in the `aria-label`\n\n**Do not** repeat the inner text content of a link in the `aria-label`.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"/do-NOT-repeat-yourself/\" \r\n   aria-label=\"Do NOT repeat yourself\">\r\n   Do not repeat yourself\r\n</div>\n```\n\n### Don't use javascript in `href`\n\n* **Do not** use `\"href=\"javascript:void(0)\"`.\n* When screen readers read the `href`, it becomes confusing and nonsensical\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"javascript:void(0)\">\r\n   Do not use javascript in href\r\n</div>\n```\n\n### Don't use \"#\" in `href`\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"#\">\r\n   Do not use # to populate the `href`\r\n</div>\n```\n\n## Disabled links\n\n* If it's unavoidable to have a disabled link present you'll need these attributes for the screen reader:\n  * `tabindex=\"0\"`\n  * `role=\"link\"`\n  * `aria-disabled=\"true\"`\n\n```html\n<a tabindex=\"0\" role=\"link\" aria-disabled=\"true\">\r\n  Continue\r\n</a>\n```\n\n<!-- ### Complex examples\r\n\r\n<example>\r\n   <h2 class=\"h-bravo\">Product Card with multiple controls</h2>\r\n   <p>This example demonstrates an approach taken for when the card may have multiple controls within it.</p>\r\n   <div class=\"product-list multiple-controls\">\r\n   <div class=\"product-list-item\">\r\n      <div class=\"offer-container\">\r\n         <button type=\"button\" class=\"tertiary\" aria-label=\"Save $400 with offer for mPhone Universe Max Extra Phabulous\">\r\n         Save $400 with offer\r\n         </button>\r\n      </div>\r\n      <div class=\"link-container\">\r\n         <!-- The link DOES NOT wrap the entire description\r\n         <h3 class=\"product-heading\">\r\n         <a class=\"product-link\" href=\"/demos/\">\r\n            <span class=\"brand\">\r\n               mPhone\r\n            </span>\r\n            <span class=\"product-title\">\r\n               Universe Max Extra Phabulous\r\n            </span>\r\n         </a>\r\n         </h3>\r\n         <div class=\"product-image-container\">\r\n         <img class=\"product-image\" src=\"/assets/images/products/mobile-phone.png\" alt=\"mPhone Universe Max Extra Phabulous\"/>\r\n         </div>\r\n         <ul id=\"meta\" class=\"product-meta\">\r\n         <li class=\"rating\">4.8 Stars</li>\r\n         <li class=\"network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\r\n         </ul>\r\n         <div class=\"end-cap\">\r\n         <ul id=\"colors\" class=\"product-colors\">\r\n            <li class=\"red\"><span class=\"hidden-visually\">Sunset Red</span></li>\r\n            <li class=\"gold\"><span class=\"hidden-visually\">Golden Canyon</span></li>\r\n            <li class=\"blue\"><span class=\"hidden-visually\">Blue</span></li>\r\n            <li class=\"gray\"><span class=\"hidden-visually\">Graphite</span></li>\r\n         </ul>\r\n         <ul id=\"pricing\" class=\"product-pricing\">\r\n            <li class=\"monthly\">\r\n               <div><strong>Monthly</strong></div>\r\n               <strong>\r\n               $22.00<span class=\"hidden-visually\">,</span>\r\n               </strong>\r\n               <span class=\"hidden-visually\">\r\n               Original price:\r\n               </span>        \r\n               <s>$50.00</s>\r\n               <div>For 36 months</div>\r\n            </li>\r\n            <li class=\"today\">\r\n               <div><strong>Today</strong></div>\r\n               $0\r\n               <div>down + tax</div>\r\n            </li>\r\n            <li class=\"full-price\">\r\n               <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\r\n               <span class=\"hidden-visually\">\r\n               Original price:\r\n               </span>        \r\n               <s>$1,998</s>\r\n            </li>\r\n         </ul>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   </div>\r\n   <h2 class=\"h-bravo\">Product Card as a single link</h2>\r\n   <p>This card is a single link and does not consist of any other nested controls. Use of <code>aria-labelledby</code> and <code>aria-describedby</code> to control how the card is announced by screen readers.</p>\r\n   <div class=\"product-list big-links\">\r\n   <div class=\"product-list-item\">\r\n      <a href=\"/demos/\" \r\n         aria-labelledby=\"prod-0-eyebrow prod-0-name\" \r\n         aria-describedby=\"prod-0-meta-rating prod-0-meta-network prod-0-colors product-0-price-monthly product-0-price-today product-0-price-full\">\r\n         <div class=\"offer-container\">\r\n         <svg style=\"display: inline-block;\" role=\"img\" aria-label=\"Promo\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><path d=\"M0 80V229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7H48C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg> 15% off your next order\r\n         </div>\r\n         <div class=\"link-container\">\r\n         <h3 class=\"product-heading\">\r\n               <span class=\"brand\" id=\"prod-0-eyebrow\">\r\n               mPhone\r\n               </span>\r\n               <span class=\"product-title\" id=\"prod-0-name\">\r\n               Universe Max Extra Phabulous\r\n               </span>\r\n         </h3>\r\n         <div class=\"product-image-container\">\r\n            <img class=\"product-image\" src=\"/assets/images/products/mobile-phone.png\" alt=\"\"/>\r\n         </div>\r\n         <ul id=\"meta\" class=\"product-meta\">\r\n            <li class=\"rating\" id=\"prod-0-meta-rating\">4.8 Stars</li>\r\n            <li class=\"network\" id=\"prod-0-meta-network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\r\n         </ul>\r\n         <div class=\"end-cap\">\r\n            <span id=\"prod-0-colors\" class=\"hidden-visually\">Four colors available</span>\r\n            <!-- hide colors - use visually hidden text x colors avialable \r\n            <!-- reduces verbosity and all colors are available on PDP \r\n            <ul id=\"colors\" class=\"product-colors\" aria-hidden=\"true\">\r\n               <li class=\"red\"></li>\r\n               <li class=\"gold\"></li>\r\n               <li class=\"blue\"></li>\r\n               <li class=\"gray\"></li>\r\n            </ul>\r\n            <ul id=\"pricing\" class=\"product-pricing\">\r\n               <li class=\"monthly\" id=\"product-0-price-monthly\">\r\n               <div><strong>Monthly</strong></div>\r\n               <strong>\r\n                  $22.00<span class=\"hidden-visually\">,</span>\r\n               </strong>\r\n               <span class=\"hidden-visually\">\r\n                  Original price:\r\n               </span>        \r\n               <s>$50.00</s>\r\n               <div>For 36 months</div>\r\n               </li>\r\n               <li class=\"today\" id=\"product-0-price-today\">\r\n               <div><strong>Today</strong></div>\r\n               $0\r\n               <div>down + tax</div>\r\n               </li>\r\n               <li class=\"full-price\" id=\"product-0-price-full\">\r\n               <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\r\n               <span class=\"hidden-visually\">\r\n                  Original price:\r\n               </span>        \r\n               <s>$1,998</s>\r\n               </li>\r\n            </ul>\r\n         </div>\r\n         </div>\r\n      </a>\r\n   </div>\r\n   </div>\r\n</example>\r\n-->\n\n<!-- \r\n```html\r\n<h2 class=\"h-bravo\">Product Card with multiple controls</h2>\r\n<p>This example demonstrates an approach taken for when the card may have multiple controls within it.</p>\r\n<div class=\"product-list multiple-controls\">\r\n  <div class=\"product-list-item\">\r\n    <div class=\"offer-container\">\r\n      <button type=\"button\" class=\"tertiary\" aria-label=\"Save $400 with offer for mPhone Universe Max Extra Phabulous\">\r\n        Save $400 with offer\r\n      </button>\r\n    </div>\r\n    <div class=\"link-container\">\r\n   <!-- The link DOES NOT wrap the entire description\r\n      <h3 class=\"product-heading\">\r\n        <a class=\"product-link\" href=\"/demos/\">\r\n          <span class=\"brand\">\r\n            mPhone\r\n          </span>\r\n          <span class=\"product-title\">\r\n            Universe Max Extra Phabulous\r\n          </span>\r\n        </a>\r\n      </h3>\r\n      <div class=\"product-image-container\">\r\n        <img class=\"product-image\" src=\"/assets/images/products/mobile-phone.png\" alt=\"mPhone Universe Max Extra Phabulous\"/>\r\n      </div>\r\n      <ul id=\"meta\" class=\"product-meta\">\r\n        <li class=\"rating\">4.8 Stars</li>\r\n        <li class=\"network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\r\n      </ul>\r\n      <div class=\"end-cap\">\r\n        <ul id=\"colors\" class=\"product-colors\">\r\n          <li class=\"red\"><span class=\"hidden-visually\">Sunset Red</span></li>\r\n          <li class=\"gold\"><span class=\"hidden-visually\">Golden Canyon</span></li>\r\n          <li class=\"blue\"><span class=\"hidden-visually\">Blue</span></li>\r\n          <li class=\"gray\"><span class=\"hidden-visually\">Graphite</span></li>\r\n        </ul>\r\n        <ul id=\"pricing\" class=\"product-pricing\">\r\n          <li class=\"monthly\">\r\n            <div><strong>Monthly</strong></div>\r\n            <strong>\r\n              $22.00<span class=\"hidden-visually\">,</span>\r\n            </strong>\r\n            <span class=\"hidden-visually\">\r\n              Original price:\r\n            </span>        \r\n            <s>$50.00</s>\r\n            <div>For 36 months</div>\r\n          </li>\r\n          <li class=\"today\">\r\n            <div><strong>Today</strong></div>\r\n            $0\r\n            <div>down + tax</div>\r\n          </li>\r\n          <li class=\"full-price\">\r\n            <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\r\n            <span class=\"hidden-visually\">\r\n              Original price:\r\n            </span>        \r\n            <s>$1,998</s>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<h2 class=\"h-bravo\">Product Card as a single link</h2>\r\n<p>This card is a single link and does not consist of any other nested controls. Use of <code>aria-labelledby</code> and <code>aria-describedby</code> to control how the card is announced by screen readers.</p>\r\n<div class=\"product-list big-links\">\r\n  <div class=\"product-list-item\">\r\n    <a href=\"/demos/\" \r\n      aria-labelledby=\"prod-0-eyebrow prod-0-name\" \r\n      aria-describedby=\"prod-0-meta-rating prod-0-meta-network prod-0-colors product-0-price-monthly product-0-price-today product-0-price-full\">\r\n      <div class=\"offer-container\">\r\n        <svg style=\"display: inline-block;\" role=\"img\" aria-label=\"Promo\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><path d=\"M0 80V229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7H48C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg> 15% off your next order\r\n      </div>\r\n      <div class=\"link-container\">\r\n        <h3 class=\"product-heading\">\r\n            <span class=\"brand\" id=\"prod-0-eyebrow\">\r\n              mPhone\r\n            </span>\r\n            <span class=\"product-title\" id=\"prod-0-name\">\r\n              Universe Max Extra Phabulous\r\n            </span>\r\n        </h3>\r\n        <div class=\"product-image-container\">\r\n          <img class=\"product-image\" src=\"/assets/images/products/mobile-phone.png\" alt=\"\"/>\r\n        </div>\r\n        <ul id=\"meta\" class=\"product-meta\">\r\n          <li class=\"rating\" id=\"prod-0-meta-rating\">4.8 Stars</li>\r\n          <li class=\"network\" id=\"prod-0-meta-network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\r\n        </ul>\r\n        <div class=\"end-cap\">\r\n          <span id=\"prod-0-colors\" class=\"hidden-visually\">Four colors available</span>\r\n          <!-- hide colors - use visually hidden text x colors avialable\r\n          <!-- reduces verbosity and all colors are available on PDP\r\n          <ul id=\"colors\" class=\"product-colors\" aria-hidden=\"true\">\r\n            <li class=\"red\"></li>\r\n            <li class=\"gold\"></li>\r\n            <li class=\"blue\"></li>\r\n            <li class=\"gray\"></li>\r\n          </ul>\r\n          <ul id=\"pricing\" class=\"product-pricing\">\r\n            <li class=\"monthly\" id=\"product-0-price-monthly\">\r\n              <div><strong>Monthly</strong></div>\r\n              <strong>\r\n                $22.00<span class=\"hidden-visually\">,</span>\r\n              </strong>\r\n              <span class=\"hidden-visually\">\r\n                Original price:\r\n              </span>        \r\n              <s>$50.00</s>\r\n              <div>For 36 months</div>\r\n            </li>\r\n            <li class=\"today\" id=\"product-0-price-today\">\r\n              <div><strong>Today</strong></div>\r\n              $0\r\n              <div>down + tax</div>\r\n            </li>\r\n            <li class=\"full-price\" id=\"product-0-price-full\">\r\n              <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\r\n              <span class=\"hidden-visually\">\r\n                Original price:\r\n              </span>        \r\n              <s>$1,998</s>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  </div>\r\n</div>\r\n``` \r\n-->\n\n## Further Reading\n\n* [WCAG 1.4.1 Use of Color (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/use-of-color)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.4 Link Purpose (In Context) (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html)\n* [WCAG 2.5.3 Label in Name (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "List",
          "name": "list",
          "type": "file",
          "generalNotes": "How to test a list",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a list\n\nGIVEN THAT I am on a page with a list\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a list I SEE the list comes into view\n   * WHEN I use the tab key I SEE nothing happens to the list itself because lists must NOT be focusable\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a list\n     * I HEAR it identifies itself as a list\n     * I HEAR it declares the number of items in the list\n   * WHEN I use the tab key I HEAR nothing happens to the list itself because lists must NOT be focusable\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse a list\n     * I HEAR it identifies itself as a list\n     * I HEAR it declares the number of items in the list\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/list>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a list\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Nothing, list items must not be focusable\n   * Arrow-keys: Browses list items (when using screen reader)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the list content\n\n3. Listen to screenreader output on all devices\n\n   * Role: It identifies itself as a list\n   * Group: It declares the number of items in the list\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/list>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Lists are not focusable with the tab key\n\n* When using a screen reader, the **arrow keys** are used to browse non-focusable content\n* The tab key only focuses interactive elements (ex: buttons, links or inputs) inside the list item.\n\n### Code examples\n\n#### Unordered list\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<ul>\r\n  <li>Sugar</li>\r\n  <li>Flour</li>\r\n  <li>Butter</li>\r\n  <li>Oil</li>\r\n  <li>Eggs</li>\r\n</ul>\n```\n\n<example>\r\n<h4>Common household pantry items</h4>\r\n<ul>\r\n  <li>Sugar</li>\r\n  <li>Flour</li>\r\n  <li>Butter</li>\r\n  <li>Oil</li>\r\n  <li>Eggs</li>\r\n</ul>\r\n</example>\n\n#### Ordered list\n\n```html\n<ol>\r\n  <li>Elmo</li>\r\n  <li>Big Bird</li>\r\n  <li>Cookie Monster</li>\r\n</ol>\n```\n\n<example>\r\n<h4>Top three Sesame Street characters</h4>\r\n<ol>\r\n  <li>Elmo</li>\r\n  <li>Big Bird</li>\r\n  <li>Cookie Monster</li>\r\n</ol>\r\n</example>\n\n#### When you can't use semantic HTML\n\nAs a **last resort**, this custom list uses extra attributes if it's not possible to edit the markup structure.\n\n```html\n<!-- Top three Sesame Street characters, according to some -->\r\n<div role=\"list\">\r\n  <div role=\"listitem\">Elmo</div>\r\n  <div role=\"listitem\">Big Bird</div>\r\n  <div role=\"listitem\">Cookie Monster</div>\r\n</div>\n```\n\n### Do not interrupt the list\n\nThe `<ul>` or `<ol>` list must only contain `<li>` list items.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<!-- Were they or weren't they? -->\r\n<ul>\r\n  <li>Ross</li>\r\n  <div>\r\n    <a href=\"#\">Stream it all over again and decide</a>\r\n  </div>\r\n  <li>Rachel</li>\r\n</ul>\n```\n\n### Do not create fake lists\n\nAdding returns or generic markup does not produce a list navigable by screen reader.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\nSugar <br/>\r\nFlour <br/>\r\nButter <br/>\r\n\r\n<div>Sugar</div>\r\n<div>Flour</div>\r\n<div>Butter</div>\n```"
        },
        {
          "label": "Modal Dialog",
          "name": "modal-dialog",
          "type": "file",
          "generalNotes": "How to test a modal dialog",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a modal dialog\n\nGIVEN THAT I am on a page with a modal dialog\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the launch button and use spacebar and/or enter key to activate the button I SEE the dialog opens and is in focus\n   * THEN when I use the arrow keys I SEE content in the dialog is browsed in logical order and does not leave the dialog\n   * THEN when I use the tab key I SEE focus moves to interactive controls in the modal dialog\n   * THEN when I use the escape key I SEE focus returns to the launch button\n   * OR when I use the tab key to move focus to the dismiss/close button AND THEN use the spacebar or enter key to activate the dismiss/close button I SEE focus returns to the launch button\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to the launch button and use spacebar and/or enter key to activate the button\n     * I HEAR the dialog describes its purpose or title on launch\n     * I HEAR it identifies itself as a modal or dialog\n     * I HEAR when closed, focus returns to the launch button\n     * I HEAR when open, content behind the modal remains inert\n   * THEN when I use the arrow keys I HEAR content in the dialog is browsed in logical order and does not leave the dialog\n   * THEN when I use the tab key I HEAR focus moves to interactive controls in the modal dialog\n   * THEN when I use the escape key I HEAR focus returns to the launch button\n   * OR when I use the tab key to move focus to the dismiss/close button AND THEN use the spacebar or enter key to activate the dismiss/close button I HEAR focus returns to the launch button\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus to the launch button\n     * I HEAR the dialog describes its purpose or title on launch\n     * I HEAR it identifies itself as a modal or dialog\n     * I HEAR when closed, focus returns to the launch button\n     * I HEAR when open, content behind the modal remains inert\n   * THEN when I doubletap with the button in focus I HEAR the dialog opens\n   * THEN when I swipe within the modal dialog I HEAR focus stays trapped in the modal dialog\n   * THEN when I swipe to move focus to the dismiss/close button AND THEN double tap on the close button I HEAR focus returns to the launch button\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/modal-dialog>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a modal dialog\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Launch button: Focus visibly moves to the open dialog itself.\n   * Arrow keys: Content within the dialog is browsed in logical order.\n   * Tab: Focus visibly moves to interactive controls in the dialog, starting with the first interactive control (typically close button).\n   * Escape: The dialog closes and returns focus to the button that launched it.\n   * Space: Any buttons are activated.\n   * Enter: Any buttons or links are activated.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the dialog and doesn't enter the rest of the page.\n   * Doubletap: This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n\n   * Name: The dialog describes its purpose or title on launch.\n   * Role: It identifies itself as a modal or dialog.\n   * Group: When closed, focus returns to the launch button.\n   * State: When open, content behind the modal remains inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/modal-dialog>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/web/modal-dialog/modalDialog_AndroidTalkback.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### iOS VoiceOver\n\n<video controls>\r\n  <source src=\"media/video/web/modal-dialog/modalDialog_IosVoiceOver.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/modal-dialog/modalDialog_WindowsJawsChrome.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/modal-dialog/modalDialog_WindowsNvdaChrome.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\r\n  <source src=\"media/video/web/modal-dialog/modalDialog_MacOsVoiceOverSafari.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Required attributes\n\n### Launch button\n\n* Should be a `<button>`, not a `<a>` link.\n* Upon closing, focus must return to the button that launched the dialog.\n* **Do not** use `aria-haspopup`. This attribute has very low and support and unpredictable output across screen readers.\n\n## Name\n\n* The modal window has a logical descriptive name from either:\n  * `aria-label=\"Modal title\"` or\n  * `aria-labelledby=\"heading-id\"` pointing to an `<h2>` as a title\n\n### Role\n\n* Use `role=\"dialog\"` so the screen reader can identify this as a dialog or modal.\n\n### Group\n\n* Upon closing, focus must return to the button that launched the dialog.\n\n### State\n\n* Use `aria-modal=\"true\"` to indicate content beneath the modal is inert and that the screen reader must not browse outside the dialog.\n\n### Focus\n\n* Use `tabindex=\"-1\"` to make the modal itself targetable for focus.\n* Upon closing, focus must return to the button that launched the dialog.\n\n### Documentation\n\n* [Browser Support](https://caniuse.com/?search=dialog)\n\n## Screenreader differences\n\n### NVDA\n\n* By default, NVDA may read the entire modal upon launch. This is expected behavior.\n\n## Code examples\n\n### Use semantic HTML where possible\n\nSince browser support for `<dialog>` is incomplete, if you plan to use the `<dialog>` element we recommend that you include the `role=\"dialog\"` attribute because the element alone is not fully compatible.\n\nSome browsers require additional scripting. This simple example works in Chrome, but [may not work correctly in all browsers](https://caniuse.com/?search=dialog) such as Safari and Firefox.\n\n```html\n   <button id=\"showModal\">\r\n   Things you should know\r\n   </button>\r\n\r\n   <dialog role=\"dialog\"\r\n         id=\"modal\"\r\n         tabindex=\"-1\"\r\n         aria-modal=\"true\"\r\n         aria-labelledby=\"dialog-title\">\r\n   <button type=\"button\"\r\n            id=\"closeModal\"\r\n            class=\"close\">\r\n      <span class=\"hidden\">Close</span>\r\n   </button>\r\n   <div class=\"dialog-content\">\r\n      <h2 id=\"dialog-title\" class=\"h-bravo\">\r\n         Things you should know\r\n      </h2>\r\n      <h3>Keyboard</h3>\r\n      <ul>\r\n         <li>Focus must not enter the rest of the page.</li>\r\n         <li>The escape key must close the modal.</li>\r\n      </ul>\r\n      <h3>Screenreader</h3>\r\n      <ul>\r\n         <li>The modal's title is announced on launch.</li>\r\n         <li>The screen reader cannot read content behind the dialog.</li>\r\n      </ul>\r\n      <button type=\"submit\">\r\n         Continue\r\n      </button>\r\n   </section>\r\n   </dialog>\n```\n\n<!-- TODO: The code sample example is not currently functional - fix needed.\r\n\r\n<example>\r\n   <button id=\"showModal\">\r\n   Things you should know\r\n   </button>\r\n\r\n   <dialog role=\"dialog\"\r\n         id=\"modal\"\r\n         tabindex=\"-1\"\r\n         aria-modal=\"true\"\r\n         aria-labelledby=\"dialog-title\">\r\n   <button type=\"button\"\r\n            id=\"closeModal\"\r\n            class=\"close\">\r\n      <span class=\"hidden\">Close</span>\r\n   </button>\r\n   <div class=\"dialog-content\">\r\n      <h2 id=\"dialog-title\" class=\"h-bravo\">\r\n         Things you should know\r\n      </h2>\r\n      <h3>Keyboard</h3>\r\n      <ul>\r\n         <li>Focus must not enter the rest of the page.</li>\r\n         <li>The escape key must close the modal.</li>\r\n      </ul>\r\n      <h3>Screenreader</h3>\r\n      <ul>\r\n         <li>The modal's title is announced on launch.</li>\r\n         <li>The screen reader cannot read content behind the dialog.</li>\r\n      </ul>\r\n      <button type=\"submit\">\r\n         Continue\r\n      </button>\r\n   </section>\r\n   </dialog>\r\n</example> -->\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.3 Focus Order (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Pagination Nav",
          "name": "pagination-nav",
          "type": "file",
          "generalNotes": "How to test a pagination nav",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a pagination nav\n\nGIVEN THAT I am on a page with a pagination nav\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to a pagination navigation I SEE the nav comes into view\n   * THEN when I use the tab key to move focus to a link in the nav and use the enter key I SEE my browser goes to the intended location\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse to a pagination navigation\n     * I HEAR The pagination nav has a logical name (\"pagination\")\n     * I HEAR The nav landmark is discoverable with screenreader shortcuts\n   * THEN when I use the tab key to move focus to a link in the nav and use the enter key I HEAR my browser goes to the intended location\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to elements in the nav\n     * I HEAR The pagination nav has a logical name (\"pagination\")\n     * I HEAR The nav landmark is discoverable with screenreader shortcuts\n   * THEN when I doubletap with the link in focus I HEAR my browser goes to the intended location\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/pagination-nav>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a pagination nav\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to links and buttons within the nav\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the nav\n   * Doubletap: Activates links\n\n3. Listen to screenreader output on all devices\n\n   * Name: The pagination nav has a logical name (\"pagination\")\n   * Role: The nav landmark is discoverable with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/pagination-nav>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n   <nav class=\"pagination\" aria-label=\"Pagination\">\n      <ul>\n         <li>\n            <a href=\"/1/\"\n            aria-label=\"Page 1\"\n            aria-current=\"page\">\n            1\n            </a>\n         </li>\n         <li><a href=\"/2/\" aria-label=\"Page 2\">2</a></li>\n         <li><a href=\"/3/\" aria-label=\"Page 3\">3</a></li>\n         <li><a href=\"/4/\" aria-label=\"Page 4\">4</a></li>\n         <li><a href=\"/5/\" aria-label=\"Page 5\">5</a></li>\n         <li><a href=\"/2/\">Next</a></li>\n      </ul>\n   </nav>\n```\n\n<!-- TODO: code example needs updated stylings to remove bullets from list items and display horizontally instead of vertically. -->\n\n<example>\n   <nav class=\"pagination\" aria-label=\"Pagination\">\n      <ul>\n         <li>\n            <a href=\"/1/\"\n               aria-label=\"Page 1\"\n               aria-current=\"page\">\n               1\n            </a>\n         </li>\n         <li><a href=\"/2/\" aria-label=\"Page 2\">2</a></li>\n         <li><a href=\"/3/\" aria-label=\"Page 3\">3</a></li>\n         <li><a href=\"/4/\" aria-label=\"Page 4\">4</a></li>\n         <li><a href=\"/5/\" aria-label=\"Page 5\">5</a></li>\n         <li><a href=\"/2/\">Next</a></li>\n      </ul>\n   </nav>\n</example>\n\n## Developer Notes\n\n### Name\n\n* Use `aria-label=\"Pagination\"` when there is not a visible nav title.\n  * `aria-labelledby=\"title-id\"` can be used when the nav title is a visible heading.\n* Use `aria-label=\"Page X\"` for each entry link.\n\n### Role\n\n* Identifies itself as navigation.\n* Use `role=\"navigation\"` when it's not possible to use `<nav>`.\n* **DO NOT** add menu or option roles with arrow key event listeners unless you're building an actual application like Gmail.\n\n### State\n\n* Use `aria-current=\"page\"` on the current page item.\n\n## Further Reading\n\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.4 Link Purpose (In Context) (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html)\n* [WCAG 2.5.3 Label in Name (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html)\n* [WCAG 2.5.8 Target Size (Minimum) (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html)\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Progress Indicator",
          "name": "progress-indicator",
          "type": "file",
          "generalNotes": "How to test a progress indicator",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\nGIVEN THAT I am on a page with a progress indicator\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a progress bar I SEE the progress bar comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a progress bar\n     * I HEAR the progress indicator purpose is clear\n     * I HEAR it identifies itself as some kind of progress indicator\n     * I HEAR it expresses its current value if it dynamically changes\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse to a progress bar\n     * I HEAR the progress indicator purpose is clear\n     * I HEAR it identifies itself as some kind of progress indicator\n     * I HEAR it expresses its current value if it dynamically changes\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/progress-indicator>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow keys: Content within the progress indicator is browsed in a logical order\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content within the progress indicator is browsed in a logical order\n\n3. Listen to screenreader output on all devices\n\n   * Name: The progress indicator purpose is clear\n   * Role: It identifies itself as some kind of progress indicator\n   * State: It expresses its current value if it dynamically changes\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/progress-indicator>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Use `aria-label=\"Progress bar name\"` when there is not a visible title.\n\n### Role\n\n* Use `role=\"progressbar\"`.\n\n### Group\n\n* If the progress bar is describing another region of the page, use `aria-describedby=\"progressbar-id\"` with its paired `id=\"progressbar-id\"` to connect the two elements.\n\n### State\n\n* The state will be read out to the screen reader user by default.\n\n### Focus\n\n* Progress bar is not usually focusable.\n\n## Code examples\n\n### Progress bar\n\nThere are many variations of progress bars and loading spinners, some of which may not need to be a true progress bar at all.\n\n* [WAI-ARIA Multi-page form examples](https://www.w3.org/WAI/tutorials/forms/multi-page/)\n\nSupport varies by screen reader. It's recommended to add full ARIA attributes, even when using a `<progress>` element.\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* While not a requirement, it is focusable to increase discoverability.\n\n```html\n<progress role=\"progressbar\"\r\n          id=\"progress\"\r\n          tabindex=\"0\"\r\n          class=\"progress\"\r\n          aria-label=\"File upload\"\r\n          value=\"50\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuenow=\"50\"\r\n          aria-valuemax=\"100\"\r\n          max=\"100\">\n```\n\n<example>\r\n<progress role=\"progressbar\"\r\n          id=\"progress\"\r\n          tabindex=\"0\"\r\n          class=\"progress\"\r\n          aria-label=\"File upload\"\r\n          value=\"50\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuenow=\"50\"\r\n          aria-valuemax=\"100\"\r\n          max=\"100\">\r\n</example>\n\n### Spinner loading takeover\n\n* There are many variations of loaders and spinners.\n* While a takeover spinner modal is present, other content on the page must be inert.\n\n#### Use semantic HTML\n\n* This semantic HTML contains all accessibility features using a dialog.\n  * The `<progress>` element can be used to describe the state.\n\n#### Ensure content is ready before being available\n\n* If content is being loaded slowly behind the spinner inside an `aria-live` region, use `aria-busy=\"true\"` to keep it from being announced until the update is complete.\n\n```html\n<!-- Use aria-busy if content doesn't all load at once -->\r\n<div id=\"really-slow-app\" \r\n     aria-live=\"polite\" \r\n     aria-busy=\"false\">\r\n     \r\n  <button id=\"showModal\">\r\n    Launch spinner\r\n  </button>\r\n\r\n  <dialog role=\"dialog\"\r\n          class=\"takeover\"\r\n          id=\"modal\"\r\n          tabindex=\"-1\"\r\n          aria-modal=\"true\"\r\n          aria-labelledby=\"modal-title\">\r\n    <section>\r\n      <div class=\"progress-spinner\">\r\n        <progress role=\"progressbar\" \r\n                  id=\"modal-title\" \r\n                  tabindex=\"0\" \r\n                  aria-label=\"Loading\">\r\n      </div>\r\n    </section>\r\n  </dialog>\r\n</div>\n```\n\n<!-- TODO: the button should open this modal - should we add text in the loading modal that says you can use your ESCAPE key to close the modal for those who are unfamiliar?\r\n\r\n<example>\r\n<!-- Use aria-busy if content doesn't all load at once\r\n<div id=\"really-slow-app\" \r\n     aria-live=\"polite\" \r\n     aria-busy=\"false\">\r\n     \r\n  <button id=\"showModal\">\r\n    Launch spinner\r\n  </button>\r\n\r\n  <dialog role=\"dialog\"\r\n          class=\"takeover\"\r\n          id=\"modal\"\r\n          tabindex=\"-1\"\r\n          aria-modal=\"true\"\r\n          aria-labelledby=\"modal-title\">\r\n    <section>\r\n      <div class=\"progress-spinner\">\r\n        <progress role=\"progressbar\" \r\n                  id=\"modal-title\" \r\n                  tabindex=\"0\" \r\n                  aria-label=\"Loading\">\r\n      </div>\r\n    </section>\r\n  </dialog>\r\n</div>\r\n</example> -->\n\n### Inline dynamic loading waiting example\n\nThis example dynamically injects progress updates that will be read by a screen reader:\n\n* `aria-busy=\"true\"` indicates that the region is busy\n* `aria-describedby` allows the current progress to be read when the button is focused\n* `aria-disabled` reinforces that the save action is incomplete\n* `role=\"status\"` has an implicit `aria-live=\"polite\"` and `aria-atomic=\"true\"`, meaning the entire content of the status will be read on each update\n\n```html\n<div \r\n  id=\"slow-app\"\r\n  aria-live=\"polite\">\r\n  \r\n  <button \r\n    id=\"trigger-progressbar\"\r\n    aria-describedby=\"progress-busy\"\r\n    aria-disabled=\"false\">\r\n      Save\r\n  </button>\r\n\r\n  <div class=\"progress-busy inert\" role=\"status\">\r\n    <span id=\"progress-busy\">\r\n    </span> \r\n  </div>\r\n</div>\n```\n\n<!-- TODO: demo doesn't currently work\r\n\r\n<example>\r\n<div \r\n  id=\"slow-app\"\r\n  aria-live=\"polite\">\r\n  \r\n  <button \r\n    id=\"trigger-progressbar\"\r\n    aria-describedby=\"progress-busy\"\r\n    aria-disabled=\"false\">\r\n      Save\r\n  </button>\r\n\r\n  <div class=\"progress-busy inert\" role=\"status\">\r\n    <span id=\"progress-busy\">\r\n    </span> \r\n  </div>\r\n</div>\r\n</example> -->\n\n## Further Reading\n\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html)\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 1.4.11 Non-text Contrast (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-contrast.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)\n* [WCAG 4.1.3 Status Messages (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html)"
        },
        {
          "label": "Scrolling Container",
          "name": "scrolling-container",
          "type": "file",
          "generalNotes": "How to test a scrolling container",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/scrolling-container>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/scrolling-container>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Search",
          "name": "search",
          "type": "file",
          "generalNotes": "How to test a search input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a search input\n\nGIVEN THAT I am on a page with a search input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a search input I SEE focus is strongly visually indicated\n   * THEN when I use the tab key to move focus to the search submit button I SEE the button is focused\n   * THEN when I use the enter or spacebar key I SEE the search results are presented\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader shortcuts as a search input\n   * THEN when I use the tab key to move focus to the search submit button I HEAR the button is focused\n   * THEN when I use the enter or spacebar key I HEAR the search results are presented\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the search text input and search button\n   * Space: Search button is activated\n   * Enter: Search is activated\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to the search text input and search button\n   * Doubletap: Search button is activated\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a search input\n   * Group: The form itself is discoverable with screenreader shortcuts as a search input\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/web/search/search-android.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### iOS VoiceOver\n\n<video controls>\r\n  <source src=\"media/video/web/search/search-ios.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows Jaws Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/search/search-JAWS.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\r\n  <source src=\"media/video/web/search/search-NVDA.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\r\n  <source src=\"media/video/web/search/search-desktop-safari.mp4\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* Include a search button\n\n### Search with autocomplete suggestions\n\n* For search autocomplete see [Autocomplete input with listbox](/checklist-web/listbox-autocomplete/)\n\n<!-- TODO update link above -->\n\n```html\n<form role=\"search\">\r\n  <label for=\"search\">\r\n    Search this website:\r\n  </label>\r\n  <input list=\"components\" type=\"search\" id=\"search\">\r\n  <datalist id=\"components\"> \r\n    <option value=\"Alert\"> \r\n    <option value=\"Animation\"> \r\n    <option value=\"Button\"> \r\n    <option value=\"Checkbox\">\r\n    <option value=\"Date picker\">\r\n    <option value=\"Expander accordion\">\r\n    <option value=\"Footer / contentinfo\">\r\n    <option value=\"Form\">\r\n    <option value=\"Header / banner\">\r\n    <option value=\"Heading: h1, h2, h3\">\r\n  </datalist>\r\n\r\n  <button type=\"submit\" aria-label=\"search\">\r\n   <svg focusable=\"false\" aria-hidden=\"true\"></svg>\r\n  </button>\r\n</form>\n```\n\n<!-- TODO issues with focus when tabbing to search button -->\n\n<!-- TODO Something funky is up with the search button here and I can't figure it out. It is submitting on focus when not using VoiceOver.  -->\n\n<example>\r\n   <form role=\"search\">\r\n      <label for=\"search\" class=\"hidden-visually\">\r\n         Search this website:\r\n      </label>\r\n      <input list=\"components\" type=\"search\" id=\"search\">\r\n      <datalist id=\"components\"> \r\n         <option value=\"Alert\"> \r\n         <option value=\"Animation\"> \r\n         <option value=\"Button\"> \r\n         <option value=\"Checkbox\">\r\n         <option value=\"Date picker\">\r\n         <option value=\"Expander accordion\">\r\n         <option value=\"Footer / contentinfo\">\r\n         <option value=\"Form\">\r\n         <option value=\"Header / banner\">\r\n         <option value=\"Heading: h1, h2, h3\">\r\n      </datalist>\r\n      <button data-icon=\"search\" aria-label=\"Search\"></button>\r\n   </form>\r\n</example>\n\n## Developer notes\n\n### Name\n\n* Use a `label` with a `for=\"input-id` to describe the input\n* Use `aria-label=\"Search this website\"` if a `label` can't be used\n\n### Role\n\n* Use `role=\"search\"` for the `<form>`\n* Use `type=\"search\"` for the text `<input>`\n\n### Group\n\n* Form identifies itself as `role=\"search\"`\n* Include a search submit button.\n\n### Focus\n\n* Focus must be visible\n\n## Further Reading\n\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html)\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)\n* [WCAG 1.3.5 Identify Input Purpose (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html)\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Separator Horizontal Rule",
          "name": "separator-horizontal-rule",
          "type": "file",
          "generalNotes": "How to test a separator / horizontal rule",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a separator / horizontal rule\n\nGIVEN THAT I am on a page with a separator / horizontal rule\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use arrow keys to browse to the separator I SEE the element is skipped entirely. It is completely inert.\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use arrow keys to browse to the separator\n     * I HEAR the element is skipped entirely. It is completely inert.\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to the separator\n     * I HEAR the element is skipped entirely. It is completely inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/separator-horizontal-rule>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a separator / horizontal rule\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Any key: Nothing happens. It is completely inert.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The element is skipped entirely. It is completely inert.\n\n3. Listen to screenreader output on all devices\n\n   * Name: The element is skipped entirely. It is completely inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/separator-horizontal-rule>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\nSeparators must be ignored by the screenreader.\n\nIt is preferred to create these lines with CSS rather than using a DOM element.\n\n## Code examples\n\nIf you are unable to use CSS styles, add `aria-hidden=\"true\"` to ensure it doesn't distract from the experience.\n\n### Semantic HTML\n\n```html\n<hr aria-hidden=\"true\">\n```\n\n### Custom elements\n\nAngular Material uses a DOM element to create separators.\n\n```html\n<div role=\"separator\" aria-hidden=\"true\"></div>\n```"
        },
        {
          "label": "Sticky Element",
          "name": "sticky-element",
          "type": "file",
          "generalNotes": "How to test a sticky element",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a sticky element\n\nGIVEN THAT I am on a page with a sticky element\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to interactive elements inside the sticky element I SEE focus is visually indicated in a logical order in relation to the whole page\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to interactive elements inside the sticky element\n     * I HEAR interactive elements are read in logical order in relation to the whole page\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to the sticky element\n     * I HEAR Interactive elements are read in logical order in relation to the whole page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/sticky-element>\n\n<!-- ## Developer Notes\n\n### Name\n\n- Typically doesn’t have a name or description since there must be only one instance per page. -->",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a sticky element\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Controls are visibly focusable in a logical order in relation to the whole page\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content and controls within the sticky element appear in a logical order in relation to the whole page\n\n3. Listen to screenreader output on all devices\n\n   * Group: Interactive elements are read in logical order in relation to the whole page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/sticky-element>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/sticky/Android Talkback-sticky-content.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/web/sticky/iOS Voiceover-sticky-content.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/sticky/MacOS-Voiceover-Safari-sticky-content.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Pitfalls of sticky content\n\nUnless you have a really good reason, it's best to avoid sticking content to the bottom (or top) of the page. While it seems like an obvious solution, without user testing in production environments you won't know how people are really going to interact with it.\n\n### Ask the following questions first\n\n* Where will this appear in the actual DOM (code) order?\n  * If it's injected at the top or bottom of the content, will it be cumbersome or impossible for someone using a keyboard or screen reader to locate it?\n* Is it preferable to place this content in multiple locations on the page?\n  * A \"Buy now\" button can appear more than once in the page.\n* Will this content be perceived as an ad and thus ignored by the customer?\n  * We've trained people for years to ignore sticky content in their browser offering app downloads and other ads. Why is your popup sticky content any different?\n\n## Code examples\n\n### Place the element in logical DOM order\n\nThis semantic HTML appears in logical order in the page.\n\nIt uses only CSS (no JavaScript) to float content as desired.\n\n```html\n\n<div class=\"sticky-wrapper\">\n  <div class=\"promo-bar sticky tops\">\n    <button>Upgrade today</button>\n    <p>Content that sticks to the top</p>\n  </div>\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a> \n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n</div>\n<div class=\"promo-bar\">\n  <button class=\"secondary\">See more</button>\n  <p>Content that is <em>not</em> sticky</p>\n</div>\n<div class=\"vertical-spacer vertical-spacer--less\">\n</div>\n<div class=\"sticky-wrapper\">\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a>\n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n  <div class=\"promo-bar sticky\">\n    <button>Buy now</button>\n    <p>Content that sticks to the bottom</p>\n  </div>\n</div>\n```\n\n<example>\n<div class=\"sticky-wrapper\">\n  <div class=\"promo-bar sticky top\">\n    <button class=\"Magentaa11y-button Magentaa11y-button--primary\">Upgrade today</button>\n    <p>Content that sticks to the top</p>\n  </div>\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a> \n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n</div>\n<div class=\"promo-bar\">\n  <button class=\"Magentaa11y-button Magentaa11y-button--primary\">See more</button>\n  <p>Content that is <em>not</em> sticky</p>\n</div>\n<div class=\"vertical-spacer vertical-spacer--less\">\n</div>\n<div class=\"sticky-wrapper\">\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a>\n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n  <div class=\"promo-bar sticky\">\n    <button class=\"Magentaa11y-button Magentaa11y-button--primary\">Buy now</button>\n    <p>Content that sticks to the bottom</p>\n  </div>\n</div>\n</example>\n\n## Developer notes\n\n### Group\n\n* Must appear in logical page order within the page.\n* Do not place it at the actual end or beginning of the DOM\n* To ensure that controls which receive keyboard focus are not concealed by a sticky container, utilize CSS [scroll-padding](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding) or [scroll-margin](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin)."
        },
        {
          "label": "Strikethrough Content",
          "name": "strikethrough-content",
          "type": "file",
          "generalNotes": "How to test a strikethrough element",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a strikethrough element\n\nGIVEN THAT I am on a page with strikethrough content\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse the content I SEE the content comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse the content\n     * I HEAR the content makes sense and is in a logical order\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse the content\n     * I HEAR the content makes sense and is in a logical order\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/strikethrough-content>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a strikethrough element\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow: Browses the content\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The content makes sense and is in a logical order\n\n3. Listen to screenreader output on all devices\n\n   * Name: The content makes sense and is in a logical order\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/strikethrough-content>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\n* Do not use `aria-label` to add context. Some screenreaders will not read `aria-label` from non-interactive components.\n\n## Code examples\n\n```html\n<p>Get a $10/mo discount with autopay</p>\r\n<s class=\"h-bravo\">\r\n  <!-- Give context to the first number -->\r\n  <span class=\"hidden-visually\">\r\n    Original price:\r\n  </span>\r\n  $50\r\n  <!-- Give context to the first number -->\r\n  <span class=\"hidden-visually\">\r\n    /mo\r\n  </span>\r\n</s>\r\n<span class=\"h-bravo\">\r\n  <!-- Give context to the second number -->\r\n  <span class=\"hidden-visually\">\r\n    Price with $10 autopay discount\r\n  </span>\r\n  $40/mo\r\n</span>\n```\n\n<example>\r\n<p>Get a $10/mo discount with autopay</p>\r\n<s class=\"h-bravo\">\r\n  <!-- Give context to the first number -->\r\n  <span class=\"hidden-visually\">\r\n    Original price:\r\n  </span>\r\n  $50\r\n  <!-- Give context to the first number -->\r\n  <span class=\"hidden-visually\">\r\n    /mo\r\n  </span>\r\n</s>\r\n<span class=\"h-bravo\">\r\n  <!-- Give context to the second number -->\r\n  <span class=\"hidden-visually\">\r\n    Price with $10 autopay discount\r\n  </span>\r\n  $40/mo\r\n</span>\r\n</example>"
        },
        {
          "label": "Table",
          "name": "table",
          "type": "file",
          "generalNotes": "How to test a table",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\nGIVEN THAT I am on a page with a table landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys I SEE the table scrolls into view (but is not focusable)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver)\n   * AND use the arrow keys\n     * I HEAR The table has a caption or a heading to describe its purpose\n     * I HEAR It identifies itself as a table\n     * I HEAR Column headers and row headers are identified with screenreader shortcuts\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver)\n   * AND I swipe to focusable elements in the footer\n     * I HEAR The table has a caption or a heading to describe its purpose\n     * I HEAR It identifies itself as a table\n     * I HEAR Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/table>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: The table scrolls into view (and with a screenreader the cells become individually readable)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The table is browsed from cell to cell\n\n3. Listen to screenreader output on all devices\n\n   * Name: The table has a caption or a heading to describe its purpose\n   * Role: It identifies itself as a table\n   * Group: Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/table>",
          "criteria": null,
          "videos": "#### iOS Voiceover\n\n<video controls>\r\n  <source src=\"media/video/web/table/table_ios.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\nTables must be used to structure tabular data. Avoid using tables for layout purposes.\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\\\nOptional: The table is wrapped in a `<figure>` to indicate author and source.\n\n```html\n<table id=\"nato-table\">\r\n  <caption class=\"h-charlie\">\r\n    Nato phonetic Alphabet\r\n  </caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"row\">Letter</th>\r\n      <th scope=\"col\">A</th>\r\n      <th scope=\"col\">B</th>\r\n      <th scope=\"col\">C</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">NATO</th>\r\n      <td>Alpha</td>\r\n      <td>Bravo</td>\r\n      <td>Charlie</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\n<table class=\"text-center\">\r\n  <caption>\r\n    Nato phonetic Alphabet\r\n  </caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"row\">Letter</th>\r\n      <th scope=\"col\">A</th>\r\n      <th scope=\"col\">B</th>\r\n      <th scope=\"col\">C</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">NATO</th>\r\n      <td>Alpha</td>\r\n      <td>Bravo</td>\r\n      <td>Charlie</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n\n<table class=\"text-center\">\r\n<caption>\r\n    Screen reader and browser pairings\r\n  </caption>\r\n  <thead>\r\n    <tr>\r\n      <th>Platform</th>\r\n      <th>Screenreader</th>\r\n      <th>Browser</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-android.svg\" alt=\"Android\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-talkback.svg\" alt=\"Talkback\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\">\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-jaws.svg\" alt=\"JAWS\">\r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\">\r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-nvda.svg\" alt=\"NVDA\">\r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\">\r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \r\n      </td>\r\n      <td>\r\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n\n### When You Can’t Use Semantic HTML\n\nIf tabular data must be displayed without a `<table>` element, additional attributes are required.\n\n```html\n<div role=\"table\" aria-describedby=\"table-desc\">\r\n  <div id=\"table-desc\">Nato phonetic alphabet</div>\r\n  <div role=\"rowgroup\">\r\n    <div role=\"row\">\r\n      <span role=\"columnheader\">Letter</span>\r\n      <span role=\"columnheader\">NATO</span>\r\n    </div>\r\n  </div>\r\n  <div role=\"rowgroup\">\r\n    <div role=\"row\">\r\n      <span role=\"cell\">A</span>\r\n      <span role=\"cell\">Alpha</span>\r\n    </div>\r\n    <div role=\"row\">\r\n      <span role=\"cell\">B</span>\r\n      <span role=\"cell\">Bravo</span>\r\n    </div>\r\n    <div role=\"row\">\r\n      <span role=\"cell\">C</span>\r\n      <span role=\"cell\">Charlie</span>\r\n    </div>\r\n  </div>\r\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* The table can be named by a heading above or a `<caption>`.\n\n### Role\n\n* Semantic `<table>` structures identify headers appropriately and honor screenreader keyboard shortcuts.\n\n### Group\n\n* Wrapping a table in a `<figure>` element can build a relationship to `<figcaption>` and `<cite>`.\n\n### State\n\n* Sortable tables can use `aria-sort` to indicate state."
        },
        {
          "label": "Tabs",
          "name": "tabs",
          "type": "file",
          "generalNotes": "How to test tabs",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test tabs\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a tab I SEE focus is strongly visually indicated on the activated tab\n\n   * IF TAB ACTIVATION IS MANUAL when I use the left/right arrow keys I SEE focus moves to other tabs and I use the spacebar or enter key to activate the tab\n\n   * IF TAB ACTIVATION IS AUTOMATIC when I use the left/right arrow keys I SEE the tab is activated\n\n   * THEN when I use the tab key I SEE focus moves to the activated tab panel\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to a tab\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a tab\n     * I HEAR it expresses its state (selected/pressed/checked)\n\n   * IF TAB ACTIVATION IS MANUAL when I use the left/right arrow keys I HEAR focus moves to other tabs and I use the spacebar or enter key to activate the tab\n\n   * IF TAB ACTIVATION IS AUTOMATIC when I use the left/right arrow keys I HEAR the tab is activated\n\n   * THEN when I use the tab key I HEAR focus moves to the activated tab panel\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focus on a tab\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a tab\n     * I HEAR it expresses its state (selected/pressed/checked)\n\n   * THEN when I doubletap with the tab in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tabs>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test tabs\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab key: Focus visibly moves to the active tab and then the open tab panel\n\n   * Left/right-arrow-keys (automatic activation): Moves focus to the next or previous tab and activates the tab\n\n   * Left/right-arrow-keys (manual activation): Moves focus to the next or previous tab\n\n   * Spacebar or enter (manual activation): Activates the focused tab\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the tabs and then the open tab panel\n\n   * Doubletap: Activates the tab\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n\n   * Role: It identifies itself as a tab\n\n   * State: It expresses its state (selected/pressed/checked)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tabs>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Tab groups\n\nTabs can be useful in scenarios where content is repetitive and doesn't require direct comparison. In these instances, they can effectively organize information without compromising functionality. When implemented thoughtfully, tabs can enhance accessibility by simplifying navigation and helping users quickly locate the information they need.\n\nHowever, tab groups can also pose challenges for accessibility and usability when not implemented effectively. Poorly designed tab groups often lead to a cluttered presentation of content, which can detract from the overall user experience rather than enhance it. Ensuring that tab groups are thoughtfully structured is crucial for making content more accessible and user-friendly.\n\n### Potential issues with tab groups:\n\n* **Accessibility**: Many screen reader users struggle with navigating tab groups using arrow keys, potentially missing crucial content.\n* **Interaction Rates**: Engagement is typically low for content beyond the first tab panel.\n* **Visibility of Content**: Content is hidden by default, and not all users are aware of how to access it.\n* **Comparative Information**: Users cannot easily compare information presented across multiple tabs.\n\n### Recommended alternatives:\n\nInstead of using tab groups, consider these alternatives:\n\n* Breaking the page into clear sections with consice copywriting.\n* Use expandable sections (accordions) for better organization.\n* Create separate pages for different topics\n\n### Tab activation types:\n\nTabs can be built to be activated **automatically** or **manually**.\n\n* **Automatic** tabs become activated immediately upon focus via a mouse click or the arrow keys.\n* **Manual** tabs can receive focus via the arrow keys, but require the user to press either `Enter` or `Space`, or click them with their mouse to activate them.\n\nYou can find additional guidance as well as examples of automatic and manually activated tab groups on the [WAI-ARIA Authoring Practices Guide Tabs Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/) page.\n\n### Code considerations\n\n* **Tablist**: The main container for tabs requires `role=\"tablist\"`.\n* **Tabs**: Each tab within the tablist requires `role=\"tab\"`.\n* **Content Panels**: Each content area for a tab is called a `role=\"tabpanel\"`.\n* **Labels**: Each `tabpanels` needs to have an `aria-labelledby` attribute that points to the corresponding `tab` label.\n* **Control Association**: Each `tab` has an `aria-controls` attribute linking it to its corresponding `tabpanel`.\n* **Active Tab**: The currently selected tab has `aria-selected` set to true; all other tabs have it set to false.\n* **Orientation**: If the tablist is vertical, it has `aria-orientation` set to vertical. By default, it is horizontal.\n\n### Example\n\n```html\n<div class=\"tabs\">\r\n  <div role=\"tablist\">\r\n    <button role=\"tab\"\r\n            aria-selected=\"true\" \r\n            aria-controls=\"alpha-tab\" \r\n            id=\"alpha\">\r\n            Alpha\r\n    </button>\r\n    <button role=\"tab\" \r\n            aria-selected=\"false\" \r\n            aria-controls=\"bravo-tab\" \r\n            id=\"bravo\" \r\n            tabindex=\"-1\">\r\n            Bravo\r\n    </button>\r\n    <button role=\"tab\" \r\n            aria-selected=\"false\" \r\n            aria-controls=\"charlie-tab\" \r\n            id=\"charlie\" \r\n            tabindex=\"-1\">\r\n            Charlie\r\n    </button>\r\n  </div>\r\n  <div role=\"tabpanel\" \r\n       id=\"alpha-tab\" \r\n       aria-labelledby=\"alpha\"\r\n       tabindex=\"0\">\r\n    <p>Alpha is the first letter of the NATO alphabet</p>\r\n  </div>\r\n  <div role=\"tabpanel\" \r\n       id=\"bravo-tab\" \r\n       aria-labelledby=\"bravo\"\r\n       tabindex=\"0\">\r\n    <p>Bravo is the second letter of the NATO alphabet</p>\r\n  </div>\r\n  <div role=\"tabpanel\" \r\n       id=\"charlie-tab\" \r\n       aria-labelledby=\"charlie\"\r\n       tabindex=\"0\">\r\n    <p>Charlie is the third letter of the NATO alphabet</p>\r\n  </div>\r\n</div>\n```"
        },
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": "How to test a tidbit",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tidbit>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tidbit>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Toast Snackbar",
          "name": "toast-snackbar",
          "type": "file",
          "generalNotes": "How to test a toast snackbar",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toast snackbar\n\nGIVEN THAT I am on a page with a toast snackbar\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use features that trigger the toast I SEE the toast (BUT focus DOES NOT transfer automatically when the alert appears)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use features that trigger the toast\n     * I HEAR the toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n     * I HEAR it identifies itself as an alert or status when it appears\n     * I HEAR if it is possible to close the toast, focus then returns to a logical place in the page\n     * I HEAR it remains open until closed by user\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I use features that trigger the toast snackbar\n     * I HEAR the toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n     * I HEAR it identifies itself as an alert or status when it appears\n     * I HEAR if it is possible to close the toast, focus then returns to a logical place in the page\n     * I HEAR it remains open until closed by user\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toast-snackbar>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toast snackbar\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves in logical order to buttons or links inside the toast\n   * Space: Any buttons inside are activated\n   * Enter: Any links or buttons inside are activated\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves in logical order to the toast\n   * Doubletap: This typically activates most elements in the toast\n\n3. Listen to screenreader output on all devices\n\n   * Name: The toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n   * Role: It identifies itself as an alert or status when it appears\n   * Group: If it is possible to close the toast, focus then returns to a logical place in the page\n   * State: It remains open until closed by user\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toast-snackbar>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Rethinking Toast Snackbars\n\nToast snackbars might seem like an easy way to provide feedback, but they’re often not the best fit for accessible and user-friendly design. Here’s why:\n\n* Accessibility Limitations: Because snackbars are custom HTML elements, they lack semantic meaning and can be challenging for assistive technologies like screen readers.\n* Missed Messages: If a user doesn’t catch a snackbar in time, it’s difficult to go back and review the information.\n* Auditory Clutter: For screen readers, snackbars can create unnecessary noise, especially if they appear frequently or unexpectedly.\n* Unclear Rules: Like tooltips, snackbars are tricky to define and test consistently in design criteria.\n\n### Instead use an inline element to indicate a change\n\n* Inline Feedback: Inject a success message *in proximity* to the updated control\n* Accessible Undo/Redo Options: Place these buttons in clear, easy-to-navigate locations.\n* Thoughtful Confirmations: Use a confirmation screen for critical actions or when users are exiting an important flow.\n\n<!-- TODO: Needs JS support to activate the toast!\n\n<example>\n<fieldset>\n  <legend>Marketing preferences</legend>\n  <input type=\"checkbox\" role=\"switch\" id=\"spam\" aria-describedby=\"hint-spam-message\" checked=\"\">\n  <label for=\"spam\">\n   Send me constant spam\n   </label>\n  <div id=\"hint-spam\" role=\"alert\" class=\"alert notification inert\">\n    <div id=\"hint-spam-message\">\n      - Use JS to inject the alert here (comment out in the future)\n    </div>     \n  </div>\n</fieldset>\n</example> -->\n\n### When Toast Snackbars Don’t Work:\n\nThere are certain scenarios where snackbars simply aren’t the right tool:\n\n* Critical or Irreversible Actions: For example, “Unsend this message” or “Confirm payment.” These require deliberate, visible feedback\n* Blocking Error Messages: Important errors should grab attention and provide clear guidance—not rely on a fleeting message.\n* Page-Load Alerts: Automatically showing messages on page load can confuse users, particularly those using screen readers.\n\n### Timing\n\nIf you find a situation where a toast snackbar is truly necessary:\n\n* Avoid auto-dismiss wherever possible.\n* If dismissal must be automatic, make sure the [timing is adjustable to meet WCAG 2.2.1 standards](https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html).\n\n## Only use toast snackbars to *reinforce* updates\n\n* If using a snackbar is unavoidable, it must only be used for non-critical messaging.\n* The status injected must also be discernable on the page *without the snackbar*.\n\n### Practical example\n\nGiven that I am on a dynamic single page application\n\n* WHEN the customer changes the state of a toggle to OFF or ON\n  * THEN the toast appears to *reinforce* that the change has been saved\n  * AND the customer can confirm this is true from the toggle itself\n\n## Code example\n\n```html\n<div id=\"toast\">\n  <span id=\"toast-message\" role=\"status\">\n    <!-- Inject snackbar message here -->\n  </span>\n  <button type=\"button\">\n    Dismiss\n  </button>\n</div>\n```"
        },
        {
          "label": "Tooltip",
          "name": "tooltip",
          "type": "file",
          "generalNotes": "How to test a tooltip",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tooltip>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tooltip>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Video Audio Player",
          "name": "video-audio-player",
          "type": "file",
          "generalNotes": "How to test a video/audio player",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a video/audio player\n\nGIVEN THAT I am on a page with a video/audio player\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a control I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the button I SEE the intended action occurs\n   * THEN when I use the arrow keys (left/right) I SEE the media fast forwards/reverses\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a control\n     * I HEAR the video control purpose is clear (play, pause, stop)\n     * I HEAR video controls identify as button, switch etc.\n     * I HEAR audio content never autoplays\n     * I HEAR it expresses it state if applicable (pressed, expanded, disabled)\n   * THEN when I use the spacebar and/or enter key to activate the button I HEAR the intended action occurs\n   * THEN when I use the arrow keys (left/right) I HEAR the media fast forwards/reverses\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n     * I swipe to focusable to a video control\n\n     * I HEAR the video control purpose is clear (play, pause, stop)\n\n     * I HEAR video controls identify as button, switch etc.\n\n     * I HEAR audio content never autoplays\n\n     * I HEAR it expresses it state if applicable (pressed, expanded, disabled)\n   * Then when I doubletap with the video control in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/video-audio-player>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a video/audio player\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to each control\n   * Spacebar: Activates the control button\n   * Enter: Activates the control button\n   * Arrow-keys: Fast forward/reverse media\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus visibly moves to each control\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n\n   * Name: The video control purpose is clear (play, pause, stop)\n   * Role: Video controls identify as button, switch etc.\n   * Group: Audio content never autoplays\n   * State: It expresses it state if applicable (pressed, expanded, disabled)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/video-audio-player>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\n### Autoplay can be very disruptive or hurt people\n\nLet people choose if they're subjected to video content.\n\n* For people using a screen reader, it unexpectedly interferes with their ability to hear/control their machine\n* For people with cognitive differences, it can make it impossible to focus\n* For people with light sensitivity or vestibular disorders, some video content can cause illness\n\n### Is it ever okay?\n\n* Media with audio must not autoplay\n* Silent video can autoplay under these conditions:\n  * It must stop after 5 seconds\n  * The video features accessible controls\n  * Autoplay is disabled when device reduce motion settings are activated\n\n## Code examples\n\n### A heading can serve as a name\n\n```html\n<h2>The Princess Bride</h2>\n<video-embed>\n</video-embed>\n```\n\n### An `aria-label=\"Media title\"` can also be used\n\n```html\n<video-embed aria-label=\"The Princess Bride\"></video-embed>\n```\n\n### Name\n\n* A heading (`<h1>` `<h2>` `<h3>`) above the media can serve as a name\n* `aria-label=\"Media title\"` on a wrapper element can also be used\n\n### Role\n\n* Controls must identify as buttons, switches, etc.\n* There are accessible video embed options available\n\n### Group\n\n* Captions are mandatory for spoken audio content\n  * Do not rely on auto-captioning\n  * This may require the manual creation of a VTT file\n  * There are many options online that will create these for you\n* Transcripts should be HTML based (not a PDF)\n\n### State\n\n* Controls must identify their state (pressed, checked, selected, value, etc)\n\n### Focus\n\n* Focus must be visible"
        }
      ]
    },
    {
      "label": "Form",
      "name": "form",
      "children": [
        {
          "label": "Checkbox",
          "name": "checkbox",
          "type": "file",
          "generalNotes": "How to test a checkbox",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/checkbox>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/checkbox>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Radio Button",
          "name": "radio-button",
          "type": "file",
          "generalNotes": "How to test a radio button",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/radio-button>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/radio-button>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Range Slider",
          "name": "range-slider",
          "type": "file",
          "generalNotes": "How to test a range slider input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a range slider input\n\nGIVEN THAT I am on a page with a range slider input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a range slider I SEE focus is strongly visually indicated\n   * THEN when I use the up/down/left/right arrow keys I SEE the value is changed one step\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a range slider\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a range\n     * I HEAR its label is read with the input\n     * I HEAR its current value\n   * THEN when I use the up/down/left/right arrow keys I HEAR the value is changed one step\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to move focus to a range slider\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a range\n     * I HEAR its label is read with the input\n     * I HEAR its current value\n   * THEN when I swipe up/down in iOS or use the volume buttons in Android I HEAR the value is changed one step\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/public/content/documentation/web/form/range-slider>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a range slider input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the input\n   * Arrow-keys: Increase / decrease value one step\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input\n   * Swipe up/down: Increase/decrease slider value one step on iOS\n   * Volume: Increase/decrease slider value one step on Android\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a range\n   * Group: Its label is read with the input\n   * State: Its current value\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/public/content/documentation/web/form/range-slider>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\nThis is one of the exceedingly rare instances where a custom element makes a lot of sense.\n\n### Use a custom element\n\n* Custom elements are **easier to style reliably** across browsers.\n* [Working slider pattern examples](https://www.w3.org/WAI/ARIA/apg/patterns/slider/)\n\n```html\n<div id=\"range-label\">\n  How much cowbell?\n</div>\n<div class=\"track\">\n  <div id=\"thumb\"\n       role=\"slider\"\n       tabindex=\"0\"\n       aria-valuemin=\"0\"\n       aria-valuenow=\"10\"\n       aria-valuemax=\"11\"\n       aria-labelledby=\"range-label\">\n  </div>\n</div>\n```\n\n### Semantic HTML\n\nWhile there is a native HTML range input, it is **difficult to style reliably** across browsers.\n\n```html\n<div class=\"range-group\">\n  <!-- Input hidden from the screen reader \n    and keyboard to avoid repetition -->\n  <input tabindex=\"-1\" \n          value=\"10\" \n          aria-hidden=\"true\"\n          class=\"range-value\" \n          id=\"cowbell-range-value\">\n  <div>\n    <label for=\"cowbell-range\">\n      How much cowbell?\n    </label>\n    <input type=\"range\"\n      id=\"cowbell-range\"\n      name=\"cowbell\"\n      min=\"0\"\n      max=\"11\"\n      value=\"10\"\n      step=\"1\">\n  </div>\n</div>\n```\n\n<!-- TODO: styling and js? need to be added to help this demo function! \n\n<example>\n<div class=\"range-group\">\n  Input hidden from the screen reader (comment out later)\n    and keyboard to avoid repetition (comment out later)\n  <input tabindex=\"-1\" \n          value=\"10\" \n          aria-hidden=\"true\"\n          class=\"range-value\" \n          id=\"cowbell-range-value\">\n  <div>\n    <label for=\"cowbell-range\">\n      How much cowbell?\n    </label>\n    <input type=\"range\"\n      id=\"cowbell-range\"\n      name=\"cowbell\"\n      min=\"0\"\n      max=\"11\"\n      value=\"10\"\n      step=\"1\">\n  </div>\n</div>\n</example> -->"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Basic Web Page",
          "name": "basic-web-page",
          "type": "file",
          "generalNotes": "How to test a basic web page",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\nGIVEN THAT I am on a page with a basic web page\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the keyboard to open a new web page I SEE the page has a unique logical title in the browser tab\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the keyboard to open a new web page\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to enter from the web browser tabs\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n   * THEN when I change orientations I HEAR content is accessible in landscape or portrait orientation\n\n4. Device OS settings\n   * WHEN I use zoom/pinch THEN I see text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Enters the page and visibly focuses only interactive elements\n   * Zoom: Content zooms up to 200%\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within page\n   * Pinch/stretch: Content zooms up to 200%\n   * Orientation: Content is accessible in landscape or portrait orientation\n\n3. Listen to screenreader output on all devices\n\n   * Name: The page has a unique logical title in the browser tab\n   * Role: Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n4. Device OS settings\n\n   * Zoom/pinch: text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Validate your code\n\nUse [HTML validation](https://validator.w3.org/nu/) as the foundation for ensuring your page works for everyone.\n\n## Code Examples\n\n### Declare a language\n\nThis aids a screen reader in reading a content in the proper language.\n\n```html\n<html lang=\"en\"></html>\n```\n\n### Give your page a unique title\n\nEach page must have unique `<title>` in the `<head>`:\n\n* This includes single-page dynamic apps *if* the URL changes during the user journey.\n* Do not use the `|` pipe character as a divider (it is read by screen readers).\n\n```html\n<head>\r\n  <title>Page title - Website title</title>\r\n</head>\n```\n\n### Ensure users can zoom in\n\nPeople with low vision need the ability to enlarge the page on mobile and desktop.\n\n```html\n<head>\r\n  <meta\r\n    name=\"viewport\"\r\n    content=\"width=device-width, initial-scale=1\"\r\n  />\r\n</head>\n```\n\n### Structure your page with landmarks\n\nLandmarks give structure to the page for the screenreader user to be able to navigate the page by major sections.\n\nEach page must include:\n\n* [Header](https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark)\n* [Nav](https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark)\n* [Main]() TODO\n* [Footer]() TODO\n\n```html\n<header>\r\n  <!-- Contains the site title -->\r\n</header>\r\n<nav>\r\n  <!-- Primary navigation menu-->\r\n</nav>\r\n<main>\r\n  <!-- Main content -->\r\n</main>\r\n<footer>\r\n  <!-- Site map and legal info -->\r\n</footer>\n```"
        },
        {
          "label": "Footer Landmark",
          "name": "footer-landmark",
          "type": "file",
          "generalNotes": "How to test a footer landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\nGIVEN THAT I am on a page with a footer landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a interactive element in the footer I SEE focus is strongly visually indicated\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a interactive element in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the footer\n   * Tab: Links and buttons within the footer are focusable\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within footer.\n   * Doubletap: This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n   * Group: It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#example-footer\">Skip to example footer</a>\r\n<footer tabindex=\"-1\" id=\"example-footer\">\r\n  <nav aria-label=\"Site map\">\r\n    <ul>\r\n      <li><a href=\"/\">Home</a></li>\r\n      <li><a href=\"/about/\">About</a></li>\r\n      <li><a href=\"/contact/\">Contact</a></li>\r\n    </ul>\r\n  </nav>\r\n  © 2021\r\n</footer>\n```\n\n<example>\r\n    <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example footer</a>\r\n    <footer tabindex=\"-1\" id=\"destination\">\r\n    <nav aria-label=\"Site map\">\r\n        <ul>\r\n            <li><a href=\"/\">Home</a></li>\r\n            <li><a href=\"/about/\">About</a></li>\r\n            <li><a href=\"/contact/\">Contact</a></li>\r\n        </ul>\r\n    </nav>\r\n    © 2025\r\n    </footer>\r\n</example>\n\n### When you can't use semantic HTML\n\nThis custom footer requires extra attributes.\n\n```html\n<div role=\"contentinfo\" tabindex=\"-1\" id=\"example-footer\">\r\n   &copy; 2025 Site Name\r\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Typically doesn't have a name, unless there are multiple footers.\n\n### Role\n\n* Identifies itself as a footer or contentinfo landmark.\n* If a non-semantic element must be used (like a `<div>`) use `role=\"contentinfo\"`.\n\n### Group\n\n* Typically contains copyright information, navigation links, site map, and privacy statements.\n\n### Focus\n\n* Can be targeted with a skip link, but isn't focusable with the tab key\n* Use `tabindex=\"-1\"` to make the footer targetable with a skip link."
        },
        {
          "label": "Form",
          "name": "form",
          "type": "file",
          "generalNotes": "How to test a web form for accessibility.",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\nGIVEN THAT I am on a page with a web form\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a form field\n     * I SEE focus is visually indicated\n     * I SEE the focus moves in a logical order\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to inputs inside the form\n     * I HEAR If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name\n     * I HEAR It is discoverable with screenreader shortcuts as a form landmark along with its name\n     * I HEAR the screenreader switch from browse shortcuts to forms shortcuts\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on inputs inside the form\n     * I HEAR If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name\n     * I HEAR It is discoverable with screenreader shortcuts as a form landmark along with its name\n     * I HEAR the screenreader switch from browse shortcuts to forms shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/form>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Not commonly used for form entry, but useful for jumping to a form landmark.\n   * Tab: Focus moves to each form control in logical order, strong visual focus indicator.\n   * Forms mode: Enabled when screen reader lands on a form field.\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to form controls inside the form.\n   * Doubletap: Activates controls as expected.\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as a form landmark along with its name\n   * Name: If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name.\n   * Group: Groups of related fields are identified with fieldset/legend or aria attributes.\n   * Instructions: Presented before the form or inline, announced in order.\n   * Errors: Errors are announced when inputs are invalid.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/form>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Building accessible forms\n\n### Do not auto focus inputs\n\n* Automatically moving focus to an input field is very confusing for people using assistive technology.\n\n### Group inputs\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* Sign in\n* Shipping address\n* Payment information\n\n### Error handling\n\n* Individual inputs must have [programmatically described errors](https://www.magentaa11y.com/checklist-web/hint-help-error/) read by the screen reader on focus.\n* For long forms, list all errors in an [alert](https://www.magentaa11y.com/checklist-web/alert/) with links back to each invalid input on submission attempts.\n\n## UX guidance\n\n### Affordance: field width indicates the expected input\n\nForm field width should afford the user space to enter the characters that will be required. Do not arbitrarily limit the width of names, usernames, passwords or emails.\n\nPractical Examples\n\n* Middle initial should be wide enough to accommodate 1 character\n* State abbreviations should be wide enough to accommodate 2 characters\n* Zip code must be wide enough to accommodate 5 characters\n* Pin numbers reflect the number of digits expected\n\n### Why we stack inputs\n\nDo not put forms in multiple columns.\n\n* People are accustomed to scrolling vertically. There is no advantage to making the page take up less vertical space.\n* People with low vision may be using a zoom tool, enlarging the view of their screen and thus only seeing a portion of the form. If there is a column on the right side, it will be difficult to discover the fields.\n* Do not place submit buttons in a sidebar unless there is also a submit button at the bottom of the form\n\n### Why we use autocomplete\n\n* Utilizing [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/autocomplete) allows users automated assistance in filling out form field values.\n* Autocomplete is helpful for all customers leading to a speedier conversion\n* For those with motor disabilities, it eliminates the need to laboriously enter information\n\n## Code examples\n\n### Use semantic HTML\n\n```html\n<form aria-label=\"Sign in\">\r\n  <fieldset>\r\n    <legend>Sign in</legend>\r\n    <label for=\"username\">Username</label>\r\n    <input type=\"text\" id=\"username\">\r\n    <button type=\"submit\">Sign in</button>\r\n  </fieldset>\r\n</form>\n```\n\n<example>\r\n    <form aria-label=\"Sign in\">\r\n      <fieldset>\r\n        <legend>Sign in</legend>\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" id=\"username\">\r\n        <button class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"submit\">Sign in</button>\r\n      </fieldset>\r\n    </form>\r\n</example>\n\n### Credit card information\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* This form uses minimal unobtrusive masking to make the credit card number more readable. (When done poorly, masking can can cause the field to be read repeatedly as the mask refreshes)\n* Autofill attributes to help customers complete fields with less effort.\n* Using `inputmode=\"numeric\"` brings up the numeric keyboard on mobile devices making entry easier.\n\n```html\n<form aria-label=\"Payment information\">\r\n  <fieldset>\r\n    <legend>\r\n      Enter your payment information\r\n    </legend>\r\n      \r\n    <div class=\"card-number-container\">\r\n      <label for=\"card-number\">Card Number</label>\r\n        \r\n      <button type=\"button\" class=\"cc-camera secondary\">\r\n         <span class=\"hidden-visually\">Use camera to</span> \r\n         Scan\r\n         <span class=\"hidden-visually\">card number</span>\r\n      </button>\r\n        \r\n      <input type=\"text\" \r\n              name=\"cardnumber\" \r\n              id=\"card-number\" \r\n              autocomplete=\"cc-number\"\r\n              inputmode=\"numeric\"\r\n              pattern=\"[0-9]*\"\r\n              aria-describedby=\"description-card-number\"\r\n              required>\r\n\r\n      <div id=\"description-card-number\" class=\"hint secure-icon\">\r\n        Secure form protected by 8 bit encryption\r\n      </div>\r\n    </div>\r\n      \r\n    <fieldset>\r\n      <legend>\r\n        Expiration <span aria-hidden=\"true\">(MM YY)</span>\r\n      </legend>\r\n      <div class=\"expiry-container\">\r\n          \r\n        <label class=\"hidden-visually\" for=\"cc-exp-month\">Expiration Month (MM)</label>\r\n        <input type=\"text\"\r\n              maxlength=\"2\"  \r\n              name=\"ccmonth\" \r\n              id=\"cc-exp-month\"\r\n              inputmode=\"numeric\"\r\n              autocomplete=\"cc-exp-month\"\r\n              pattern=\"[0-9]*\"\r\n              required>\r\n          \r\n        <label class=\"hidden-visually\" for=\"cc-exp-year\">Expiration Year (YY)</span></label>\r\n        <input type=\"text\"\r\n              maxlength=\"2\"  \r\n              name=\"ccyear\" \r\n              id=\"cc-exp-year\"\r\n              inputmode=\"numeric\"\r\n              autocomplete=\"cc-exp-year\"\r\n              pattern=\"[0-9]*\"\r\n              required>\r\n      </div>\r\n    </fieldset>\r\n\r\n    <label for=\"cc-name\">Name on card</label>\r\n    <input type=\"text\"\r\n          name=\"ccname\" \r\n          id=\"cc-name\"\r\n          autocomplete=\"cc-name\"\r\n          maxlength=\"19\" \r\n          required>\r\n\r\n    <label for=\"cc-cvc\">Security code</label>\r\n    <input type=\"text\" \r\n            maxlength=\"5\" \r\n            name=\"cvc\" \r\n            id=\"cc-cvc\"  \r\n            autocomplete=\"cc-csc\"\r\n            inputmode=\"numeric\"\r\n            pattern=\"[0-9]*\"\r\n            aria-describedby=\"description-cc-cvc\"\r\n            required>\r\n    <div id=\"description-cc-cvc\" class=\"hint\">\r\n      <button type=\"button\" class=\"inline-link\">What's a security code?</button>\r\n          \r\n    </div>\r\n  </fieldset>\r\n</form>\n```\n\n<example>\r\n    <form aria-label=\"Payment information\">\r\n        <fieldset>\r\n            <legend>Enter your payment information</legend>\r\n            <div class=\"card-number-container\">\r\n                <label for=\"card-number\">Card Number</label>\r\n                <button type=\"button\" class=\"cc-camera secondary\">\r\n                   <span class=\"hidden-visually\">Use camera to</span> \r\n                   Scan\r\n                   <span class=\"hidden-visually\">card number</span>\r\n                </button>\r\n                <input type=\"text\" \r\n                       name=\"cardnumber\" \r\n                       id=\"card-number\" \r\n                       autocomplete=\"cc-number\"\r\n                       inputmode=\"numeric\"\r\n                       pattern=\"[0-9]*\"\r\n                       aria-describedby=\"description-card-number\"\r\n                       required>\r\n                <div id=\"description-card-number\" class=\"hint secure-icon\">\r\n                  Secure form protected by 8 bit encryption\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>Expiration <span aria-hidden=\"true\">(MM YY)</span></legend>\r\n            <div class=\"expiry-container\">\r\n                <label class=\"hidden-visually\" for=\"cc-exp-month\">Expiration Month (MM)</label>\r\n                <input type=\"text\"\r\n                       maxlength=\"2\"  \r\n                       name=\"ccmonth\" \r\n                       id=\"cc-exp-month\"\r\n                       inputmode=\"numeric\"\r\n                       autocomplete=\"cc-exp-month\"\r\n                       pattern=\"[0-9]*\"\r\n                       required>\r\n                <label class=\"hidden-visually\" for=\"cc-exp-year\">Expiration Year (YY)</label>\r\n                <input type=\"text\"\r\n                      maxlength=\"2\"  \r\n                      name=\"ccyear\" \r\n                      id=\"cc-exp-year\"\r\n                      inputmode=\"numeric\"\r\n                      autocomplete=\"cc-exp-year\"\r\n                      pattern=\"[0-9]*\"\r\n                      required>\r\n            </div>\r\n        </fieldset>\r\n        <label for=\"cc-name\">Name on card</label>\r\n        <input type=\"text\"  \r\n               name=\"ccname\" \r\n               id=\"cc-name\" \r\n               autocomplete=\"cc-name\" \r\n               maxlength=\"19\" \r\n               required>\r\n        <label for=\"cc-cvc\">Security code</label>\r\n        <input type=\"text\" \r\n               maxlength=\"5\" \r\n               name=\"cvc\" \r\n               id=\"cc-cvc\"  \r\n               autocomplete=\"cc-csc\"\r\n               inputmode=\"numeric\"\r\n               pattern=\"[0-9]*\"\r\n               aria-describedby=\"description-cc-cvc\"\r\n               required>\r\n        <div id=\"description-cc-cvc\" class=\"hint\">\r\n            <button  type=\"button\" class=\"Magentaa11y-button Magentaa11y-button--primary inline-link\">What's a security code?</button>\r\n        </div>\r\n    </form>\r\n</example>\n\n### Shipping Information\n\n```html\n<form aria-label=\"Shipping information\">\r\n  <fieldset>\r\n    <legend>\r\n      Shipping information\r\n    </legend>\r\n      \r\n    <label for=\"address-line1\">\r\n      Address line 1\r\n    </label>\r\n    <input type=\"text\" \r\n            id=\"address-line1\"\r\n            autocomplete=\"address-line1\">\r\n      \r\n    <label for=\"address-line2\">\r\n      Address line 2\r\n    </label>\r\n    <input type=\"text\" \r\n            id=\"address-line2\"\r\n            autocomplete=\"address-line2\">\r\n      \r\n    <label for=\"address-level2\">\r\n      City\r\n    </label>\r\n    <input type=\"text\" \r\n            id=\"address-level2\"\r\n            autocomplete=\"address-level2\">\r\n    <label for=\"address-level1\">\r\n        \r\n      State\r\n    </label>\r\n    <select id=\"address-level1\" \r\n            autocomplete=\"address-level1\">\r\n      <option value=\"\" selected disabled>Choose a state</option>\r\n      <option value=\"AL\">Alabama</option>\r\n      <option value=\"AK\">Alaska</option>\r\n      <option value=\"AZ\">Arizona</option>\r\n      <option value=\"AR\">Arkansas</option>\r\n      <option value=\"CA\">California</option>\r\n      <option value=\"CO\">Colorado</option>\r\n      <option value=\"CT\">Connecticut</option>\r\n      <option value=\"DE\">Delaware</option>\r\n      <option value=\"DC\">District Of Columbia</option>\r\n      <option value=\"FL\">Florida</option>\r\n      <option value=\"GA\">Georgia</option>\r\n      <option value=\"HI\">Hawaii</option>\r\n      <option value=\"ID\">Idaho</option>\r\n      <option value=\"IL\">Illinois</option>\r\n      <option value=\"IN\">Indiana</option>\r\n      <option value=\"IA\">Iowa</option>\r\n      <option value=\"KS\">Kansas</option>\r\n      <option value=\"KY\">Kentucky</option>\r\n      <option value=\"LA\">Louisiana</option>\r\n      <option value=\"ME\">Maine</option>\r\n      <option value=\"MD\">Maryland</option>\r\n      <option value=\"MA\">Massachusetts</option>\r\n      <option value=\"MI\">Michigan</option>\r\n      <option value=\"MN\">Minnesota</option>\r\n      <option value=\"MS\">Mississippi</option>\r\n      <option value=\"MO\">Missouri</option>\r\n      <option value=\"MT\">Montana</option>\r\n      <option value=\"NE\">Nebraska</option>\r\n      <option value=\"NV\">Nevada</option>\r\n      <option value=\"NH\">New Hampshire</option>\r\n      <option value=\"NJ\">New Jersey</option>\r\n      <option value=\"NM\">New Mexico</option>\r\n      <option value=\"NY\">New York</option>\r\n      <option value=\"NC\">North Carolina</option>\r\n      <option value=\"ND\">North Dakota</option>\r\n      <option value=\"OH\">Ohio</option>\r\n      <option value=\"OK\">Oklahoma</option>\r\n      <option value=\"OR\">Oregon</option>\r\n      <option value=\"PA\">Pennsylvania</option>\r\n      <option value=\"RI\">Rhode Island</option>\r\n      <option value=\"SC\">South Carolina</option>\r\n      <option value=\"SD\">South Dakota</option>\r\n      <option value=\"TN\">Tennessee</option>\r\n      <option value=\"TX\">Texas</option>\r\n      <option value=\"UT\">Utah</option>\r\n      <option value=\"VT\">Vermont</option>\r\n      <option value=\"VA\">Virginia</option>\r\n      <option value=\"WA\">Washington</option>\r\n      <option value=\"WV\">West Virginia</option>\r\n      <option value=\"WI\">Wisconsin</option>\r\n      <option value=\"WY\">Wyoming</option>\r\n    </select>\r\n      \r\n    <label for=\"postal-code\">\r\n      Zip postal code\r\n    </label>\r\n    <input type=\"text\" \r\n            id=\"postal-code\"\r\n            inputmode=\"numeric\"\r\n            pattern=\"[0-9]*\"\r\n            autocomplete=\"postal-code\"\r\n            maxlength=\"5\">\r\n  </fieldset>\r\n</form>\n```\n\n<example>\r\n    <form aria-label=\"Shipping information\">\r\n      <fieldset>\r\n        <legend>\r\n          Shipping information\r\n        </legend>\r\n        <label for=\"address-line1\">\r\n          Address line 1\r\n        </label>\r\n        <input type=\"text\" \r\n                id=\"address-line1\"\r\n                autocomplete=\"address-line1\">\r\n        <label for=\"address-line2\">\r\n          Address line 2\r\n        </label>\r\n        <input type=\"text\" \r\n                id=\"address-line2\"\r\n                autocomplete=\"address-line2\">\r\n        <label for=\"address-level2\">\r\n          City\r\n        </label>\r\n        <input type=\"text\" \r\n                id=\"address-level2\"\r\n                autocomplete=\"address-level2\">\r\n        <label for=\"address-level1\">\r\n          State\r\n        </label>\r\n        <select id=\"address-level1\" \r\n                autocomplete=\"address-level1\">\r\n          <option value=\"\" selected disabled>Choose a state</option>\r\n          <option value=\"AL\">Alabama</option>\r\n          <option value=\"AK\">Alaska</option>\r\n          <option value=\"AZ\">Arizona</option>\r\n          <option value=\"AR\">Arkansas</option>\r\n          <option value=\"CA\">California</option>\r\n          <option value=\"CO\">Colorado</option>\r\n          <option value=\"CT\">Connecticut</option>\r\n          <option value=\"DE\">Delaware</option>\r\n          <option value=\"DC\">District Of Columbia</option>\r\n          <option value=\"FL\">Florida</option>\r\n          <option value=\"GA\">Georgia</option>\r\n          <option value=\"HI\">Hawaii</option>\r\n          <option value=\"ID\">Idaho</option>\r\n          <option value=\"IL\">Illinois</option>\r\n          <option value=\"IN\">Indiana</option>\r\n          <option value=\"IA\">Iowa</option>\r\n          <option value=\"KS\">Kansas</option>\r\n          <option value=\"KY\">Kentucky</option>\r\n          <option value=\"LA\">Louisiana</option>\r\n          <option value=\"ME\">Maine</option>\r\n          <option value=\"MD\">Maryland</option>\r\n          <option value=\"MA\">Massachusetts</option>\r\n          <option value=\"MI\">Michigan</option>\r\n          <option value=\"MN\">Minnesota</option>\r\n          <option value=\"MS\">Mississippi</option>\r\n          <option value=\"MO\">Missouri</option>\r\n          <option value=\"MT\">Montana</option>\r\n          <option value=\"NE\">Nebraska</option>\r\n          <option value=\"NV\">Nevada</option>\r\n          <option value=\"NH\">New Hampshire</option>\r\n          <option value=\"NJ\">New Jersey</option>\r\n          <option value=\"NM\">New Mexico</option>\r\n          <option value=\"NY\">New York</option>\r\n          <option value=\"NC\">North Carolina</option>\r\n          <option value=\"ND\">North Dakota</option>\r\n          <option value=\"OH\">Ohio</option>\r\n          <option value=\"OK\">Oklahoma</option>\r\n          <option value=\"OR\">Oregon</option>\r\n          <option value=\"PA\">Pennsylvania</option>\r\n          <option value=\"RI\">Rhode Island</option>\r\n          <option value=\"SC\">South Carolina</option>\r\n          <option value=\"SD\">South Dakota</option>\r\n          <option value=\"TN\">Tennessee</option>\r\n          <option value=\"TX\">Texas</option>\r\n          <option value=\"UT\">Utah</option>\r\n          <option value=\"VT\">Vermont</option>\r\n          <option value=\"VA\">Virginia</option>\r\n          <option value=\"WA\">Washington</option>\r\n          <option value=\"WV\">West Virginia</option>\r\n          <option value=\"WI\">Wisconsin</option>\r\n          <option value=\"WY\">Wyoming</option>\r\n        </select>\r\n        <label for=\"postal-code\">\r\n          Zip postal code\r\n        </label>\r\n        <input type=\"text\" \r\n                id=\"postal-code\"\r\n                inputmode=\"numeric\"\r\n                pattern=\"[0-9]*\"\r\n                autocomplete=\"postal-code\"\r\n                maxlength=\"5\">\r\n      </fieldset>\r\n    </form>\r\n</example>\n\n### Contact Form\n\n```html\n<form aria-label=\"Contact us\">\r\n  <fieldset>\r\n    <legend>\r\n      Preferred contact method\r\n    </legend>\r\n  \r\n    <input type=\"radio\" name=\"method\" id=\"contact-email\" checked>\r\n    <label for=\"contact-email\">Email</label>\r\n  \r\n    <input type=\"radio\" name=\"method\" id=\"contact-sms\">\r\n    <label for=\"contact-sms\">SMS text</label>\r\n  \r\n    <input type=\"radio\" name=\"method\" id=\"contact-phone\">\r\n    <label for=\"contact-phone\">Phone</label>\r\n  </fieldset>\r\n\r\n  <fieldset>\r\n    <legend>\r\n      Your information\r\n    </legend>\r\n\r\n    <label for=\"email\">\r\n      Email address\r\n    </label>\r\n    <input id=\"email\"\r\n           type=\"email\"\r\n           autocomplete=\"email\"\r\n           spellcheck=\"false\"\r\n           aria-describedby=\"hint-email\">\r\n    <div class=\"hint\" id=\"hint-email\">\r\n      We’ll never sell or share your information\r\n    </div>\r\n\r\n    <label for=\"phone\">\r\n      Phone number\r\n    </label>\r\n    <input  type=\"tel\"\r\n            id=\"phone\"\r\n            inputmode=\"numeric\"\r\n            autocomplete=\"tel\"\r\n            aria-describedby=\"hint-phone\">\r\n    <div class=\"hint\" id=\"hint-phone\">\r\n      Format: 573-268-9692\r\n    </div>\r\n\r\n    <label for=\"message\">\r\n      Your message\r\n    </label>\r\n    <textarea id=\"message\"></textarea> \r\n      \r\n\r\n  </fieldset>\r\n</form>\n```\n\n<example>\r\n    <form aria-label=\"Contact us\">\r\n          <fieldset>\r\n            <legend>\r\n              Preferred contact method\r\n            </legend>\r\n            <input type=\"radio\" name=\"method\" id=\"contact-email\" checked>\r\n            <label for=\"contact-email\">Email</label>\r\n            <input type=\"radio\" name=\"method\" id=\"contact-sms\">\r\n            <label for=\"contact-sms\">SMS text</label>\r\n            <input type=\"radio\" name=\"method\" id=\"contact-phone\">\r\n            <label for=\"contact-phone\">Phone</label>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>\r\n              Your information\r\n            </legend>\r\n            <label for=\"email\">\r\n              Email address\r\n            </label>\r\n            <input id=\"email\"\r\n                   type=\"email\"\r\n                   autocomplete=\"email\"\r\n                   spellcheck=\"false\"\r\n                   aria-describedby=\"hint-email\">\r\n            <div class=\"hint\" id=\"hint-email\">\r\n              We’ll never sell or share your information\r\n            </div>\r\n            <label for=\"phone\">\r\n              Phone number\r\n            </label>\r\n            <input  type=\"tel\"\r\n                    id=\"phone\"\r\n                    inputmode=\"numeric\"\r\n                    autocomplete=\"tel\"\r\n                    aria-describedby=\"hint-phone\">\r\n            <div class=\"hint\" id=\"hint-phone\">\r\n              Format: 573-268-9692\r\n            </div>\r\n            <label for=\"message\">\r\n              Your message\r\n            </label>\r\n            <textarea id=\"message\"></textarea>\r\n          </fieldset>\r\n        </form>\r\n</example>\n\n## Output from inputs\n\n* Screenreader support varies\n* Output can be used for a dynamic content that changes based on user inputs (example: a calculator).\n* Alternatively, using a custom element with `role=”status”` will achieve more predictable results.\n\n```html\n<form oninput=\"result.value=parseInt(rent.value)+parseInt(utilities.value)\">\r\n  <fieldset>\r\n    <legend>\r\n      Calculate monthly expenses\r\n    </legend>\r\n    \r\n    <label for=\"rent\">Monthly rent</label>\r\n    <input type=\"text\" id=\"rent\" inputmode=\"numeric\" value=\"2500\" maxlength=\"4\">\r\n\r\n    <label for=\"utilities\">Monthly utilities</label>\r\n    <input type=\"text\" id=\"utilities\" inputmode=\"numeric\" value=\"500\" maxlength=\"4\">\r\n    \r\n    <label for=\"result\">Total</label>\r\n    <input \r\n      readonly \r\n      type=\"text\"\r\n      id=\"result\"\r\n      inputmode=\"numeric\" \r\n      value=\"3000\" \r\n      maxlength=\"6\">\r\n  </fieldset>\r\n</form>\n```\n\n## Further Reading\n\n* [WebAIM Accessible Form validation and error recovery](https://webaim.org/techniques/formvalidation/)"
        },
        {
          "label": "Header Landmark",
          "name": "header-landmark",
          "type": "file",
          "generalNotes": "How to test a header landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to enter the web browser window\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the header\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the header or navigation\n   * Tab: Nothing, headers are not focusable unless they are actionable\n   * Arrow-keys: headers are browsed\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves directly to the header or navigation\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as header/banner landmark\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## General\n\n* There must only be a singular header/banner element on the page.\n* Contains the site title and typically the primary navigation.\n\n## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<header id=\"example-header\">\r\n  <a href=\"#nav-example\">Skip to navigation</a>\r\n  <a href=\"#\">Not the navigation</a>\r\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\r\n    <ul>\r\n      <li><a href=\"/\">Home</a></li>\r\n      <li><a href=\"/about/\">About</a></li>\r\n      <li><a href=\"/contact/\">Contact</a></li>\r\n      <li><button>Sign in</button></li>\r\n    </ul>\r\n  </nav>\r\n</header>\n```\n\n<example>\r\n   <header aria-label=\"example\">\r\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example navigation</a>\r\n   <a href=\"#\">Not the navigation</a>\r\n   <nav tabindex=\"-1\" class=\"nav-example\" id=\"destination\">\r\n      <ul>\r\n         <li><a href=\"/\">Home</a></li>\r\n         <li><a href=\"/about/\">About</a></li>\r\n         <li><a href=\"/contact/\">Contact</a></li>\r\n         <li><button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-haspopup=\"true\">Sign in</button></li>\r\n      </ul>\r\n   </nav>\r\n   </header>\r\n</example>\n\n### When You Can’t Use Semantic HTML\n\nThis custom header requires extra attributes.\n\n```html\n<div role=\"banner\" tabindex=\"-1\" id=\"example-header\">\r\n  <a href=\"/\">Website name</a>\r\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page.\n\n### Role\n\n* Identifies itself as a header or banner landmark.\n* If a non-semantic element must be used (like a `<div>`), use `role=\"banner\"` to make the element discoverable.\n\n### Group\n\n* Contains the site title and typically the primary navigation.\n\n### Focus\n\n* Can be targeted with a skip link, but the skip link will typically be labeled “skip to navigation”\n* Use `tabindex=\"-1\"` to make the header targetable with a skip link.\n* The `<header>` itself isn’t focusable with the tab key."
        },
        {
          "label": "Main Landmark",
          "name": "main-landmark",
          "type": "file",
          "generalNotes": "How to test a main landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a main landmark\n\nGIVEN THAT I am on a page with a main landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse the main content I SEE the screen scroll through the page\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse the main content\n     * I HEAR It is discoverable with screenreader shortcuts as main landmark\n     * I HEAR It contains the content portion of the page starting with the H1\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to elements in the header\n     * I HEAR It is discoverable with screenreader shortcuts as main landmark\n     * I HEAR It contains the content portion of the page starting with the H1\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/main-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a main landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the main content area\n   * Tab: Links and buttons within the main area are focusable\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within main area\n\n3. Listen to screenreader output on all devices\n\n   * Role: It is discoverable with screenreader shortcuts as main landmark\n   * Group: It contains the content portion of the page starting with the H1\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/main-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#example-main\">Skip to main content</a>\r\n<a href=\"#\">Not main content</a>\r\n<main tabindex=\"-1\" id=\"example-main\" aria-label=\"example\">\r\n  <h1>About main content</h1>\r\n  <p>The main content of the page belongs here.</p>\r\n  <p><a href=\"#\">Focus moves here next</a></p>\r\n</main>\n```\n\n<example>\r\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to main content</a>\r\n   <a href=\"#\">Not main content</a>\r\n   <main tabindex=\"-1\" id=\"destination\" aria-label=\"example\">\r\n      <h1>About main content</h1>\r\n      <p>The main content of the page belongs here.</p>\r\n      <p><a href=\"#\">Focus moves here next</a></p>\r\n   </main>\r\n</example>\n\n### When you can't use semantic HTML\n\nThis custom main element requires extra attributes.\n\n```html\n<div role=\"main\" tabindex=\"-1\" id=\"example-main\"> \r\n  <h1>About our company</h1>\r\n  <p>The main content of the page belongs here.</p>\r\n</div>\n```\n\n<example>\r\n   <div role=\"main\" tabindex=\"-1\" id=\"example-main\"> \r\n      <h1>About our company</h1>\r\n      <p>The main content of the page belongs here.</p>\r\n   </div>\r\n</example>\n\n## Developer notes\n\n### Name\n\n* Typically doesn't have a name other than its role.\n* If a page has multiple `<main>` landmarks, then each should have a unique programmatic label.\n  * Use `aria-label=\"Content name\"` when there is not a visible content label.\n  * Use `aria-labelledby=\"content-id\"` when the content label is a visible heading or existing page text.\n\n### Role\n\n* Identifies itself as a main landmark\n* If a non-semantic element must be used (like a `<div>`) use `role=\"main\"`.\n\n### Group\n\n* Must contain the main content of the page.\n* Ideally appears only once per Web page.\n\n### Focus\n\n* Can be targeted with a skip link, but isn't focusable with the tab key\n* Use `tabindex=\"-1\"` to make the main targetable with a skip link.\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)"
        },
        {
          "label": "Navigation Landmark",
          "name": "navigation-landmark",
          "type": "file",
          "generalNotes": "How to test a navigation landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\nGIVEN THAT I am on a page with a navigation landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the arrow keys to browse the navigation menu, I SEE the screen scrolls through the page.\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse the navigation menu\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the navigation\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the nav element\n   * Tab: Focus moves to Links and buttons within the nav\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within the nav\n   * Doubletap: This typically activates most elements\n3. Listen to screenreader output on all devices\n   * **Name**: It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n   * **Role**: It is discoverable with screenreader shortcuts as a navigation landmark\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#nav-example\">Skip to example navigation</a>\r\n<a href=\"#\">Not the navigation</a>\r\n<nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\r\n  <ul>\r\n    <li><a href=\"/\">Home</a></li>\r\n    <li><a href=\"/about/\">About</a></li>\r\n    <li><a href=\"/contact/\">Contact</a></li>\r\n    <li><button aria-haspopup=\"true\">Sign in</button></li>\r\n  </ul>\r\n</nav>\n```\n\n<example>\r\n  <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example navigation</a>\r\n  <a href=\"#\">Not the navigation</a>\r\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"destination\">\r\n    <ul>\r\n      <li><a href=\"/\">Home</a></li>\r\n      <li><a href=\"/about/\">About</a></li>\r\n      <li><a href=\"/contact/\">Contact</a></li>\r\n      <li><button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-haspopup=\"true\">Sign in</button></li>\r\n    </ul>\r\n  </nav>\r\n</example>\n\n### Keep custom menus as simple as possible\n\nUse semantic elements where possible.\n\n```html\n<nav id=\"example-expanding-nav\" class=\"menu\">\r\n  <ul>\r\n    <li>\r\n      <a class=\"home\" href=\"/\">\r\n        Home\r\n      </a>\r\n    </li>\r\n    <li class=\"expander-group MagentaA11y-accordion\">\r\n      <h3 className=\"MagentaA11y-accordion__heading\">\r\n        <button className=\"MagentaA11y-accordion__headline\" data-fn=\"toggleAccordionState\" type=\"button\" class=\"menu expander-toggle\" aria-expanded=\"false\" aria-haspopup=\"true\">\r\n        Menu\r\n        </button>\r\n      </h3>\r\n      <ul className=\"MagentaA11y-accordion__body\">\r\n        <li>\r\n          <a href=\"/about/\">About</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/contact\">Contact</a>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n</nav>\n```\n\n<example>\r\n  <nav id=\"example-expanding-nav\" class=\"menu\">\r\n    <ul>\r\n      <li>\r\n        <a class=\"home\" href=\"/\">\r\n          Home\r\n        </a>\r\n      </li>\r\n      <li class=\"expander-group MagentaA11y-accordion\">\r\n        <h3 className=\"MagentaA11y-accordion__heading\">\r\n          <button className=\"MagentaA11y-accordion__headline\" data-fn=\"toggleAccordionState\" type=\"button\" class=\"menu expander-toggle\" aria-expanded=\"false\" aria-haspopup=\"true\">\r\n          Menu\r\n          </button>\r\n        </h3>\r\n        <ul className=\"MagentaA11y-accordion__body\">\r\n          <li>\r\n            <a href=\"/about/\">About</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/contact\">Contact</a>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n</example>\n\n### When you can’t use semantic HTML\n\nThis custom navigation requires extra attributes.\n\n```html\n<div role=\"navigation\" tabindex=\"-1\" id=\"example-navigation\">\r\n  <ul>\r\n    <li><a href=\"/\">Website name</a></li>\r\n    <li><a href=\"/about/\">About</a></li>\r\n    <li><a href=\"/contact/\">Contact</a></li>\r\n  </ul>\r\n</div>\n```\n\n### Multiple navigation elements\n\nWhen there is more than one navigation element, they must have a name.\n\n```html\n<nav tabindex=\"-1\" id=\"nav\" aria-label=\"Main\">\r\n  <ul>\r\n    <li><a href=\"/\">Home</a></li>\r\n    <li><a href=\"/about/\">About</a></li>\r\n    <li><a href=\"/contact/\">Contact</a></li>\r\n  </ul>\r\n</nav>\r\n\r\n<h2 id=\"cat-heading\">Categories</h2>\r\n<nav id=\"cat-nav\" aria-labelledby=\"#cat-heading\">\r\n  <ul>\r\n    <li><a href=\"/alpha/\">Alpha</a></li>\r\n    <li><a href=\"/bravo/\">Bravo</a></li>\r\n    <li><a href=\"/charlie/\">Charlie</a></li>\r\n  </ul>\r\n</nav>\r\n\r\n<footer>\r\n  <nav aria-label=\"Site map\">\r\n    <ul>\r\n      <li><a href=\"/\">Home</a></li>\r\n      <li><a href=\"/about/\">About</a></li>\r\n      <li><a href=\"/contact/\">Contact</a></li>\r\n    </ul>\r\n  </nav>\r\n</footer>\n```\n\n## Developer Notes\n\n### Name\n\n* If there are multiple `<nav>` elements (e.g., site menu, pagination, categories), it may be helpful to name them.\n  * Use `aria-label=\"Menu name\"` when there is no visible navigation title.\n  * Use `aria-describedby=\"menu-name-id\"` when the navigation title is a visible heading.\n\n### Role\n\n* Identifies itself as a navigation landmark.\n* Avoid adding ‘menu’ or ‘option’ roles with arrow key event listeners unless building an actual application like Gmail.\n\n### Focus\n\n* When skip links are used, add `tabindex=\"-1\"` so focus can move to the `nav` element, not just bring it into view.\n\n## Further Reading\n\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Single Page Application",
          "name": "single-page-application",
          "type": "file",
          "generalNotes": "How to test a single page application",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/single-page-applicationk>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/single-page-applicationk>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Skip Link",
          "name": "skip-link",
          "type": "file",
          "generalNotes": "How to test a skip link",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a skip link\n\nGIVEN THAT I am on a page with a skip link\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a skip link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my focus moves directly to the targeted element\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a skip link\n     * I HEAR it describes which landmark it's targeting\n     * I HEAR it identifies itself as a link\n     * I HEAR it is typically the first element in the page\n   * THEN when I use the enter key to activate the link I HEAR my focus moves directly to the targeted element\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a skip link\n     * I HEAR it describes which landmark it's targeting\n     * I HEAR it identifies itself as a link\n     * I HEAR it is typically the first element in the page\n   * THEN when I doubletap with the link in focus I HEAR my focus moves directly to the targeted element\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/skip-link>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a skip link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to the skip link\n   * Enter: Activates the link, focus/tabindex moves directly to the targeted element\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the skip link\n   * Doubletap: Activates the link, focus/tabindex moves directly to the targeted element\n\n3. Listen to screenreader output on all devices\n\n   * Name: It describes which landmark it's targeting\n   * Role: It identifies itself as a link\n   * Group: It is typically the first element in the page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/skip-link>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n```html\n   <a href=\"#example-main\">Skip to main content</a>\r\n   <a href=\"#\">Not main content</a>\r\n   <main tabindex=\"-1\" id=\"example-main\">\r\n      <h1>About main content</h1>\r\n      <p>The main content of the page belongs here.</p>\r\n      <p><a href=\"#\">Focus moves here next</a></p>\r\n   </main>\n```\n\n<example>\r\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to main content</a>\r\n   <a href=\"#\">Not main content</a>\r\n   <main tabindex=\"-1\" id=\"destination\">\r\n      <h1>About main content</h1>\r\n      <p>The main content of the page belongs here.</p>\r\n      <p><a href=\"#\">Focus moves here next</a></p>\r\n   </main>\r\n</example>\n\n## Developer Notes\n\n### Group\n\n* Skip links must be the first perceivable elements in the page\n\n### Focus\n\n* Landmarks and other elements can be targeted with a skip link, but aren't individually focusable with the tab key\n* Use `tabindex=\"-1\"` to make the target focusable with a skip link."
        }
      ]
    }
  ],
  "native": [
    {
      "label": "Controls",
      "name": "controls",
      "children": [
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a button\n\nGIVEN THAT I am on a screen with a button\n\n1. Scenario: Test keyboard actions\n   * WHEN I swipe to navigate to the button\n     * THEN the focus should move to the button\n     * AND the button's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the button\n     * THEN the button should be activated\n\n2. * WHEN I swipe to navigate to the button\n\n   * THEN the focus should move to the button\n\n   * AND the button's name, role, and state (if applicable) should be expressed\n\n   * WHEN I double-tap the button\n\n   * THEN the button should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose and match the visible label\n     * AND its role should be identified as a button in iOS and as a button or \"double tap to activate\" in Android\n     * AND its visible label should be grouped or associated with the button in a single swipe\n     * AND its state (DISABLED/DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text on the button should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/button>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a button\n\n1. Test keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the button\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the button in a single swipe\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/button>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\r\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/native/button/buttonAndroidTalkback.webm\" type=\"video/webm\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control\n* Programmatic name matches the visible text label (if any)\n\n#### Android Views\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n\n#### Jetpack Compose\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n***\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n#### Android Views\n\n* Standard button or ImageButton\n\n#### Jetpack Compose\n\n* Standard `Button` composable\n\n***\n\n### Groupings\n\n* Visible label can be grouped with button (if applicable) to provide a programmatic name for the button and not duplicate the name announcement\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n***\n\n### State\n\n#### Android Views\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled:  `Button(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n***\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading), except when changing between navigation tabs\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n#### Android Views\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n***\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n#### Android Views\n\n* step 1: Create an accessibility service\n* step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n* step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n#### Jetpack Compose\n\n* List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n* Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n***\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from \"button\" in the label\n  * **Note:** When the user has hints turned on in settings, \"double tap to activate\" will announce at the end of most interactive controls.  Testing should be done with hints turned on to ensure the user understands a control is interactive by hearing either \"button\" or \"double tap to activate\" or both.  Announcements on Android devices vary slightly due to manufacturer.\n* \"Label, button, double tap to activate\"\n* \"Label, (other content in cell), button, double tap to activate\" (grouping)\n* \"Label, button, selected, double tap to activate\" (selected state)\n* \"Label, disabled\" (disabled state)",
          "iosDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control.\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note**: Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n* When naming a button, do not add “button” to the programmatic name (label). Assigning “Button” as the role will handle this announcement.\n  * **Incorrect announcement**: “Submit button, Button”\n  * **Correct announcement**: “Submit, Button”\n\n#### UIKit\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The button’s title will overwrite the button’s `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the button’s `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label’s `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `AccessibilityEnabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`.\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n***\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### UIKit\n\n* Use `UIButton`\n* If necessary, set `accessibilityTraits` to `.button`.\n\n#### SwiftUI\n\n* Use native `Button` view\n* If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as `Button`.\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n***\n\n### Groupings\n\nGroup visible label with button, if applicable, to provide a programmatic name for the button and not duplicate the name announcement\n\n#### UIKit\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to true for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n* If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n  * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n* Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n* Use `shouldGroupAccessibilityChildre`n to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### SwiftUI\n\n* Use view `modifier accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n***\n\n### State\n\n#### UIKit\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is “Dimmed”.\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### SwiftUI\n\n* For selected, use `accessibilityAddTraits(.isSelected)`.\n* For disabled, use view modifier `disabled()`.\n\n***\n\n### Focus\n\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading, except when changing between navigation tabs\n* When a menu, picker, or modal is closed, the focus should return to the triggering element.\n\n#### UIKit\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### SwiftUI\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n***\n\n### Announcement examples\n\nOptions for announcements below depend on implementation. Announcement order can vary.\n\n* \"Label, button\"\n* \"Label, (other content in cell), button\" (grouping)\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)\n\n***",
          "developerNotes": ""
        },
        {
          "label": "Captcha",
          "name": "captcha",
          "type": "file",
          "generalNotes": "How to test a captcha",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a captcha\n\nGIVEN THAT I am on a screen with a captcha\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses Tab, Arrow Keys, or Ctrl+Tab\n     * THEN the focus must visibly move to the captcha button\n   * WHEN the user presses Spacebar and or Enter\n     * THEN the button is activated\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to interactive elements\n     * THEN focus must move sequentially to the captcha button\n     * AND the screen reader must announce the state of the captcha button (e.g., enabled or disabled)\n   * WHEN the user performs a double-tap gesture\n     * THEN the captcha button must activate\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose, captcha\n       * AND its role should be identified as a button or image button in iOS and as a button or \"double tap to activate\" in Android\n       * AND its state (DISABLED/DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN a user adjusts text resizing settings up to 200%\n     * THEN text resizing does not apply to the captcha functionality (n/a)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/captcha>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a captcha\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the captcha button\n   * Spacebar: Activates the captcha on iOS and Android\n   * Enter: Activates the button on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the interactive elements, expresses its state, if applicable\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (ex: \"Captcha\")\n   * Role: Identifies itself as a button or image button, if interactive\n   * Group: n/a\n   * State: Expresses its state (disabled/dimmed)\n\n4. Device OS Settings\n\n   * Text resize: n/a\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/captcha>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "* There are several experiences for Captcha:\n  1. A non-interactive image in a table row, where the whole table row acts like a button.\n  2. A single interactive element, like an image button\n  3. An audio challenge as an equivalent experience to the image challenge\n* When selecting the type of Captcha, do not limit the options to only <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html#dfn-cognitive-function-test\"> cognitive function tests</a> (e.g. remembering or transcribing a word, or recognizing a picture the website provided). When possible, leverage <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html#examples\"> recommended techniques recommended by the W3C</a> such as email link authentication, 3rd party authentication, or 2 factor authentication.\n* Captcha is not common in apps, as there are other options for authentication\n\n### Name\n\n* Experiences (refer to number above):\n  1. Alt text on the image that describes its purpose.\n  2. Name describes the purpose of the control and matches any visible text in image\n  3. Programmatic name of each interactive component in audio challenge is announced\n\n#### **Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate any visible label with the control\n\n#### **Jetpack Compose**\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Experiences (refer to number above):\n  1. Identifies as an image\n  2. Identifies as an image button\n  3. Each interactive component in audio challenge identifies as a button or edit box\n\n#### **Android Views**\n\n* When not using native controls (ie, custom controls), roles will need to be manually coded.\n* Standard button or ImageButton\n\n#### **Jetpack Compose**\n\n* Standard `Button` composable\n\n### Groupings\n\n#### **Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### **Jetpack Compose**\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Experiences (refer to number above):\n  1. If grouped in table row, it's possible for the whole row to have a disabled state, or the captcha button disabled separately\n  2. Image button can have a disabled state (disabled)\n  3. Buttons in audio challenge can have a disabled state (disabled)\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n#### **Jetpack Compose**\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled: `Button(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Experiences (refer to number above):\n  1. Focus is on the whole table row. There should be no focus on any single element, if the whole table row is grouped together, as long as there is only one interactive element per row.\n  2. The image button receives focus by swipe or touch\n  3. Each element in audio challenge receives focus by swipe or touch. User is confined inside a modal, if presented\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Jetpack Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n#### **Android Views**\n\n* step 1: Create an accessibility service\n* step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n* step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n#### **Jetpack Compose**\n\n* List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n* Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`",
          "iosDeveloperNotes": "* Here are just a few experiences for Captcha:\n  1. A non-interactive image in a table row, where the whole table row acts like a button.\n  2. A single interactive element, like an image button\n  3. An audio challenge as an equivalent experience to the image challenge\n* When selecting the type of Captcha, do not limit the options to only <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html#dfn-cognitive-function-test\">cognitive function tests</a> (e.g. remembering or transcribing a word, or recognizing a picture the website provided). When possible, leverage <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html#examples\">recommended techniques recommended by the W3C</a> such as email link authentication, 3rd party authentication, or 2 factor authentication.\n* Captcha is not common in native apps, as there are other options for authentication\n\n### Name\n\n* Experiences (refer to number above):\n  1. Alt text on the image that describes its purpose.\n  2. Name describes the purpose of the control and matches any visible text in image\n  3. Programmatic name of each interactive component in audio challenge is announced\n\n#### **UIKit**\n\n* Programmatic name describes the purpose of the control\n* You can programmatically set the visible label with `setTitle()`\n  * The button’s title will overwrite the button’s `accessibilityLabel`\n* If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector\n\n#### **SwiftUI**\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`\n\n### Role\n\n* Experiences (refer to number above):\n  1. Identifies as an image\n  2. Identifies as an image button\n  3. Each interactive component in audio challenge identifies as a button or text field\n\n#### **UIKit**\n\n* Use `UIButton`\n* If necessary, set `accessibilityTraits` to `.button`\n\n#### **SwiftUI**\n\n* Use native `Button` view\n* If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as Button\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits\n\n### Groupings\n\n#### **UIKit**\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* Experiences (refer to number above):\n  1. If grouped in table row, it's possible for the whole row to have a dimmed/disabled state, or the captcha button disabled separately\n  2. Image button can have a disabled state (dimmed)\n  3. Buttons in audio challenge can have a disabled state (dimmed)\n\n#### **UIKit**\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### **SwiftUI**\n\n* For selected, use `accessibilityAddTraits(.isSelected)`\n* For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Experiences (refer to number above):\n  1. Focus is on the whole table row. There should be no focus on any single element, if the whole table row is grouped together, as long as there is only one interactive element per row.\n  2. The image button receives focus by swipe or touch\n  3. Each element in audio challenge receives focus by swipe or touch. User is confined inside a modal, if presented\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n#### **UIKit**\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Link",
          "name": "link",
          "type": "file",
          "generalNotes": "How to test a link",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a link\n\nGIVEN THAT I am on a screen with a link\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the link\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the link should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the link should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the link\n     * THEN the focus should move to the link\n       * AND the link's name, role, and state (if applicable) should be expressed\n   * WHEN I use the Rotor/TalkBack menu\n     * THEN the link should be navigable and activatable from the Rotor/TalkBack menu or by focus and double-tap\n       * AND at least one method should work\n   * WHEN I double-tap the link\n     * THEN the link should be activated\n       * AND KNOWN ISSUE: Links do not currently appear in iOS Rotor using SwiftUI\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the link\n     * THEN its name should clearly describe its purpose and destination\n       * AND its role should be identified as a link\n       * AND its state (DISABLED/DIMMED) should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text of the link should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/link>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys, or ctrl+tab: Focus visibly moves to the link\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Rotor/talkback menu: Links can be navigated to and activated from the Rotor/TalkBack menu or by focus/double tap. Only one way is required. Known issue: Links do not currently appear in iOS Rotor using SwiftUI.\n   * Doubletap: Activates the link\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose and destination is clear\n   * Role: Identifies itself as a link\n   * Group: n/a\n   * State: Expresses its state if applicable (disabled/dimmed)\n\n4. Device OS settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/link>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\r\n  <source src=\"media/video/native/link/linkIosVoiceOver.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/native/link/linkAndroidTalkback.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": "### **Developer Notes**\n\n* Actionable text that navigates the user outside of the app to a web page (ex: opens an web browser).\n* When accessing an in-line link that is inside a paragraph with a screen reader, the focus can be around the paragraph container.\n* To activate a link, screen reader users must double tap both inline links and links outside of paragraphs.\n* There should only be a single inline link inside of a paragraph. Screen readers can only access the first link in the paragraph.\n* The correct execution of native app controls informs assistive technologies, such as voice control, screen readers, and switch access, that the element is interactive.\n\n### Name\n\n* Interactive text that describes the destination or purpose of the link\n* Programmatic name matches the visible text label\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of “Learn more” that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as “Learn more about accessible controls\".\n\n### Role\n\n* Ensure screen reader users can navigate to links from the TalkBack menu\n* Role is automatically announced if a native app component is used\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### **Android Views**\n\n* TextView - Announces as “link”\n* URLSpan / ClickableSpan\n* Linkify Class\n\n#### **Android Compose**\n\n* Compose does not have native support on Link in Text, a customized linkable text need to be added into Text composable or use a `AndroidView` to bring the Android View with `Linkify` to build Compose composable\n\n### Groupings\n\n* Link text can be grouped with paragraph text automatically to make a larger touch target, provided there is only one interactive link in view.\n\n#### **Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### **Android Compose**\n\n* `Modifier.semantics(mergeDescendants = true) {}` for the child elements grouping/merging\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n* Announcement: disabled\n\n#### **Android Compose**\n\n* Active: default state is active and enabled. Use `RadioButton(enabled = true)` to specify explicitly\n* Disabled:  `RadioButton(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus order\n* Consider how focus should be managed between child elements and their parent views or containers\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading\n* When a link is closed, the focus should return to the triggering element\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Android Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour or the sequence of focus,\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n#### **Jetpack Compose**\n\n```java\n   /**\r\n   * Custom Composable with AndroidView to support link in textView and the links accessibility features from talkback menu\r\n   */\r\n   @Composable\r\n   fun LinkText(\r\n      modifier: Modifier = Modifier,\r\n      textBody: String\r\n   ) {\r\n      AndroidView(\r\n         modifier = modifier,\r\n         factory = { context ->\r\n               TextView(context).apply {\r\n                  text = SpannableString(textBody)\r\n                  LinkifyCompat.addLinks(this, Linkify.WEB_URLS)\r\n                  movementMethod = LinkMovementMethod.getInstance()\r\n               }\r\n         }\r\n      )\r\n   }\n```\n\n### Further reading\n\n* [Handling Android App Links](https://developer.android.com/training/app-links)\n\n### Announcement examples\n\nOptions for announcements below depend on device framework and versions. Announcement order can vary. \"Double tap to activate\" hint announcement varies with implementation.\n\n* \"Label, link\"\n* \"Label, link, double tap to activate\"\n* \"Label, double tap to activate, links available, tap with three fingers to view\" (TalkBack menu appears)\n* \"All text in paragraph including link name, links available, tap with three fingers to view\" (link in paragraph)\n* \"Text in sentence, link name, link, remainder of sentence, double tap to activate, links available, tap with three fingers to view\" (link in sentence with separate link focus)\n* \"Label, disabled\" (disabled)",
          "iosDeveloperNotes": "### **Developer Notes**\n\n* Actionable link that navigates the user outside of the app to a web page (ex: opens a web browser).\n* When accessing an in-line link that is inside a paragraph with a screen reader, the focus is usually around the paragraph container.\n* To activate a link, screen reader users can double tap both inline links and links outside of paragraphs.\n* There should only be a single inline link inside of a paragraph. Screen readers can only access the first link in the paragraph.\n* The correct execution of native app controls informs assistive technologies, such as voice control, screen readers, and switch access, that the element is interactive.\n\n### Name\n\n* Interactive text that describes the destination or purpose of the link\n* Programmatic name matches the visible text label\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of \"Learn more\" that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as \"Learn more about accessible controls\".\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of \"Learn more\" that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as \"Learn more about accessible controls\".\n\n#### **UIKit**\n\n* The link's visible text will overwrite the link's `accessibilityLabel`.\n* If necessary, change the element's `accessibilityLabel` property.\n\n#### **SwiftUI**\n\n* The link's visible text will overwrite the link's `accessibilityLabel`.\n* If necessary, use view modifier `accessibilityLabel(_:)` to change the `accessibilityLabel`.\n\n### Role\n\n* When using non-native app controls (custom controls), roles will need to be manually coded.\n\n#### **UIKit**\n\n* Since UIKit does not have a native link, develop using `UIButton`\n  * If using a `UIButton` is not suitable for your use case, you may try the following strategies:\n    * Use a `UITextView` with a `NSAttributedString` with a `.link` attribute, OR\n    * Use a `UILabel` or related view and apply a `UITapGestureRecognizer`\n    * **Note:** The more complex your custom control is, the more complex the accessibility implementation can be\n* Set `accessibilityTraits` to `.link`\n* Stylize the text to appear as a link\n\n#### **SwiftUI**\n\n* Use native `Link` view\n* If necessary, use view modifier `accessibilityAddTraits(.isLink)` to assign the role as Link.\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* Link text can be grouped with paragraph text to make a larger touch target, provided there is only one interactive link in view.\n\n#### **UIKit**\n\n* Ensure that the child elements, such as the in-line link, of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom development, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n* After grouping the paragraph and the in-line link to form a single accessibility element, bind the link action to it.\n  * For the screen reader experience, focus will surround the paragraph container. Double-tapping the paragraph will activate the link.\n  * For the non-screen reader experience, do not bind the link action to the paragraph container. Non-screen readers must tap on the link itself to activate the link.\n\n### State\n\n#### **UIKit**\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the link to `notEnabled`, but this may overwrite the current accessibility role of the link.\n\n#### **SwiftUI**\n\n* For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n* When a link is closed, the focus should return to the triggering element.\n\n#### **UIKit**\n\n* Implement focus ring to be around the paragraph container, so that double-tapping the container will activate the in-line link, given that there is only one link inside the container.\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* Implement focus ring to be around the paragraph container, so that double-tapping the container will activate the in-line link, given that there is only one link inside the container.\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Announcement order can vary\n* \"Label, link\"\n* \"All text in paragraph including url, link\" (link in paragraph)\n* \"Label, dimmed, link\" (disabled)\n\n### Further reading\n\n* [UIAccessibilityTraits](https://developer.apple.com/documentation/uikit/uiaccessibilitytraits)",
          "developerNotes": ""
        },
        {
          "label": "Radio Button",
          "name": "radio-button",
          "type": "file",
          "generalNotes": "How to test a radio button",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a radio butotn\n\nGIVEN THAT I am on a screen with a radio button\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\"\n     * THEN the focus should visibly move to the radio button\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the radio button should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the radio button should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the radio button\n     * THEN the focus should move to the radio button\n       * AND the radio button's name, role, and state should be expressed\n   * WHEN I double-tap the radio button\n     * THEN the radio button state should toggle\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the radio button\n     * THEN its name should clearly describe its purpose and match any visible label\n       * AND its role should be identified as a button in iOS and as a radio button in Android\n       * AND its visible label should be grouped or associated with the radio button in a single swipe\n       * AND its state (DISABLED/DIMMED, iOS: CHECKED/UNCHECKED, SELECTED/UNSELECTED, Android: CHECKED/NOT CHECKED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text label should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/radio-button>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a radio button\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the radio button\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, and state\n   * Doubletap: Toggles the radio button state\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button in iOS and radio button in Android\n   * Group: Visible label can be grouped or associated with the radio button in a single swipe\n   * State: Expresses its state (disabled/dimmed, iOS: checked/unchecked, selected/unselected. Android: checked/not checked)\n\n4. Device OS Settings\n\n   * Text resize: Text label can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/radio-button>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\r\n  <source src=\"media/video/native/radio-button/radioButtonIosVoiceover.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n### Android Talkback\n\n<video controls>\r\n  <source src=\"media/video/native/radio-button/radioButtonAndroidTalkback.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>",
          "androidDeveloperNotes": "* Radio buttons allow users to select an item from a predefined list of options\n* Use a native element rather than a custom element because it will announce the correct built-in screen reader announcements without additional development effort\n* A radio button should toggle between selected and unselected states. It should not automatically navigate the user to another field or screen when selected, as that may cause a change of context. Revealing new information on the same screen as a result of activating a radio button is ok, as it is usually not a change of context\n* Name, Role, State must be announced when focus is on the control. Announcing the label in the swipe before the radio button does not meet this requirement\n\n### Name\n\n* Programmatic name describes purpose while focus is on the control (or on the whole table row/blade)\n* Programmatic name matches the visible text label\n\n#### **Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control (Best practice)\n\n#### **Jetpack Compose**\n\n* Radiobutton compose class combined with Text is used\n* Recommended to use Row layout to allow for entire row to be selectable\n* Use the `click` on the row for selection event and nullify the `click` on the RadioButton.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Role is automatically announced if a native component is used\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n#### **Android Views**\n\n* Standard RadioButton with RadioGroup when applicable\n* Announced as: \"Radio Button, double tap to toggle\"\n\n#### **Jetpack Compose**\n\n* Simple `RadioButton` composable.\n* In case of radio button group, use `Column(Modifier.selectableGroup())` to add radio buttons as child views.\n* Alternatively use checkbox composable in combination with `Row` or `Colum` and `toggleable(role = Role.RadioButton)`. Code example above.\n* Announced as \"Radio Button, double tap to toggle\"\n\n### Groupings\n\n* Group visible label with radio button (label and radio button can be grouped together in a tableview/row/blade - one swipe) to provide a programmatic name for the button\n* Or use `labelFor` (Android)\n* Ensure that number of items in the group are announced, while grouping by default allows to make single selection from the set of radio buttons.\n* Using `selectableGroup()` announces the number of items.\n\n#### **Android Views**\n\n* ViewGroup\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false.\n* In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement\n\n#### **Jetpack Compose**\n\n* Radiobutton can be combined with Text into either a Column or Row layout to get radio group-like behaviour so the entire layout is selectable.\n* To ensure correct accessibility behavior `Modifier.selectableGroup()` is essential.\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* States can be selected, dimmed/disabled, checked/unchecked, on/off\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n* on/off: `isChecked`, `setChecked`\n* Announcement: disabled, checked/not checked\n\n#### **Jetpack Compose**\n\n* Active: default state is active and enabled. Use `RadioButton(enabled = true)` to specify explicitly\n* Disabled:  `RadioButton(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus order.\n* Consider how focus should be managed between child elements and their parent views or containers\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Jetpack Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour or the sequence of focus,\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from the label. Options for announcements below depend on framework and versions. Announcement order can vary.\n* \"Checked, label, radio button, double tap to toggle\" (selected state)\n* \"Not checked, label, radio button, double tap to toggle\" (unselected state)\n* \"Not checked, label, radio button, double tap to select\" (unselected state)",
          "iosDeveloperNotes": "* Radio buttons allow a user to select one item from a predefined list of options\n* A radio button should toggle between selected and unselected states. It should not automatically navigate the user to another field or screen when selected, as that may cause a change of context. Revealing new information on the same screen as a result of activating a radio button is ok, as it is usually not a change of context\n* Name, Role, State must be announced when focus is on the control. Announcing the label in the swipe before the radio button does not meet this requirement\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n* If a visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n* Placeholder text is NOT the programmatic name.\n\n#### **UIKit**\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The radio button's title will overwrite its `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the radio button's `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n#### **SwiftUI**\n\n* By default, the visible label of a radio group is the accessibility label of that radio group\n  * The visible label of each radio button within a radio group is the accessibility label of that radio button\n* If no visible label, use view modifier `accessibilityLabel(_:)` and assign to the radio group and/or individual radio buttons accordingly.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### **UIKit**\n\n* Since there is no native radio button in UIKit, you can implement a custom radio button by using `UIButton`, `UISwitch`, `UIControl`, or another class.\n* If necessary, set `accessibilityTraits` to `.button`. Be sure to set the accessibility value to either \"Selected\"/\"Checked\" or \"Unselected\"/\"Unchecked\" to indicate that this control behaves as a radio button.\n* An alternative to setting the accessibility trait to `.button` is removing and hiding the accessibility trait using `accessibilityTraits.remove(:)`. Then, append \", Radio Button\" or \", Button\" to the programmatic name\n\n#### **SwiftUI**\n\n* Use a native `Picker` view with `.pickerStyle(.radioGroup)`\n\n### Groupings\n\n* Group visible label with radio button, if applicable, to provide a programmatic name for the radio button.\n* Group the units such that the label, role, and state of the radio button is announced in a single announcement.\n\n#### **UIKit**\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n* If the tap gesture is removed due to grouping logic, restore the tap gesture functionality using bindings to bind the tap gesture of the container with the state of the checkbox.\n\n### State\n\n#### **UIKit**\n\n* For checked state: Set `accessibilityValue` to \"Selected\" or \"Checked\"\n* For unchecked state: Optionally, set `accessibilityValue` to \"Unselected\" or \"Unchecked\"\n* For enabled state: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### **SwiftUI**\n\n* For checked state, if necessary: Set accessibility value to \"Selected\" or \"Checked\" with `accessibility(:)`\n* For unchecked state, if necessary: Set accessibility value to \"Unselected\" or \"Unchecked\" with `accessibilityValue(:)`\n* For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* When a bottom navigation bar element is activated, the next screen's initial focus should stay in the bottom navigation bar.\n\n#### **UIKit**\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from the label. Options for announcements below depend on framework and versions. Announcement order can vary.\n* \"Label, button\"\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)",
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Notifications",
      "name": "notifications",
      "children": [
        {
          "label": "Modal",
          "name": "modal",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Patterns",
      "name": "patterns",
      "children": [
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    }
  ],
  "how-to-test": [
    {
      "label": "Components",
      "name": "components",
      "children": [
        {
          "label": "Images",
          "name": "images",
          "type": "file",
          "generalNotes": "Learn how to test and provide appropriate alternative text for different image types—including informative, decorative, and complex images—to ensure they are accessible to all users. Covers both automated tools and manual inspection techniques.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "1. **Types of images**\n\n   There are many types of images. The type of image can be determined by the context of the page being tested. These different types of images have different testing steps.\n\n   * **Informative Images:** These are visuals like pictures, photos, and illustrations that convey important information or concepts. To make them accessible, we need to include a brief description in text form that captures the key content of the image.\n\n   * **Decorative Images:** Sometimes, images are used purely for aesthetic purposes and don't convey meaningful information. In such cases, it's best to provide an empty text alternative (alt=\"\") to indicate that the image serves a decorative role and doesn't require a description.\n\n   * **Functional Images:** Images that serve as links or buttons should have text alternatives that describe their function rather than just their appearance. For example, if you have an image of a printer icon that initiates a printing action, the alt text should convey this functionality, like \"Print.\"\n\n   * **Images of Text:** Images of text should be avoided whenever possible. In fact, some images of text can violate [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html). However, if you must use images with text, ensure that the alt text contains the exact same words as the text within the image to maintain consistency.\n\n   * **Complex Images such as Graphs and Diagrams:** When using images to present complex data or detailed information, it's crucial to provide a comprehensive text description that conveys all the data and details found in the image. This allows individuals who cannot see the image to still access and understand its content.\n\n2. **How to test**\n\n   ### Automated Testing\n\n   Automated scanning tools, such as [WAVE](https://wave.webaim.org/), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), or [Deque's Axe DevTools](https://www.deque.com/blog/axe-devtools-extension-update-new-color-contrast-analyzer/) are a great starting point for image testing. All of these tools can run page scans that quickly generate reports identifying some image issues. Scans are:\n\n   * <strong>Good</strong> at identifying simple issues like missing <code>alt</code> attributes on images or empty alt attributes on functional images.\n   * <strong>Bad</strong> at identifying issues related to alternative text quality or whether or not an image should be marked as decorative and hidden from screen readers.\n\n   ### Manual testing\n\n   Automated scanning must be complemented with a manual review of the page. Manual image testing can test for alt text quality, ensuring that decorative images are hidden from assistive technology, all text found in images of text are present in alt text, and that functional images have the appropriate alt text.\n\n   #### <strong>Getting started</strong>\n\n   * Open Chrome DevTools in your browser window <span class=\"keyboard-key\">F12</span>\n   * Right-click and select \"Inspect\" on the image in the page you want to test.\n\n3. **Informative Images**\n\n   * Check that the image owns an <code>alt</code> attribute.\n   * Ensure that the <code>alt</code> attribute is present is not empty.\n   * Ensure that the alt attribute is present is not empty, such as <code>alt</code> or <code>alt=\"\"</code>\n   * The <code>alt</code> attribute value / description of the image should be accurate and succinct. The image alternative should not consist of information that duplicates nearby text content.\n\n   <img\r\n   src=\"media/images/how-to-test/how-to-images-meaningful-1.png\"\r\n   alt=\"Inspecting an image in DevTools to check alt text, meaningful image\"/>\n\n   ### IMG\n\n   ```html\n   <img alt=\"A rear view of the iPhone 15 Pro in silver, along with a front view of the iPhone 15 Pro Max in silver.\" src=\"../iphone.png\" ... >\n   ```\n\n   ### SVG\n\n   Some images are implemented using inline <code>SVG</code>. Text alernatives for these images can be defined by use of <code>role=\"img\"</code> and <code>aria-label=\"I am the alt text\"</code>. The <code>alt</code> attribute should not be on an element whose <code>role</code> is <code>role=\"img\"</code> this is instead handled by <code>aria-label</code>.\n\n   ```html\n   <svg role=\"img\" aria-label=\"I am the alt text\">...</svg>\n   ```\n\n4. **Decorative Images**\n\n   * Ensure that the <code>alt</code> attribute is present and owns an empty or null value. <code>alt=\"\"</code>.\n   * <strong>Note:</strong> <code>aria-hidden=\"true\"</code> is not needed if an image has an empty or null alt attribute value <code>alt=\"\"</code>.\n\n    <img src=\"media/images/how-to-test/how-to-images-decorative-1.png\" alt=\"Inspecting an image in DevTools to check alt text, decorative image\">\n\n   ```html\n   <img alt=\"\" src=\"../some-image.png\" ...>\n   ```\n\n5. **Functional Images**\n\n   * Ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Functional images are typically links or buttons so the alt text should define the purpose of the link instead of describing the image.\n\n    <img src=\"media/images/how-to-test/how-to-images-functional.png\" alt=\"Inspecting an image in DevTools to check alt text, functional image\">\n\n   * **Note:** Functional images can have empty or null alt attribute values <code>alt=\"\"</code> if the text alternative is conveyed in the parent control's label. For example, <code>aria-label=\"Download on the Apple App Store\"</code>.\n\n   ```html\n   <button aria-label=\"Download on the Apple App Store\">\r\n       <img src=\"apple.png\" alt=\"\">\r\n   </button>\n   ```\n\n6. **Images of Text**\n\n   * Sometimes text can't be easily created with HTML and CSS and an image must contain text. In this case, ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Typically, the text is the most important part of the image. There is no need for the image itself to be described unless it adds value to the content of the page.\n   * Consider logging a defect for [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html) if it seems like there might be a viable workaround to add real text to the page vs. an image of text.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-text.png\" alt=\"Inspecting an image in DevTools to check alt text, image of text example\">\n\n   ```html\n   <img src=\"apple-iphone-15-pro.png\" alt=\"Titanium Apple iPhone 15 Pro\">\n   ```\n\n7. **Complex Images**\n\n   * Data visualizations, charts, and graphs can be very difficult to author alternative text for. Some features like charts and graphs may not be accessible themselves but there can be text alternatives nearby that can act as an accessible alternative.\n   * For complex images that are <code>img</code> elements, ensure that the image has an <code>alt</code> attribute and that its value communicates the general purpose of the image. This alt text does not need to contain all of the visual information as that may be too long for an appropriate alt text value. If the alt text does not describe all content in the image ensure there is content nearby, or linked to, that does contain all of the visual information in text form.\n   * For charts and graphs, these features are typically not 100% accessible. Ensure there is content nearby, or linked to, that does contain all of the visual information in text form. For example, an accessible Excel download or HTML Table presenting the key visual information from the content found in the chart.\n   * <strong>Note:</strong> It is important that all text alternatives to complex images must be in an accessible format to qualify as an accessible alternative.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   ```html\n   <img src=\"/assets/images/examples/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\r\n\r\n   <table>\r\n       <caption>NASDAQ: TMUS</caption>\r\n       <tr>\r\n       <th>Date</th>\r\n       <th>Price</th>\r\n       <!-- ... -->\r\n       </tr>\r\n       <tr>\r\n       <td>January 10</td>\r\n       <td>122.20</td>\r\n       <!-- ... -->\r\n       </tr>\r\n   </table>\n   ```\n\n8. **What to test for**\n\n    <div class=\"how-to-test-checklist-item\">\r\n    <h3>✓ Ensure meaningful images have alt text</h3>\r\n    <p><strong>Note:</strong> The passing example has alt text that matches the text found in the image. The failing example uses the filename for the <code>alt</code> attribute value. Screen readers will announce the filename <code>234@@4-JWKK##KK4442221-11-phone-apple-prod.png</code> which will create a confusing experience.</p>\r\n    <table >\r\n        <thead>\r\n            <th scope=\"col\">\r\n                Pass\r\n            </th>\r\n            <th scope=\"col\">\r\n                Fail\r\n            </th>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"Titanium Apple iPhone 15 Pro\"/>\r\n                </td>   \r\n                <td>\r\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"234@@4-JWKK##KK4442221-11-phone-apple-prod.png\"/>\r\n                </td>\r\n            </tr>  \r\n        </tbody>\r\n    </table>\r\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\r\n    <h3>✓ Ensure decorative images are hidden from assistive technology</h3>\r\n    <p><strong>Note:</strong> Passing example image has an empty <code>alt</code> attribute value. The failing example has a very long redundant description of the image. Not only is it too verbose, it has the same text as the nearby text content.</p>\r\n    <table >\r\n        <thead>\r\n            <th scope=\"col\">\r\n                Pass\r\n            </th>\r\n            <th scope=\"col\">\r\n                Fail\r\n            </th>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <div style=\"text-align: center;\">\r\n                        <a href=\"#\">\r\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"\" style=\"max-width: 200px; margin: 0 auto;\" />\r\n                            <span style=\"display: block;\">Home Internet</span>\r\n                        </a>\r\n                    </div>\r\n                </td>   \r\n                <td>\r\n                    <div style=\"text-align: center;\">\r\n                        <a href=\"#\">\r\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"Home internet. Picture of a magenta colored gateway device inside of an open box, icon\" style=\"max-width: 200px; margin: 0 auto;\" />\r\n                            <span style=\"display: block;\">Home Internet</span>\r\n                        </a>\r\n                    </div>\r\n                </td>\r\n            </tr>  \r\n        </tbody>\r\n    </table>\r\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\r\n    <h3>✓ Ensure complex images have a text alternative</h3>\r\n    <p><strong>Note:</strong> The passing chart has a general text alternative describing what the image is but also references nearby text data for reference. <code>alt=\"Fruit chart, data below\"</code>. The failing example owns an empty alt attribute value which hides the image from screen reader users and does not provide an alternative.</p>\r\n    <table >\r\n        <thead>\r\n            <th scope=\"col\">\r\n                Pass\r\n            </th>\r\n            <th scope=\"col\">\r\n                Fail\r\n            </th>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \r\n                    alt=\"Fruit chart, data below\"/>\r\n                    <ul>\r\n                        <li>Watermelons 20%</li>\r\n                        <li>Grapes 10%</li>\r\n                        <li>Oranges 24%</li>\r\n                        <li>Apples 30%</li>\r\n                        <li>Bananas 16%</li>\r\n                    </ul>\r\n                    </td>   \r\n                    <td>\r\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \r\n                    alt=\"\"/>\r\n                </td>\r\n            </tr>  \r\n        </tbody>\r\n    </table>\r\n    </div>\n\n   ## Related WCAG\n\n   * 1.1.1 Non-text Content\n   * 1.4.5 Images of Text\n   * 2.4.4 Link Purpose\n   * 2.5.3 Label in Name\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   * [W3C Images Tutorial](https://www.w3.org/WAI/tutorials/images/)\n   * [WebAIM Alternative Text](https://webaim.org/techniques/alttext/)"
        },
        {
          "label": "Links & Buttons",
          "name": "links-&-buttons",
          "type": "file",
          "generalNotes": "Testing links and buttons is essential to ensuring a site is accessible and functional for all\r\nusers.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nContains developer-specific information, including expected behaviors, implementation details, and\r\nbest practices.\n\n1. **How to test**\n\n   **Test with your keyboard first**\n\n   Navigate through the page using only the tab and shift + tab keys on your keyboard to reach all\r\n   links and buttons.\n\n   **Test with screen readers second**\n\n   Use a screen reader, such as NVDA (for Windows) or VoiceOver (for macOS) and browse the page\r\n   using your arrow keys to reach all links and buttons.\n\n2. **What to test for**\n\n     <div class=\"how-to-test-checklist-item\">\r\n       <h3>✓ Ensure each link and button receives focus and has a visible focus indicator</h3>\r\n       <table >\r\n       <thead>\r\n           <th scope=\"col\">\r\n           Pass\r\n           </th>\r\n           <th scope=\"col\">\r\n           Fail\r\n           </th>\r\n       </thead>\r\n       <tbody>\r\n       <tr>\r\n           <td>\r\n           <button class=\"Magentaa11y-button Magentaa11y-button--primary\">I get focus!</button>\r\n           </td>\r\n           <td>\r\n           <div class=\"Magentaa11y-button Magentaa11y-button--primary\">I do NOT get focus</div>\r\n           </td>\r\n       </tr>\r\n           <tr>\r\n           <td>\r\n           <a href=\"#\">I get focus!</a>\r\n           </td>\r\n           <td>\r\n           <a>I do NOT get focus</a>\r\n           </td>\r\n       </tr>\r\n       </tbody>\r\n       </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n       <h3>✓ Ensure buttons and links can be activated with the <code>enter</code> key and that buttons can also be activated with the <code>space</code> key</h3>\r\n       <table >\r\n           <thead>\r\n           <th scope=\"col\">\r\n               Pass\r\n           </th>\r\n           <th scope=\"col\">\r\n               Fail\r\n           </th>\r\n           </thead>\r\n           <tbody>\r\n           <tr>\r\n           <td>\r\n               <button class=\"Magentaa11y-button Magentaa11y-button--primary\" data-fn=\"showAlert\">Show alert</button>\r\n           </td>\r\n           <td>\r\n               <div class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"button\" tabindex=\"0\" data-fn=\"showMouseAlert\" data-event=\"onMouseDown\">\r\n               Show alert\r\n               </div>\r\n           </td>\r\n           </tr>\r\n               <tr>\r\n           <td>\r\n               <a href=\"/home\">Magentaa11y home</a>\r\n           </td>\r\n           <td>\r\n               <a tabindex=\"0\" data-fn=\"goToHome\" data-event=\"onMouseUp\" >Magentaa11y home</a>\r\n           </td>\r\n           </tr>\r\n           </tbody>\r\n       </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n         <h3>✓ Ensure disabled controls are focusable but not actionable, and have an <code>aria-disabled=\"true\"</code> attribute</h3>\r\n         <p><strong>Note:</strong> A control that is disabled should not be interactive to any users. Nothing should happen when activated.</p>\r\n         <table >\r\n             <thead>\r\n             <th scope=\"col\">\r\n                 Preferred\r\n             </th>\r\n             <th scope=\"col\">\r\n                 Visually disabled but actionable\r\n             </th>\r\n             </thead>\r\n             <tbody>\r\n             <tr>\r\n             <td>\r\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">Save</button>\r\n             </td>\r\n             <td>\r\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary visually-disabled\" tabindex=\"-1\" data-fn=\"showAlertWhenDisabled\">Save</button>\r\n             </td>\r\n             </tr>\r\n             </tbody>\r\n         </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n         <h3>✓ Ensure all links and buttons have clear labels and that all graphical controls have accurate <code>aria-label</code> attributes</h3>\r\n         <table >\r\n             <thead>\r\n             <th scope=\"col\">\r\n                 Pass\r\n             </th>\r\n             <th scope=\"col\">\r\n                 Fail\r\n             </th>\r\n             </thead>\r\n             <tbody>\r\n                 <tr>\r\n             <td>\r\n                 <button data-icon=\"playCircleOutlined\" aria-label=\"Play video\" />\r\n             </td>\r\n             <td>\r\n                 <button data-icon=\"playCircleOutlined\">\r\n                 </button>\r\n             </td>\r\n             </tr>\r\n             <tr>\r\n             <td>\r\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\r\n             Learn more about links\r\n         </a>\r\n             </td>\r\n             <td>\r\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\r\n             Learn more\r\n         </a>\r\n             </td>\r\n             </tr>\r\n             </tbody>\r\n         </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n         <h3>✓ Ensure all CTA buttons or links have appropriate <code>aria-label</code> values.</h3>\r\n         <p><strong>Note:</strong> If a control has <code>aria-label</code>, the <code>aria-label</code> must contain the text that is presented visually. The text should not be broken up and be the first part of the label.</p>\r\n         <table>\r\n         <thead>\r\n             <th scope=\"col\">\r\n             Pass\r\n             </th>\r\n             <th scope=\"col\">\r\n             Fail\r\n             </th>\r\n         </thead>\r\n         <tbody>\r\n             <tr>\r\n             <td>\r\n             <h2>iPhone 14</h2>\r\n             <p>I am the product information.</p>\r\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Buy now, iPhone 14\">Buy Now</button>\r\n             </td>\r\n             <td>\r\n             <h2>iPhone 14</h2>\r\n             <p>I am the product information.</p>\r\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Learn more about our specials\">Buy Now</button>\r\n             </td>\r\n         </tr>\r\n         <tr>\r\n             <td>\r\n             <code>aria-label=\"Buy now, iPhone 14\"</code>\r\n             </td>\r\n             <td>\r\n             <code>aria-label=\"Learn more about our specials\"</code>\r\n             </td>\r\n         </tr>\r\n         </tbody>\r\n         </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n       <h3>✓ Ensure screen readers accurately announce any button or link state that is conveyed visually</h3>\r\n       <p><strong>Note:</strong> States such as expanded,collapsed, or current can be communicated to screen reader users.</p>\r\n       <table>\r\n         <thead>\r\n           <th scope=\"col\">Pass</th>\r\n           <th scope=\"col\">Fail</th>\r\n         </thead>\r\n         <tbody>\r\n           <tr>\r\n             <td>\r\n               <div class=\"MagentaA11y-accordion\">\r\n                 <h2 class=\"MagentaA11y-accordion__heading\">\r\n                   <button\r\n                     class=\"MagentaA11y-accordion__headline\"\r\n                     aria-expanded=\"false\"\r\n                     data-fn=\"toggleAccordionState\"\r\n                     aria-controls=\"list\">\r\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\r\n                   </button>\r\n                 </h2>\r\n                 <div class=\"MagentaA11y-accordion__body\" id=\"list\">\r\n                   This button expressed its state as expanded or collapsed\r\n                 </div>\r\n               </div>\r\n             </td>\r\n             <td>\r\n               <!--  -->\r\n               <div class=\"MagentaA11y-accordion\">\r\n                 <h2 class=\"MagentaA11y-accordion__heading\">\r\n                   <button class=\"MagentaA11y-accordion__headline\" aria-controls=\"listB\">\r\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\r\n                   </button>\r\n                 </h2>\r\n                 <div class=\"MagentaA11y-accordion__body\" id=\"listB\">\r\n                   This button is not conveying it's state.\r\n                 </div>\r\n               </div>\r\n             </td>\r\n           </tr>\r\n         </tbody>\r\n       </table>\r\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\r\n       <h3>✓ Ensure skip to &amp; same-page links move focus for screen reader and keyboard users</h3>\r\n       <table class=\"column-2\">\r\n         <thead>\r\n           <tr><th scope=\"col\">\r\n             Pass\r\n           </th>\r\n           <th scope=\"col\">\r\n             Fail\r\n           </th>\r\n         </tr></thead>\r\n         <tbody>\r\n         <tr>\r\n           <td>\r\n           <a id=\"return-to-top-link\" data-fn=\"scrollAndFocusMain\" href=\"#\">Return to top</a>\r\n           </td>\r\n           <td>\r\n           <a href=\"#\" data-fn=\"scrollToTopOnly\">\r\n           Return to top</a>\r\n           </td>\r\n         </tr> \r\n         </tbody>\r\n       </table>\r\n     </div>\n\n3. **What's the difference between a link and a button**\n\n   ### If it goes somewhere, it's `<a>` link.\n\n   * When the user clicks a link, they are taken to a different location in the site.\n     * Either another page or even another area of the same page\n   * A link can look like a big shiny button but it must be coded as `<a>` link\n   * An interactive link should have a valid href value so it can receive keyboard focus.<br>For\r\n     example `<a href=\"/some-page\">...</a>`.\n\n   ### If it does something, it's a `<button>`\n\n   * Buttons cause an action to occur on the same page\n     * Submit a form (even when submission takes you to a new page)\n     * Open a menu\n     * Launch a modal\n     * Expand details\n   * A button can look like a link, but it must be coded as a `<button>`\n\n   ## Related WCAG\n\n   * 2.4.4 Link Purpose (In Context)\n   * 2.5.3 Label in Name\n   * 3.2.4 Consistent Identification\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   [WebAIM: Links and Hypertext](https://webaim.org/techniques/hypertext/)\n\n   [WebAIM: Buttons](https://webaim.org/techniques/forms/controls#button)"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Keyboard & Focus",
          "name": "keyboard-&-focus",
          "type": "file",
          "generalNotes": "Manual testing is not difficult or time consuming once a team understands keyboard interactions.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **Test with the keyboard only**\n\n   It is crucial to **test with only the keyboard first**, without the screen reader activated.\n\n   **Why keyboard testing is so important**\n\n   * Keyboard accessibility is **prerequisite** to screen reader accessibility.\n\n     * If it doesn't work with only the keyboard, it won't work with a screen reader.\n\n   * screen reader applications will sometimes cover missing functionality that the sighted keyboard user won't be able to use.\n\n   **Devices**\n\n   * Test with a mobile device and a bluetooth keyboard\n   * Test with a desktop device and a keyboard\n\n   **Browsers**\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for keyboard testing.\n\n   * Note: In Safari, you'll have to activate tab in Preferences » Advanced » Press Tab\n\n2. **How to test**\n\n   Keyboard testing consists of a few keyboard commands to interact with web experiences.\n\n   <table >\r\n     <caption class=\"text-left\">\r\n       Keyboard basics\r\n     </caption>\r\n     <thead>\r\n       <tr>\r\n         <th scope=\"col\">\r\n           Key\r\n         </th>\r\n         <th scope=\"col\">\r\n           Action\r\n         </th>\r\n       </tr>\r\n     </thead>\r\n     <tbody>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Arrows</span>\r\n         </th>\r\n         <td>\r\n           Should scroll the screen or interact with form fields\r\n         </td>\r\n       </tr>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Tab</span>\r\n         </th>\r\n         <td>\r\n           Moves through the interface focusing on elements that are focusable. For example, buttons and links.\r\n         </td>\r\n       </tr>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Shift + Tab</span>\r\n         </th>\r\n         <td>\r\n           Moves in reverse through the interface focusing on elements that are focusable.\r\n         </td>\r\n       </tr>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Enter</span>\r\n         </th>\r\n         <td>\r\n           Activates links and buttons\r\n         </td>\r\n       </tr>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Spacebar</span>\r\n         </th>\r\n         <td>\r\n           Activates buttons and interacts with form elements\r\n         </td>\r\n       </tr>\r\n       <tr>\r\n         <th scope=\"row\">\r\n           <span >Escape</span>\r\n         </th>\r\n         <td>\r\n           Should close or dismiss widgets like dialogs\r\n         </td>\r\n       </tr>  \r\n     </tbody>\r\n   </table>\n\n3. **What to test for**\n\n   * <div >\r\n       <h3>✓ Ensure all mouse functionality is present for keyboard</h3>\r\n       <p>Identify functionality within the experience that can be operated with a mouse or pointing device. Ensure this content can be accessed with they keyboard alone.</p>\r\n     </div>\n   * <div >\r\n       <h3>✓ Ensure there is a highly visible visual indication of keyboard focus</h3>\r\n       <p>Keyboard users need to understand where they are in the interface at all times. The visual indication of keyboard focus (focus ring) should be highly visible and have a color contrast ratio of 3:1 against the background. Verify that overlap items (e.g. cookie banners, sticky footers, sticky headers, and non-modal dialogs) do not obscure the visual indicator. </p>\r\n     </div>\n   * <div >\r\n       <h3>✓ Ensure that there are no keyboard traps</h3>\r\n       <p>Ensure that while navigating the experience, you do not encounter situations where you are not able to move forward or backward with the keyboard alone.</p>\r\n     </div>\n   * <div >\r\n       <h3>✓ Verify that the focus order is logical</h3>\r\n       <p>In an English-based experience, keyboard focus should move top-to-bottom and left-to-right in a logical order. Ensure focus is not jumping around the experience in a way that makes it hard to understand the content.</p>\r\n     </div>\n   * <div >\r\n       <h3>✓ On focus does not create a change of context</h3>\r\n       <p>Ensure that when an interactive element receives keyboard focus that a change of context is not initiated without warning of such behavoir. An example of change of context is a page load or web form submission.</p>\r\n     </div>\n   * <div >\r\n       <h3>✓ Test for skip links</h3>\r\n       <p>Where there are large chunks of repeated content, ensure that there are skip links present for keboard users. For example, on a site with a large site navigation system, the first focusable element in the page should be a link that allows users to jump to the main content of the site.</p>\r\n     </div>\n\n### Video Example\n\n<video controls>\r\n  <source src=\"media/video/how-to-test/how-to-keyboard.mp4\" type=\"video/mp4\">\r\n  Your browser does not support the video tag.\r\n</video>\n\n<hr>\n\n### Related WCAG\n\n* 1.4.11: Non-text Contrast\n* 2.1.1 Keyboard\n* 2.1.2 No Keyboard Trap\n* 2.4.3 Focus Order\n* 2.4.7 Focus Visible\n* 3.2.1 On Focus\n\n### Resources\n\n[WebAIM Keyboard Accessibility](https://webaim.org/techniques/keyboard/)"
        }
      ]
    }
  ]
}