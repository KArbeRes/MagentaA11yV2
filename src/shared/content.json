{
  "web": [
    {
      "label": "Component",
      "name": "component",
      "children": [
        {
          "label": "Table",
          "name": "table",
          "type": "file",
          "generalNotes": "Tables must be used to structure tabular data. Avoid using tables for layout purposes.",
          "gherkin": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\nGIVEN THAT I am on a page with a table\n\n1. Keyboard for mobile & desktop\n\n   — WHEN I use the arrow keys\\\n   — I SEE the table scrolls into view (but is not focusable)\n\n2. Desktop screenreader\n\n   — WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\\\n   — I use the arrow keys\n\n   — I HEAR The table has a caption or a heading to describe its purpose\\\n   — I HEAR It identifies itself as a table\\\n   — I HEAR Column headers and row headers are identified with screenreader shortcuts\n\n3. Mobile screenreader\n\n   — WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\\\n   — I swipe to focusable elements in the footer\n\n   — I HEAR The table has a caption or a heading to describe its purpose\\\n   — I HEAR It identifies itself as a table\\\n   — I HEAR Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/component/table>",
          "condensed": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   — Arrow-keys: The table scrolls into view (and with a screenreader the cells become individually readable)\n\n2. Test mobile screenreader gestures\n\n   — Swipe: The table is browsed from cell to cell\n\n3. Listen to screenreader output on all devices\n\n   — Name: The table has a caption or a heading to describe its purpose\n\n   — Role: It identifies itself as a table\n\n   — Group: Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/component/table>",
          "criteria": null,
          "videos": "#### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/web/table/table_ios.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\\\nOptional: The table is wrapped in a `<figure>` to indicate author and source.\n\n```html\n<table id=\"nato-table\">\n  <caption class=\"h-charlie\">\n    Nato phonetic Alphabet\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Letter</th>\n      <th scope=\"col\">A</th>\n      <th scope=\"col\">B</th>\n      <th scope=\"col\">C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">NATO</th>\n      <td>Alpha</td>\n      <td>Bravo</td>\n      <td>Charlie</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n<table class=\"text-center\">\n  <caption>\n    Nato phonetic Alphabet\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Letter</th>\n      <th scope=\"col\">A</th>\n      <th scope=\"col\">B</th>\n      <th scope=\"col\">C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">NATO</th>\n      <td>Alpha</td>\n      <td>Bravo</td>\n      <td>Charlie</td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"text-center\">\n<caption>\n    Screen reader and browser pairings\n  </caption>\n  <thead>\n    <tr>\n      <th>Platform</th>\n      <th>Screenreader</th>\n      <th>Browser</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-android.svg\" alt=\"Android\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-talkback.svg\" alt=\"Talkback\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\">\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-jaws.svg\" alt=\"JAWS\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-windows.svg\" alt=\"Windows\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-nvda.svg\" alt=\"NVDA\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-chrome.svg\" alt=\"Chrome\"> \n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"Apple\">\n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-apple.svg\" alt=\"VoiceOver\"> \n      </td>\n      <td>\n        <img src=\"media/images/icons/logo-safari.svg\" alt=\"Safari\"> \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### When You Can’t Use Semantic HTML\n\nIf tabular data must be displayed without a `<table>` element, additional attributes are required.\n\n```html\n<div role=\"table\" aria-describedby=\"table-desc\">\n  <div id=\"table-desc\">Nato phonetic alphabet</div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\">Letter</span>\n      <span role=\"columnheader\">NATO</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"cell\">A</span>\n      <span role=\"cell\">Alpha</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">B</span>\n      <span role=\"cell\">Bravo</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">C</span>\n      <span role=\"cell\">Charlie</span>\n    </div>\n  </div>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* The table can be named by a heading above or a `<caption>`.\n\n### Role\n\n* Semantic `<table>` structures identify headers appropriately and honor screenreader keyboard shortcuts.\n\n### Group\n\n* Wrapping a table in a `<figure>` element can build a relationship to `<figcaption>` and `<cite>`.\n\n### State\n\n* Sortable tables can use `aria-sort` to indicate state."
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Basic Web Page",
          "name": "basic-web-page",
          "type": "file",
          "generalNotes": "Validate your code use HTML validation as the foundation for ensuring your page works for everyone.",
          "gherkin": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\nGIVEN THAT I am on a page with a basic web page\n\n1. Keyboard for mobile & desktop\n\n   — EN I use the keyboard to open a new web page I SEE the page has a unique logical title in the browser tab\n\n2. Desktop screenreader\n\n   — EN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   — use the keyboard to open a new web page\n   — HEAR The page has a unique logical title in the browser tab\n   — HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n3. Mobile screenreader\n\n   — EN I use a mobile screenreader (Talkback, VoiceOver) AND\n   — swipe to enter from the web browser tabs\n   — HEAR The page has a unique logical title in the browser tab\n   — HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n   — EN when I change orientations I HEAR content is accessible in landscape or portrait orientation\n\n4. Device OS settings\n   — EN I use zoom/pinch THEN I see text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "condensed": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   — Tab: Enters the page and visibly focuses only interactive elements\n   — Zoom: Content zooms up to 200%\n\n2. Test mobile screenreader gestures\n\n   — Swipe: Focus moves within page\n   — Pinch/stretch: Content zooms up to 200%\n   — Orientation: Content is accessible in landscape or portrait orientation\n\n3. Listen to screenreader output on all devices\n\n   — Name: The page has a unique logical title in the browser tab\n   — Role: Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n4. Device OS settings\n\n   — Zoom/pinch: text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Declare a language\n\nThis affects the screenreader pronunciation.\n\n```html\n<html lang=\"en\"></html>\n```\n\n### Give your page a unique title\n\nEach page must have unique `<title>` in the `<head>`:\n\n* This includes single-page dynamic apps if the URI changes during the user journey.\n* Do not use the `|` pipe character as a divider (it is read by screen readers).\n\n```html\n<head>\n  <title>Page title - Website title</title>\n</head>\n```\n\n### Ensure users can zoom in\n\nPeople with low vision need the ability to enlarge the page on mobile and desktop.\n\n```html\n<head>\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, \n        initial-scale=1\"\n  />\n</head>\n```\n\n### Structure your page with landmarks\n\nLandmarks give structure to the page for the screenreader user to be able to navigate the page by major sections.\n\nEach page must include:\n\n* Header\n* Nav\n* Main\n* Footer\n\n```html\n<header>\n  <!-- Contains the site title -->\n</header>\n<nav>\n  <!-- Primary navigation menu-->\n</nav>\n<main>\n  <!-- Main content -->\n</main>\n<footer>\n  <!-- Site map and legal info -->\n</footer>\n```\n\n## Developer Notes\n\n### Name\n\n* The page must have a unique, logical title visible in the browser tab.\n\n### Role\n\n* Major landmarks (header/banner, navigation, main, footer) must be discoverable with screenreader shortcuts.\n\n### Group\n\n* Ensure the page includes all necessary structural landmarks.\n\n### Focus\n\n* The page title should be strongly visually indicated when the page is loaded.\n* Zoom/pinch/stretch should allow resizing up to 200% without losing information."
        },
        {
          "label": "Form",
          "name": "form",
          "type": "file",
          "generalNotes": "How to test a web form for accessibility.",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\nGIVEN THAT I am on a page with a web form\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a form field\n     * I SEE focus is visually indicated\n     * I SEE the focus moves in a logical order\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver)\n   * AND I use the tab key or arrow keys to move through form fields\n     * I HEAR the role and label for each field\n     * I HEAR instructions associated with form fields\n     * I HEAR error messages when a field is invalid\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (TalkBack, VoiceOver)\n   * AND I swipe through the form fields\n     * I HEAR each field's name, role, and state\n     * I HEAR grouped information where applicable\n     * I HEAR errors or hints when applicable\n\nFull information: <https://www.magentaa11y.com/checklist-web/form/>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Not commonly used for form entry, but useful for jumping to a form landmark.\n   * Tab: Focus moves to each form control in logical order, strong visual focus indicator.\n   * Forms mode: Enabled when screen reader lands on a form field.\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to form controls inside the form.\n   * Singletap: Selects a form control.\n   * Doubletap: Activates controls as expected.\n   * Forms mode: Automatically enabled.\n\n3. Listen to screenreader output on all devices\n   * Role: Each input and group is correctly identified (e.g. textbox, combobox, radiogroup).\n   * Name: Every input has a programmatic label (visible label, aria-label, or aria-labelledby).\n   * Group: Groups of related fields are identified with fieldset/legend or aria attributes.\n   * Instructions: Presented before the form or inline, announced in order.\n   * Errors: Errors are announced when inputs are invalid.\n\nFull information: <https://www.magentaa11y.com/checklist-web/form/>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n<form aria-label=\"Sign in\">\n  <fieldset>\n    <legend>Sign in</legend>\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\">\n    <button type=\"submit\">Sign in</button>\n  </fieldset>\n</form>\n\n```html\n<form aria-label=\"Sign in\">\n  <fieldset>\n    <legend>Sign in</legend>\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\">\n    <button type=\"submit\">Sign in</button>\n  </fieldset>\n</form>\n```\n\n### Credit card information\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* This form uses minimal unobtrusive masking to make the credit card number more readable. (When done poorly, masking can can cause the field to be read repeatedly as the mask refreshes)\n* Autofill attributes to help customers complete fields with less effort.\n* Using inputmode=\"numeric\" brings up the numeric keyboard on mobile devices making entry easier.\n\n<example>\n    <form aria-label=\"Payment information\">\n      <fieldset>\n        <legend>\n          Enter your payment information\n        </legend>\n        <div class=\"card-number-container\">\n          <label for=\"card-number\">Card Number</label>\n          <button type=\"button\" class=\"cc-camera secondary\">\n             <span class=\"hidden\">Use camera to</span> \n             Scan\n             <span class=\"hidden\">card number</span>\n          </button>\n          <input type=\"text\" \n                  name=\"cardnumber\" \n                  id=\"card-number\" \n                  autocomplete=\"cc-number\"\n                  inputmode=\"numeric\"\n                  pattern=\"[0-9]*\"\n                  aria-describedby=\"description-card-number\"\n                  required>\n          <div id=\"description-card-number\" class=\"hint secure-icon\">\n            Secure form protected by 8 bit encryption\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</example>\n\n```html\n<form aria-label=\"Payment information\">\n  <fieldset>\n    <legend>\n      Enter your payment information\n    </legend>\n    <div class=\"card-number-container\">\n      <label for=\"card-number\">Card Number</label>\n      <button type=\"button\" class=\"cc-camera secondary\">\n         <span class=\"hidden\">Use camera to</span> \n         Scan\n         <span class=\"hidden\">card number</span>\n      </button>\n      <input type=\"text\" \n              name=\"cardnumber\" \n              id=\"card-number\" \n              autocomplete=\"cc-number\"\n              inputmode=\"numeric\"\n              pattern=\"[0-9]*\"\n              aria-describedby=\"description-card-number\"\n              required>\n\n      <div id=\"description-card-number\" class=\"hint secure-icon\">\n        Secure form protected by 8 bit encryption\n      </div>\n    </div>\n    <fieldset>\n      <legend>\n        Expiration <span aria-hidden=\"true\">(MM YY)</span>\n      </legend>\n      <div class=\"expiry-container\">\n        <label class=\"hidden\" for=\"cc-exp-month\">Expiration Month (MM)</label>\n        <input type=\"text\"\n              maxlength=\"2\"  \n              name=\"ccmonth\" \n              id=\"cc-exp-month\"\n              inputmode=\"numeric\"\n              autocomplete=\"cc-exp-month\"\n              pattern=\"[0-9]*\"\n              required>\n        <label class=\"hidden\" for=\"cc-exp-year\">Expiration Year (YY)</span></label>\n        <input type=\"text\"\n              maxlength=\"2\"  \n              name=\"ccyear\" \n              id=\"cc-exp-year\"\n              inputmode=\"numeric\"\n              autocomplete=\"cc-exp-year\"\n              pattern=\"[0-9]*\"\n              required>\n      </div>\n    </fieldset>\n\n    <label for=\"cc-name\">Name on card</label>\n    <input type=\"text\"\n          name=\"ccname\" \n          id=\"cc-name\"\n          autocomplete=\"cc-name\"\n          maxlength=\"19\" \n          required>\n\n    <label for=\"cc-cvc\">Security code</label>\n    <input type=\"text\" \n            maxlength=\"5\" \n            name=\"cvc\" \n            id=\"cc-cvc\"  \n            autocomplete=\"cc-csc\"\n            inputmode=\"numeric\"\n            pattern=\"[0-9]*\"\n            aria-describedby=\"description-cc-cvc\"\n            required>\n    <div id=\"description-cc-cvc\" class=\"hint\">\n      <button type=\"button\" class=\"inline-link\">What's a security code?</a>\n    </div>\n  </fieldset>\n</form>\n```\n\n### Shipping Information\n\n## Developer Notes\n\n### Do not auto focus inputs\n\nAutomatically moving focus to an input field is very confusing for people using assistive technology.\n\n### Group inputs\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* Sign in\n* Shipping address\n* Payment information\n\n### Error handling\n\n* Individual inputs must have programmatically described errors read by the screen reader on focus.\n* For long forms, list all errors in an alert with links back to each invalid input on submission attempts.\n\n### Field width affordance\n\n* Inputs should visually reflect the expected data length.\n  * Middle initial: 1 character\n  * State abbreviation: 2 characters\n  * Zip code: 5 characters\n  * PIN: depends on expected digits\n\n### Layout: Stack inputs vertically\n\nAvoid multiple columns:\n\n* Vertical scrolling is more accessible and expected.\n* Screen magnifiers make it difficult to find right-column fields.\n* Submit buttons should not be placed in sidebars only.\n\n### Use autocomplete\n\n* Enables quicker completion for all users.\n* Especially useful for people with motor disabilities."
        },
        {
          "label": "Header Landmark",
          "name": "header-landmark",
          "type": "file",
          "generalNotes": "There must only be a singular header/banner element on the page. Contains the site title and typically the primary navigation.",
          "gherkin": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   — WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   — WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   — I use the tab key to enter the web browser window\n\n   — I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   — I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   — WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   — I swipe to focusable elements in the header\n\n   — I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   — I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "condensed": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   — Skip-links: Focus moves directly to the header or navigation\n\n   — Tab: Nothing, headings are not focusable unless they are actionable\n\n   — Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   — Swipe: Focus moves directly to the header or navigation\n\n   — Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   — Role: It is discoverable with screenreader shortcuts as header/banner landmark\n\n   — Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<header id=\"example-header\">\n  <a href=\"#nav-example\">Skip to navigation</a>\n  <a href=\"#\">Not the navigation</a>\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n      <li><button>Sign in</button></li>\n    </ul>\n  </nav>\n</header>\n```\n\n### When You Can’t Use Semantic HTML\n\nThis custom header requires extra attributes.\n\n```html\n<div role=\"banner\" tabindex=\"-1\" id=\"example-header\">\n  <a href=\"/\">Website name</a>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page.\n\n### Role\n\n* Identifies itself as a header or banner landmark.\n* If a non-semantic element must be used (like a `<div>`), use `role=\"banner\"` to make the element discoverable.\n\n### Group\n\n* Contains the site title and typically the primary navigation.\n\n### Focus\n\n* Can be targeted with a skip link, but the skip link will typically be labeled “skip to navigation.”\n* Use `tabindex=\"-1\"` to make the header targetable with a skip link.\n* The `<header>` itself isn’t focusable with the tab key."
        },
        {
          "label": "Navigation Landmark",
          "name": "navigation-landmark",
          "type": "file",
          "generalNotes": "Navigation landmarks are essential for guiding users through a website's structure, especially for screen reader and keyboard users. This document provides a comprehensive guide to testing and implementing navigation landmarks.",
          "gherkin": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\nGIVEN THAT I am on a page with a navigation landmark\n\n1. **Keyboard for mobile & desktop**\n\n   — WHEN I use the arrow keys to browse the navigation menu\n\n   — I SEE the screen scrolls through the page.\n\n2. **Desktop screenreader**\n\n   — WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   — I use the arrow keys to browse the navigation menu\n\n   — I HEAR It indicates its role and, if multiple navigations are present (e.g., Main navigation, Site map, Breadcrumbs), their names.\n\n   — I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\n3. **Mobile screenreader**\n\n   — WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   — I swipe to focusable elements in the navigation\n\n   — I HEAR It indicates its role and, if multiple navigations are present, their names.\n\n   — I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "condensed": "### a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   — **Skip-links:** Focus moves directly to the navigation element.\n\n   — **Tab:** Focus moves to links and buttons within the navigation.\n\n   — **Arrow-keys:** Navigation elements are browsed correctly.\n\n2. Test mobile screenreader gestures\n\n   — **Swipe:** Focus moves within the navigation.\n\n   — **Doubletap:** This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n\n   — **Role:** It is discoverable with screenreader shortcuts as a navigation landmark.\n\n   — **Name:** It indicates its role and, if multiple navigations are present (e.g., Main navigation, Site map, Breadcrumbs), their respective names.\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n    <li><button aria-haspopup=\"true\">Sign in</button></li>\n  </ul>\n</nav>\n```\n\n### When You Can’t Use Semantic HTML\n\nThis custom navigation requires extra attributes.\n\n```html\n<div role=\"navigation\" tabindex=\"-1\" id=\"example-navigation\">\n  <ul>\n    <li><a href=\"/\">Website name</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* If there are multiple `<nav>` elements (e.g., site menu, pagination, categories), it may be helpful to name them.\n  * Use `aria-label=\"Menu name\"` when there is no visible navigation title.\n  * Use `aria-describedby=\"menu-name-id\"` when the navigation title is a visible heading.\n\n### Role\n\n* Identifies itself as a navigation landmark.\n* Avoid adding ‘menu’ or ‘option’ roles with arrow key event listeners unless building an actual application like Gmail.\n\n### Focus\n\n* When skip links are used, add `tabindex=\"-1\"` so focus can move to the `nav` element, not just bring it into view.\n\n## Additional Criteria\n\n#### Example Navigation\n\n```html\n<a href=\"#nav-example\">Skip to example navigation</a>\n<a href=\"#\">Not the navigation</a>\n<nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n    <li><button aria-haspopup=\"true\">Sign in</button></li>\n  </ul>\n</nav>\n```\n\n#### Expanding Navigation Example\n\n```html\n<nav id=\"example-expanding-nav\" class=\"menu\">\n  <ul>\n    <li>\n      <a class=\"home\" href=\"/\">Home</a>\n    </li>\n    <li class=\"expander-group\">\n      <button\n        type=\"button\"\n        class=\"menu expander-toggle\"\n        aria-expanded=\"true\"\n        aria-haspopup=\"true\">\n        Menu\n      </button>\n      <ul class=\"subnav expander-content\" aria-hidden=\"false\">\n        <li>\n          <a href=\"/about/\">About</a>\n          <button\n            type=\"button\"\n            class=\"subnav expander-toggle\"\n            aria-expanded=\"false\"\n            aria-haspopup=\"true\">\n            <span class=\"hidden\">About</span>\n          </button>\n          <ul class=\"expander-content\" aria-hidden=\"true\">\n            <li><a href=\"/history/\">Our history</a></li>\n            <li><a href=\"/values/\">Our values</a></li>\n          </ul>\n        </li>\n        <li><a href=\"/contact\">Contact</a></li>\n      </ul>\n    </li>\n  </ul>\n</nav>\n```\n\n### Multiple Navigation Elements\n\nWhen there is more than one navigation element, they must have a name.\n\n```html\n<nav tabindex=\"-1\" id=\"nav\" aria-label=\"Main\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</nav>\n\n<h2 id=\"cat-heading\">Categories</h2>\n<nav id=\"cat-nav\" aria-labelledby=\"cat-heading\">\n  <ul>\n    <li><a href=\"/alpha/\">Alpha</a></li>\n    <li><a href=\"/bravo/\">Bravo</a></li>\n    <li><a href=\"/charlie/\">Charlie</a></li>\n  </ul>\n</nav>\n\n<footer>\n  <nav aria-label=\"Site map\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n  </nav>\n</footer>\n```"
        }
      ]
    }
  ],
  "native": [
    {
      "label": "Controls",
      "name": "controls",
      "children": [
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "Buttons must be implemented as interactive elements for user actions. Avoid using non-interactive elements styled as buttons.",
          "gherkin": null,
          "condensed": "How to test a button\n\n1. Test keyboard actions\n\n   — **Tab, arrow keys, or Control+Tab**: Focus visibly moves to the button.\\\n   — **Spacebar**: Activates on iOS and Android.\\\n   — **Enter**: Activates on Android.\n\n2. Test mobile screenreader gestures\n\n   — **Swipe**: Focus moves to the button and announces its name, role (and state, if applicable).\\\n   — **Double-tap**: Activates the button.\n\n3. Listen to screenreader output on all devices\n\n   — **Name**: Clearly describes the purpose and matches the visible label.\\\n   — **Role**: Identifies as a button; on Android, announces \"double tap to activate.\"\\\n   — **Group**: Associated with its label in a single swipe.\\\n   — **State**: Announces states like disabled or dimmed.\n\n4. Test device settings\n\n   — **Text resizing**: Text adjusts up to 200% without losing information.\n\nFull information: <https://www.magentaa11y.com/#/native-criteria/component/button>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### Video Example\n\n#### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/button/buttonAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n***\n\n### Name\n\n* Describe the button's purpose programmatically.\n* **Android Views**:\n  * Use the `android:text` XML attribute.\n  * Use `contentDescription` for additional descriptive names.\n  * Link visible labels with buttons using the `labelFor` attribute.\n* **Jetpack Compose**:\n  * Use `contentDescription` semantics to describe buttons.\n  * Example: `modifier = Modifier.semantics { contentDescription = \"Submit\" }`.\n\n***\n\n### Role\n\n* Roles are automatically assigned for native components:\n  * **Android Views**: Use `Button` or `ImageButton`.\n  * **Jetpack Compose**: Use the `Button` composable.\n\n***\n\n### State\n\n* Communicate the button's state programmatically:\n  * **Active**:\n    * **Android Views**: Use `android:enabled=true`.\n    * **Jetpack Compose**: Use `Button(enabled = true)`.\n  * **Disabled**:\n    * **Android Views**: Use `android:enabled=false`.\n    * **Jetpack Compose**: Use `Button(enabled = false)` or `Modifier.semantics { disabled() }`.\n\n***\n\n### Focus\n\n* Focus management tips:\n  * Allow the device to handle default focus.\n  * Focus should logically flow through elements on the screen.\n* **Android Views**:\n  * Use `importantForAccessibility` to make elements focusable.\n  * Manage focus order with `nextFocusDown`, `nextFocusUp`, etc.\n* **Jetpack Compose**:\n  * Use `Modifier.focusOrder()` and `FocusRequester` for focus management.\n  * Move focus programmatically with `FocusRequester.requestFocus()`.\n\n***\n\n### Groupings\n\n* Group visible labels with buttons to avoid duplicate announcements:\n  * **Android Views**: Use `screenReaderFocusable=true` for containers.\n  * **Jetpack Compose**: Use `Modifier.semantics(mergeDescendants = true)`.\n\n***\n\n### Announcement Examples\n\n* \"Label, button, double tap to activate.\"\n* \"Label, button, disabled.\"\n* \"Label, (content in cell), button, double tap to activate.\"",
          "iosDeveloperNotes": "### Video Example\n\n#### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n***\n\n### Name\n\n* Programmatic names must describe the button's purpose.\n* If there is a visible label, it must match the programmatic name.\n* Avoid redundancy:\n  * **Incorrect**: \"Submit button, Button.\"\n  * **Correct**: \"Submit, Button.\"\n* **UIKit**:\n  * Set the visible label using `setTitle()`.\n  * Hide visible labels from VoiceOver using `isAccessibilityElement = false`.\n* **SwiftUI**:\n  * Use the `accessibilityLabel()` modifier for invisible labels.\n  * Hide icons from VoiceOver with `accessibilityHidden(true)`.\n\n***\n\n### Role\n\n* Native controls automatically assign the role of a button.\n* For custom buttons:\n  * **UIKit**: Use `UIButton` and set `accessibilityTraits` to `.button`.\n  * **SwiftUI**: Use `Button` and the modifier `accessibilityAddTraits(.isButton)`.\n\n***\n\n### State\n\n* Communicate the button's state (enabled, disabled, or selected):\n  * **Enabled**: Usable.\n  * **Disabled**: Announced as \"dimmed.\"\n  * **Selected**: Announced when using `accessibilityAddTraits(.isSelected)` in SwiftUI.\n\n***\n\n### Focus\n\n* Ensure focus lands logically on page load (e.g., first heading or button).\n* Return focus to the triggering element when closing modals.\n* **UIKit**:\n  * Use `accessibilityViewIsModal` to manage modal focus.\n  * Move focus programmatically with `UIAccessibility.post(notification:argument:)`.\n* **SwiftUI**:\n  * Use `@FocusState` to manage focus programmatically.\n  * Use `accessibilityElement(children: .combine)` to group child elements.\n\n***\n\n### Announcement Examples\n\n* \"Label, button.\"\n* \"Label, button, selected.\"\n* \"Label, dimmed, button.\"\n\n***",
          "developerNotes": ""
        },
        {
          "label": "Captcha",
          "name": "captcha",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Notifications",
      "name": "notifications",
      "children": [
        {
          "label": "Modal",
          "name": "modal",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Patterns",
      "name": "patterns",
      "children": [
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": null,
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": ""
        }
      ]
    }
  ],
  "how-to-test": [
    {
      "label": "Components",
      "name": "components",
      "children": [
        {
          "label": "Images",
          "name": "images",
          "type": "file",
          "generalNotes": "Learn how to test and provide appropriate alternative text for different image types—including informative, decorative, and complex images—to ensure they are accessible to all users. Covers both automated tools and manual inspection techniques.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "1. **Types of images**\n\n   There are many types of images. The type of image can be determined by the context of the page being tested. These different types of images have different testing steps.\n\n   * **Informative Images:** These are visuals like pictures, photos, and illustrations that convey important information or concepts. To make them accessible, we need to include a brief description in text form that captures the key content of the image.\n\n   * **Decorative Images:** Sometimes, images are used purely for aesthetic purposes and don't convey meaningful information. In such cases, it's best to provide an empty text alternative (alt=\"\") to indicate that the image serves a decorative role and doesn't require a description.\n\n   * **Functional Images:** Images that serve as links or buttons should have text alternatives that describe their function rather than just their appearance. For example, if you have an image of a printer icon that initiates a printing action, the alt text should convey this functionality, like \"Print.\"\n\n   * **Images of Text:** Images of text should be avoided whenever possible. In fact, some images of text can violate [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html). However, if you must use images with text, ensure that the alt text contains the exact same words as the text within the image to maintain consistency.\n\n   * **Complex Images such as Graphs and Diagrams:** When using images to present complex data or detailed information, it's crucial to provide a comprehensive text description that conveys all the data and details found in the image. This allows individuals who cannot see the image to still access and understand its content.\n\n2. **How to test**\n\n   ### Automated Testing\n\n   Automated scanning tools, such as [WAVE](https://wave.webaim.org/), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), or [Deque's Axe DevTools](https://www.deque.com/blog/axe-devtools-extension-update-new-color-contrast-analyzer/) are a great starting point for image testing. All of these tools can run page scans that quickly generate reports identifying some image issues. Scans are:\n\n   * <strong>Good</strong> at identifying simple issues like missing <code>alt</code> attributes on images or empty alt attributes on functional images.\n   * <strong>Bad</strong> at identifying issues related to alternative text quality or whether or not an image should be marked as decorative and hidden from screen readers.\n\n   ### Manual testing\n\n   Automated scanning must be complemented with a manual review of the page. Manual image testing can test for alt text quality, ensuring that decorative images are hidden from assistive technology, all text found in images of text are present in alt text, and that functional images have the appropriate alt text.\n\n   #### <strong>Getting started</strong>\n\n   * Open Chrome DevTools in your browser window <span class=\"keyboard-key\">F12</span>\n   * Right-click and select \"Inspect\" on the image in the page you want to test.\n\n3. **Informative Images**\n\n   * Check that the image owns an <code>alt</code> attribute.\n   * Ensure that the <code>alt</code> attribute is present is not empty.\n   * Ensure that the alt attribute is present is not empty, such as <code>alt</code> or <code>alt=\"\"</code>\n   * The <code>alt</code> attribute value / description of the image should be accurate and succinct. The image alternative should not consist of information that duplicates nearby text content.\n\n   <img\n   src=\"media/images/how-to-test/how-to-images-meaningful-1.png\"\n   alt=\"Inspecting an image in DevTools to check alt text, meaningful image\"/>\n\n   ### IMG\n\n   ```html\n   <img alt=\"A rear view of the iPhone 15 Pro in silver, along with a front view of the iPhone 15 Pro Max in silver.\" src=\"../iphone.png\" ... >\n   ```\n\n   ### SVG\n\n   Some images are implemented using inline <code>SVG</code>. Text alernatives for these images can be defined by use of <code>role=\"img\"</code> and <code>aria-label=\"I am the alt text\"</code>. The <code>alt</code> attribute should not be on an element whose <code>role</code> is <code>role=\"img\"</code> this is instead handled by <code>aria-label</code>.\n\n   ```html\n   <svg role=\"img\" aria-label=\"I am the alt text\">...</svg>\n   ```\n\n4. **Decorative Images**\n\n   * Ensure that the <code>alt</code> attribute is present and owns an empty or null value. <code>alt=\"\"</code>.\n   * <strong>Note:</strong> <code>aria-hidden=\"true\"</code> is not needed if an image has an empty or null alt attribute value <code>alt=\"\"</code>.\n\n    <img src=\"media/images/how-to-test/how-to-images-decorative-1.png\" alt=\"Inspecting an image in DevTools to check alt text, decorative image\">\n\n   ```html\n   <img alt=\"\" src=\"../some-image.png\" ...>\n   ```\n\n5. **Functional Images**\n\n   * Ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Functional images are typically links or buttons so the alt text should define the purpose of the link instead of describing the image.\n\n    <img src=\"media/images/how-to-test/how-to-images-functional.png\" alt=\"Inspecting an image in DevTools to check alt text, functional image\">\n\n   * **Note:** Functional images can have empty or null alt attribute values <code>alt=\"\"</code> if the text alternative is conveyed in the parent control's label. For example, <code>aria-label=\"Download on the Apple App Store\"</code>.\n\n   ```html\n   <button aria-label=\"Download on the Apple App Store\">\n       <img src=\"apple.png\" alt=\"\">\n   </button>\n   ```\n\n6. **Images of Text**\n\n   * Sometimes text can't be easily created with HTML and CSS and an image must contain text. In this case, ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Typically, the text is the most important part of the image. There is no need for the image itself to be described unless it adds value to the content of the page.\n   * Consider logging a defect for [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html) if it seems like there might be a viable workaround to add real text to the page vs. an image of text.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-text.png\" alt=\"Inspecting an image in DevTools to check alt text, image of text example\">\n\n   ```html\n   <img src=\"apple-iphone-15-pro.png\" alt=\"Titanium Apple iPhone 15 Pro\">\n   ```\n\n7. **Complex Images**\n\n   * Data visualizations, charts, and graphs can be very difficult to author alternative text for. Some features like charts and graphs may not be accessible themselves but there can be text alternatives nearby that can act as an accessible alternative.\n   * For complex images that are <code>img</code> elements, ensure that the image has an <code>alt</code> attribute and that its value communicates the general purpose of the image. This alt text does not need to contain all of the visual information as that may be too long for an appropriate alt text value. If the alt text does not describe all content in the image ensure there is content nearby, or linked to, that does contain all of the visual information in text form.\n   * For charts and graphs, these features are typically not 100% accessible. Ensure there is content nearby, or linked to, that does contain all of the visual information in text form. For example, an accessible Excel download or HTML Table presenting the key visual information from the content found in the chart.\n   * <strong>Note:</strong> It is important that all text alternatives to complex images must be in an accessible format to qualify as an accessible alternative.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   ```html\n   <img src=\"/assets/images/examples/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   <table>\n       <caption>NASDAQ: TMUS</caption>\n       <tr>\n       <th>Date</th>\n       <th>Price</th>\n       <!-- ... -->\n       </tr>\n       <tr>\n       <td>January 10</td>\n       <td>122.20</td>\n       <!-- ... -->\n       </tr>\n   </table>\n   ```\n\n8. **What to test for**\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure meaningful images have alt text</h3>\n    <p><strong>Note:</strong> The passing example has alt text that matches the text found in the image. The failing example uses the filename for the <code>alt</code> attribute value. Screen readers will announce the filename <code>234@@4-JWKK##KK4442221-11-phone-apple-prod.png</code> which will create a confusing experience.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"Titanium Apple iPhone 15 Pro\"/>\n                </td>   \n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"234@@4-JWKK##KK4442221-11-phone-apple-prod.png\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure decorative images are hidden from assistive technology</h3>\n    <p><strong>Note:</strong> Passing example image has an empty <code>alt</code> attribute value. The failing example has a very long redundant description of the image. Not only is it too verbose, it has the same text as the nearby text content.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>   \n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"Home internet. Picture of a magenta colored gateway device inside of an open box, icon\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure complex images have a text alternative</h3>\n    <p><strong>Note:</strong> The passing chart has a general text alternative describing what the image is but also references nearby text data for reference. <code>alt=\"Fruit chart, data below\"</code>. The failing example owns an empty alt attribute value which hides the image from screen reader users and does not provide an alternative.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"Fruit chart, data below\"/>\n                    <ul>\n                        <li>Watermelons 20%</li>\n                        <li>Grapes 10%</li>\n                        <li>Oranges 24%</li>\n                        <li>Apples 30%</li>\n                        <li>Bananas 16%</li>\n                    </ul>\n                    </td>   \n                    <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n   ## Related WCAG\n\n   * 1.1.1 Non-text Content\n   * 1.4.5 Images of Text\n   * 2.4.4 Link Purpose\n   * 2.5.3 Label in Name\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   * [W3C Images Tutorial](https://www.w3.org/WAI/tutorials/images/)\n   * [WebAIM Alternative Text](https://webaim.org/techniques/alttext/)"
        },
        {
          "label": "Links & Buttons",
          "name": "links-&-buttons",
          "type": "file",
          "generalNotes": "Testing links and buttons is essential to ensuring a site is accessible and functional for all\nusers.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nContains developer-specific information, including expected behaviors, implementation details, and\nbest practices.\n\n1. **How to test**\n\n   **Test with your keyboard first**\n\n   Navigate through the page using only the tab and shift + tab keys on your keyboard to reach all\n   links and buttons.\n\n   **Test with screen readers second**\n\n   Use a screen reader, such as NVDA (for Windows) or VoiceOver (for macOS) and browse the page\n   using your arrow keys to reach all links and buttons.\n\n2. **What to test for**\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure each link and button receives focus and has a visible focus indicator</h3>\n       <table >\n       <thead>\n           <th scope=\"col\">\n           Pass\n           </th>\n           <th scope=\"col\">\n           Fail\n           </th>\n       </thead>\n       <tbody>\n       <tr>\n           <td>\n           <button class=\"Magentaa11y-button Magentaa11y-button--primary\">I get focus!</button>\n           </td>\n           <td>\n           <div class=\"Magentaa11y-button Magentaa11y-button--primary\">I do NOT get focus</div>\n           </td>\n       </tr>\n           <tr>\n           <td>\n           <a href=\"#\">I get focus!</a>\n           </td>\n           <td>\n           <a>I do NOT get focus</a>\n           </td>\n       </tr>\n       </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure buttons and links can be activated with the <code>enter</code> key and that buttons can also be activated with the <code>space</code> key</h3>\n       <table >\n           <thead>\n           <th scope=\"col\">\n               Pass\n           </th>\n           <th scope=\"col\">\n               Fail\n           </th>\n           </thead>\n           <tbody>\n           <tr>\n           <td>\n               <button class=\"Magentaa11y-button Magentaa11y-button--primary\" data-fn=\"showAlert\">Show alert</button>\n           </td>\n           <td>\n               <div class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"button\" tabindex=\"0\" data-fn=\"showMouseAlert\" data-event=\"onMouseDown\">\n               Show alert\n               </div>\n           </td>\n           </tr>\n               <tr>\n           <td>\n               <a href=\"/home\">Magentaa11y home</a>\n           </td>\n           <td>\n               <a tabindex=\"0\" data-fn=\"goToHome\" data-event=\"onMouseUp\" >Magentaa11y home</a>\n           </td>\n           </tr>\n           </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure disabled controls are focusable but not actionable, and have an <code>aria-disabled=\"true\"</code> attribute</h3>\n         <p><strong>Note:</strong> A control that is disabled should not be interactive to any users. Nothing should happen when activated.</p>\n         <table >\n             <thead>\n             <th scope=\"col\">\n                 Preferred\n             </th>\n             <th scope=\"col\">\n                 Visually disabled but actionable\n             </th>\n             </thead>\n             <tbody>\n             <tr>\n             <td>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">Save</button>\n             </td>\n             <td>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary visually-disabled\" tabindex=\"-1\" data-fn=\"showAlertWhenDisabled\">Save</button>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all links and buttons have clear labels and that all graphical controls have accurate <code>aria-label</code> attributes</h3>\n         <table >\n             <thead>\n             <th scope=\"col\">\n                 Pass\n             </th>\n             <th scope=\"col\">\n                 Fail\n             </th>\n             </thead>\n             <tbody>\n                 <tr>\n             <td>\n                 <button data-icon=\"playCircleOutlined\" data-label=\"Play video\" />\n             </td>\n             <td>\n                 <button data-icon=\"playCircleOutlined\">\n                 </button>\n             </td>\n             </tr>\n             <tr>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more about links\n         </a>\n             </td>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more\n         </a>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all CTA buttons or links have appropriate <code>aria-label</code> values.</h3>\n         <p><strong>Note:</strong> If a control has <code>aria-label</code>, the <code>aria-label</code> must contain the text that is presented visually. The text should not be broken up and be the first part of the label.</p>\n         <table>\n         <thead>\n             <th scope=\"col\">\n             Pass\n             </th>\n             <th scope=\"col\">\n             Fail\n             </th>\n         </thead>\n         <tbody>\n             <tr>\n             <td>\n             <h2>iPhone 14</h2>\n             <p>I am the product information.</p>\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Buy now, iPhone 14\">Buy Now</button>\n             </td>\n             <td>\n             <h2>iPhone 14</h2>\n             <p>I am the product information.</p>\n             <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Learn more about our specials\">Buy Now</button>\n             </td>\n         </tr>\n         <tr>\n             <td>\n             <code>aria-label=\"Buy now, iPhone 14\"</code>\n             </td>\n             <td>\n             <code>aria-label=\"Learn more about our specials\"</code>\n             </td>\n         </tr>\n         </tbody>\n         </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure screen readers accurately announce any button or link state that is conveyed visually</h3>\n       <p><strong>Note:</strong> States such as expanded,collapsed, or current can be communicated to screen reader users.</p>\n       <table>\n         <thead>\n           <th scope=\"col\">Pass</th>\n           <th scope=\"col\">Fail</th>\n         </thead>\n         <tbody>\n           <tr>\n             <td>\n               <div class=\"MagentaA11y-accordion\">\n                 <h2 class=\"MagentaA11y-accordion__heading\">\n                   <button\n                     class=\"MagentaA11y-accordion__headline\"\n                     aria-expanded=\"false\"\n                     data-fn=\"toggleAccordionState\"\n                     aria-controls=\"list\">\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                   </button>\n                 </h2>\n                 <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n                   This button expressed its state as expanded or collapsed\n                 </div>\n               </div>\n             </td>\n             <td>\n               <!--  -->\n               <div class=\"MagentaA11y-accordion\">\n                 <h2 class=\"MagentaA11y-accordion__heading\">\n                   <button class=\"MagentaA11y-accordion__headline\" aria-controls=\"listB\">\n                     <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                   </button>\n                 </h2>\n                 <div class=\"MagentaA11y-accordion__body\" id=\"listB\">\n                   This button is not conveying it's state.\n                 </div>\n               </div>\n             </td>\n           </tr>\n         </tbody>\n       </table>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure skip to &amp; same-page links move focus for screen reader and keyboard users</h3>\n       <table class=\"column-2\">\n         <thead>\n           <tr><th scope=\"col\">\n             Pass\n           </th>\n           <th scope=\"col\">\n             Fail\n           </th>\n         </tr></thead>\n         <tbody>\n         <tr>\n           <td>\n           <a id=\"return-to-top-link\" data-fn=\"scrollAndFocusMain\" href=\"#\">Return to top</a>\n           </td>\n           <td>\n           <a href=\"#\" data-fn=\"scrollToTopOnly\">\n           Return to top</a>\n           </td>\n         </tr> \n         </tbody>\n       </table>\n     </div>\n\n3. **What's the difference between a link and a button**\n\n   ### If it goes somewhere, it's `<a>` link.\n\n   * When the user clicks a link, they are taken to a different location in the site.\n     * Either another page or even another area of the same page\n   * A link can look like a big shiny button but it must be coded as `<a>` link\n   * An interactive link should have a valid href value so it can receive keyboard focus.<br>For\n     example `<a href=\"/some-page\">...</a>`.\n\n   ### If it does something, it's a `<button>`\n\n   * Buttons cause an action to occur on the same page\n     * Submit a form (even when submission takes you to a new page)\n     * Open a menu\n     * Launch a modal\n     * Expand details\n   * A button can look like a link, but it must be coded as a `<button>`\n\n   ## Related WCAG\n\n   * 2.4.4 Link Purpose (In Context)\n   * 2.5.3 Label in Name\n   * 3.2.4 Consistent Identification\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   [WebAIM: Links and Hypertext](https://webaim.org/techniques/hypertext/)\n\n   [WebAIM: Buttons](https://webaim.org/techniques/forms/controls#button)"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Keyboard & Focus",
          "name": "keyboard-&-focus",
          "type": "file",
          "generalNotes": "Manual testing is not difficult or time consuming once a team understands keyboard interactions.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **Test with the keyboard only**\n\n   It is crucial to **test with only the keyboard first**, without the screen reader activated.\n\n   **Why keyboard testing is so important**\n\n   * Keyboard accessibility is **prerequisite** to screen reader accessibility.\n\n     * If it doesn't work with only the keyboard, it won't work with a screen reader.\n\n   * screen reader applications will sometimes cover missing functionality that the sighted keyboard user won't be able to use.\n\n   **Devices**\n\n   * Test with a mobile device and a bluetooth keyboard\n   * Test with a desktop device and a keyboard\n\n   **Browsers**\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for keyboard testing.\n\n   * Note: In Safari, you'll have to activate tab in Preferences » Advanced » Press Tab\n\n2. **How to test**\n\n   Keyboard testing consists of a few keyboard commands to interact with web experiences.\n\n   <table >\n     <caption class=\"text-left\">\n       Keyboard basics\n     </caption>\n     <thead>\n       <tr>\n         <th scope=\"col\">\n           Key\n         </th>\n         <th scope=\"col\">\n           Action\n         </th>\n       </tr>\n     </thead>\n     <tbody>\n       <tr>\n         <th scope=\"row\">\n           <span >Arrows</span>\n         </th>\n         <td>\n           Should scroll the screen or interact with form fields\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Tab</span>\n         </th>\n         <td>\n           Moves through the interface focusing on elements that are focusable. For example, buttons and links.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Shift + Tab</span>\n         </th>\n         <td>\n           Moves in reverse through the interface focusing on elements that are focusable.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Enter</span>\n         </th>\n         <td>\n           Activates links and buttons\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Spacebar</span>\n         </th>\n         <td>\n           Activates buttons and interacts with form elements\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Escape</span>\n         </th>\n         <td>\n           Should close or dismiss widgets like dialogs\n         </td>\n       </tr>  \n     </tbody>\n   </table>\n\n3. **What to test for**\n\n   * <div >\n       <h3>✓ Ensure all mouse functionality is present for keyboard</h3>\n       <p>Identify functionality within the experience that can be operated with a mouse or pointing device. Ensure this content can be accessed with they keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Ensure there is a highly visible visual indication of keyboard focus</h3>\n       <p>Keyboard users need to understand where they are in the interface at all times. The visual indication of keyboard focus (focus ring) should be highly visible and have a color contrast ratio of 3:1 against the background. Verify that overlap items (e.g. cookie banners, sticky footers, sticky headers, and non-modal dialogs) do not obscure the visual indicator. </p>\n     </div>\n   * <div >\n       <h3>✓ Ensure that there are no keyboard traps</h3>\n       <p>Ensure that while navigating the experience, you do not encounter situations where you are not able to move forward or backward with the keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Verify that the focus order is logical</h3>\n       <p>In an English-based experience, keyboard focus should move top-to-bottom and left-to-right in a logical order. Ensure focus is not jumping around the experience in a way that makes it hard to understand the content.</p>\n     </div>\n   * <div >\n       <h3>✓ On focus does not create a change of context</h3>\n       <p>Ensure that when an interactive element receives keyboard focus that a change of context is not initiated without warning of such behavoir. An example of change of context is a page load or web form submission.</p>\n     </div>\n   * <div >\n       <h3>✓ Test for skip links</h3>\n       <p>Where there are large chunks of repeated content, ensure that there are skip links present for keboard users. For example, on a site with a large site navigation system, the first focusable element in the page should be a link that allows users to jump to the main content of the site.</p>\n     </div>\n\n### Video Example\n\n<video controls>\n  <source src=\"media/video/how-to-test/how-to-keyboard.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n\n<hr>\n\n### Related WCAG\n\n* 1.4.11: Non-text Contrast\n* 2.1.1 Keyboard\n* 2.1.2 No Keyboard Trap\n* 2.4.3 Focus Order\n* 2.4.7 Focus Visible\n* 3.2.1 On Focus\n\n### Resources\n\n[WebAIM Keyboard Accessibility](https://webaim.org/techniques/keyboard/)"
        }
      ]
    }
  ]
}